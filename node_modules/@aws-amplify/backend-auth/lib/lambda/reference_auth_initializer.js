import { CognitoIdentityProviderClient, DescribeUserPoolClientCommand, DescribeUserPoolCommand, GetUserPoolMfaConfigCommand, ListGroupsCommand, ListIdentityProvidersCommand, } from '@aws-sdk/client-cognito-identity-provider';
import { CognitoIdentityClient, DescribeIdentityPoolCommand, GetIdentityPoolRolesCommand, } from '@aws-sdk/client-cognito-identity';
import { randomUUID } from 'node:crypto';
/**
 * Initializer that fetches and process auth resources.
 */
export class ReferenceAuthInitializer {
    cognitoIdentityClient;
    cognitoIdentityProviderClient;
    uuidGenerator;
    /**
     * Create a new initializer
     * @param cognitoIdentityClient identity client
     * @param cognitoIdentityProviderClient identity provider client
     */
    constructor(cognitoIdentityClient, cognitoIdentityProviderClient, uuidGenerator) {
        this.cognitoIdentityClient = cognitoIdentityClient;
        this.cognitoIdentityProviderClient = cognitoIdentityProviderClient;
        this.uuidGenerator = uuidGenerator;
    }
    /**
     * Handles custom resource events
     * @param event event to process
     * @returns custom resource response
     */
    handleEvent = async (event) => {
        console.info(`Received '${event.RequestType}' event`);
        // physical id is only generated on create, otherwise it must stay the same
        const physicalId = event.RequestType === 'Create'
            ? this.uuidGenerator()
            : event.PhysicalResourceId;
        // on delete, just respond with success since we don't need to do anything
        if (event.RequestType === 'Delete') {
            return {
                RequestId: event.RequestId,
                LogicalResourceId: event.LogicalResourceId,
                PhysicalResourceId: physicalId,
                StackId: event.StackId,
                NoEcho: true,
                Status: 'SUCCESS',
            };
        }
        // for create or update events, we will fetch and validate resource properties
        const props = event.ResourceProperties;
        const { userPool, userPoolPasswordPolicy, userPoolMFA, userPoolGroups, userPoolProviders, userPoolClient, identityPool, roles, } = await this.getResourceDetails(props.userPoolId, props.identityPoolId, props.userPoolClientId);
        this.validateResources(userPool, userPoolProviders, userPoolGroups, userPoolClient, identityPool, roles, props);
        const userPoolOutputs = await this.getUserPoolOutputs(userPool, userPoolPasswordPolicy, userPoolProviders, userPoolMFA, props.region);
        const identityPoolOutputs = await this.getIdentityPoolOutputs(identityPool);
        const userPoolClientOutputs = await this.getUserPoolClientOutputs(userPoolClient);
        const data = {
            userPoolId: props.userPoolId,
            webClientId: props.userPoolClientId,
            identityPoolId: props.identityPoolId,
            ...userPoolOutputs,
            ...identityPoolOutputs,
            ...userPoolClientOutputs,
        };
        return {
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
            PhysicalResourceId: physicalId,
            StackId: event.StackId,
            NoEcho: true,
            Data: data,
            Status: 'SUCCESS',
        };
    };
    getUserPool = async (userPoolId) => {
        const userPoolCommand = new DescribeUserPoolCommand({
            UserPoolId: userPoolId,
        });
        const userPoolResponse = await this.cognitoIdentityProviderClient.send(userPoolCommand);
        if (!userPoolResponse.UserPool) {
            throw new Error('Failed to retrieve the specified UserPool.');
        }
        const userPool = userPoolResponse.UserPool;
        const policy = userPool.Policies?.PasswordPolicy;
        if (!policy) {
            throw new Error('Failed to retrieve password policy.');
        }
        return {
            userPool: userPoolResponse.UserPool,
            userPoolPasswordPolicy: policy,
        };
    };
    getUserPoolMFASettings = async (userPoolId) => {
        // mfa types
        const mfaCommand = new GetUserPoolMfaConfigCommand({
            UserPoolId: userPoolId,
        });
        const mfaResponse = await this.cognitoIdentityProviderClient.send(mfaCommand);
        return mfaResponse;
    };
    getUserPoolGroups = async (userPoolId) => {
        let nextToken;
        const groups = [];
        do {
            const listGroupsResponse = await this.cognitoIdentityProviderClient.send(new ListGroupsCommand({
                UserPoolId: userPoolId,
                NextToken: nextToken,
            }));
            if (!listGroupsResponse.Groups) {
                throw new Error('An error occurred while retrieving the groups for the user pool.');
            }
            groups.push(...listGroupsResponse.Groups);
            nextToken = listGroupsResponse.NextToken;
        } while (nextToken);
        return groups;
    };
    getUserPoolProviders = async (userPoolId) => {
        const providers = [];
        let nextToken;
        do {
            const providersResponse = await this.cognitoIdentityProviderClient.send(new ListIdentityProvidersCommand({
                UserPoolId: userPoolId,
                NextToken: nextToken,
            }));
            if (providersResponse.Providers === undefined) {
                throw new Error('An error occurred while retrieving identity providers for the user pool.');
            }
            providers.push(...providersResponse.Providers);
            nextToken = providersResponse.NextToken;
        } while (nextToken);
        return providers;
    };
    getIdentityPool = async (identityPoolId) => {
        const idpResponse = await this.cognitoIdentityClient.send(new DescribeIdentityPoolCommand({
            IdentityPoolId: identityPoolId,
        }));
        if (!idpResponse.IdentityPoolId) {
            throw new Error('An error occurred while retrieving the identity pool details.');
        }
        return idpResponse;
    };
    getIdentityPoolRoles = async (identityPoolId) => {
        const rolesCommand = new GetIdentityPoolRolesCommand({
            IdentityPoolId: identityPoolId,
        });
        const rolesResponse = await this.cognitoIdentityClient.send(rolesCommand);
        if (!rolesResponse.Roles) {
            throw new Error('An error occurred while retrieving the roles for the identity pool.');
        }
        return rolesResponse.Roles;
    };
    getUserPoolClient = async (userPoolId, userPoolClientId) => {
        const userPoolClientCommand = new DescribeUserPoolClientCommand({
            UserPoolId: userPoolId,
            ClientId: userPoolClientId,
        });
        const userPoolClientResponse = await this.cognitoIdentityProviderClient.send(userPoolClientCommand);
        if (!userPoolClientResponse.UserPoolClient) {
            throw new Error('An error occurred while retrieving the user pool client details.');
        }
        return userPoolClientResponse.UserPoolClient;
    };
    /**
     * Retrieves all of the resource data that is necessary for validation and output generation.
     * @param userPoolId userPoolId
     * @param identityPoolId identityPoolId
     * @param userPoolClientId userPoolClientId
     * @returns all necessary resource data
     */
    getResourceDetails = async (userPoolId, identityPoolId, userPoolClientId) => {
        const { userPool, userPoolPasswordPolicy } = await this.getUserPool(userPoolId);
        const userPoolMFA = await this.getUserPoolMFASettings(userPoolId);
        const userPoolProviders = await this.getUserPoolProviders(userPoolId);
        const userPoolGroups = await this.getUserPoolGroups(userPoolId);
        const userPoolClient = await this.getUserPoolClient(userPoolId, userPoolClientId);
        const identityPool = await this.getIdentityPool(identityPoolId);
        const roles = await this.getIdentityPoolRoles(identityPoolId);
        return {
            userPool,
            userPoolPasswordPolicy,
            userPoolMFA,
            userPoolProviders,
            userPoolGroups,
            userPoolClient,
            identityPool,
            roles,
        };
    };
    /**
     * Validate the resource associations.
     * 1. make sure the user pool & user pool client pair are a cognito provider for the identity pool
     * 2. make sure the provided auth/unauth role ARNs match the roles for the identity pool
     * 3. make sure the user pool client is a web client
     * @param userPool userPool
     * @param userPoolProviders the user pool providers
     * @param userPoolGroups the existing groups for the userPool
     * @param userPoolClient userPoolClient
     * @param identityPool identityPool
     * @param identityPoolRoles identityPool roles
     * @param props props that include the roles which we compare with the actual roles for the identity pool
     */
    validateResources = (userPool, userPoolProviders, userPoolGroups, userPoolClient, identityPool, identityPoolRoles, props) => {
        // verify the user pool is a cognito provider for this identity pool
        if (!identityPool.CognitoIdentityProviders ||
            identityPool.CognitoIdentityProviders.length === 0) {
            throw new Error('The specified identity pool does not have any cognito identity providers.');
        }
        // check for alias attributes, since we don't support this yet
        if (userPool.AliasAttributes && userPool.AliasAttributes.length > 0) {
            throw new Error('The specified user pool is configured with alias attributes which are not currently supported.');
        }
        // check OAuth settings
        if (userPoolProviders.length > 0) {
            // validate user pool
            const domainSpecified = userPool.Domain || userPool.CustomDomain;
            if (!domainSpecified) {
                throw new Error('You must configure a domain for your UserPool if external login providers are enabled.');
            }
            // validate user pool client
            const hasLogoutUrls = userPoolClient.LogoutURLs && userPoolClient.LogoutURLs.length > 0;
            const hasCallbackUrls = userPoolClient.CallbackURLs && userPoolClient.CallbackURLs.length > 0;
            if (!hasLogoutUrls) {
                throw new Error('Your UserPool client must have "Allowed sign-out URLs" configured if external login providers are enabled.');
            }
            if (!hasCallbackUrls) {
                throw new Error('Your UserPool client must have "Allowed callback URLs" configured if external login providers are enabled.');
            }
        }
        // make sure props groups Roles actually exist for the user pool
        const groupEntries = Object.entries(props.groups);
        for (const [groupName, groupRoleARN] of groupEntries) {
            const match = userPoolGroups.find((g) => g.RoleArn === groupRoleARN);
            if (match === undefined) {
                throw new Error(`The group '${groupName}' with role '${groupRoleARN}' does not match any group for the specified user pool.`);
            }
        }
        // verify that the user pool + user pool client pair are configured with the identity pool
        const matchingProvider = identityPool.CognitoIdentityProviders.find((p) => {
            const matchingUserPool = p.ProviderName ===
                `cognito-idp.${props.region}.amazonaws.com/${userPool.Id}`;
            const matchingUserPoolClient = p.ClientId === userPoolClient.ClientId;
            return matchingUserPool && matchingUserPoolClient;
        });
        if (!matchingProvider) {
            throw new Error('The user pool and user pool client pair do not match any cognito identity providers for the specified identity pool.');
        }
        // verify the auth / unauth roles from the props match the identity pool roles that we retrieved
        const authRoleArn = identityPoolRoles['authenticated'];
        const unauthRoleArn = identityPoolRoles['unauthenticated'];
        if (authRoleArn !== props.authRoleArn) {
            throw new Error('The provided authRoleArn does not match the authenticated role for the specified identity pool.');
        }
        if (unauthRoleArn !== props.unauthRoleArn) {
            throw new Error('The provided unauthRoleArn does not match the unauthenticated role for the specified identity pool.');
        }
        // make sure the client is a web client here (web clients shouldn't have client secrets)
        if (userPoolClient?.ClientSecret) {
            throw new Error('The specified user pool client is not configured as a web client.');
        }
    };
    /**
     * Transform the userPool data into outputs.
     * @param userPool user pool
     * @param userPoolPasswordPolicy user pool password policy
     * @param userPoolProviders user pool providers
     * @param userPoolMFA user pool MFA settings
     * @returns formatted outputs
     */
    getUserPoolOutputs = (userPool, userPoolPasswordPolicy, userPoolProviders, userPoolMFA, region) => {
        // password policy requirements
        const requirements = [];
        userPoolPasswordPolicy.RequireNumbers &&
            requirements.push('REQUIRES_NUMBERS');
        userPoolPasswordPolicy.RequireLowercase &&
            requirements.push('REQUIRES_LOWERCASE');
        userPoolPasswordPolicy.RequireUppercase &&
            requirements.push('REQUIRES_UPPERCASE');
        userPoolPasswordPolicy.RequireSymbols &&
            requirements.push('REQUIRES_SYMBOLS');
        // mfa types
        const mfaTypes = [];
        if (userPoolMFA.SmsMfaConfiguration &&
            userPoolMFA.SmsMfaConfiguration.SmsConfiguration) {
            mfaTypes.push('SMS_MFA');
        }
        if (userPoolMFA.SoftwareTokenMfaConfiguration?.Enabled) {
            mfaTypes.push('TOTP');
        }
        // social providers
        const socialProviders = [];
        if (userPoolProviders) {
            for (const provider of userPoolProviders) {
                const providerType = provider.ProviderType;
                const providerName = provider.ProviderName;
                if (providerType === 'Google') {
                    socialProviders.push('GOOGLE');
                }
                if (providerType === 'Facebook') {
                    socialProviders.push('FACEBOOK');
                }
                if (providerType === 'SignInWithApple') {
                    socialProviders.push('SIGN_IN_WITH_APPLE');
                }
                if (providerType === 'LoginWithAmazon') {
                    socialProviders.push('LOGIN_WITH_AMAZON');
                }
                if (providerType === 'OIDC' && providerName) {
                    socialProviders.push(providerName);
                }
                if (providerType === 'SAML' && providerName) {
                    socialProviders.push(providerName);
                }
            }
        }
        // domain
        const oauthDomain = userPool.CustomDomain ?? userPool.Domain ?? '';
        const fullDomainPath = userPool.CustomDomain
            ? userPool.CustomDomain
            : `${oauthDomain}.auth.${region}.amazoncognito.com`;
        const data = {
            signupAttributes: JSON.stringify(userPool.SchemaAttributes?.filter((attribute) => attribute.Required && attribute.Name).map((attribute) => attribute.Name?.toLowerCase()) || []),
            usernameAttributes: JSON.stringify(userPool.UsernameAttributes?.map((attribute) => attribute.toLowerCase()) || []),
            verificationMechanisms: JSON.stringify(userPool.AutoVerifiedAttributes ?? []),
            passwordPolicyMinLength: userPoolPasswordPolicy.MinimumLength === undefined
                ? ''
                : userPoolPasswordPolicy.MinimumLength.toString(),
            passwordPolicyRequirements: JSON.stringify(requirements),
            mfaConfiguration: userPool.MfaConfiguration ?? 'OFF',
            mfaTypes: JSON.stringify(mfaTypes),
            socialProviders: JSON.stringify(socialProviders),
            oauthCognitoDomain: fullDomainPath,
        };
        return data;
    };
    /**
     * Transforms identityPool info into outputs.
     * @param identityPool identity pool data
     * @returns formatted outputs
     */
    getIdentityPoolOutputs = (identityPool) => {
        const data = {
            allowUnauthenticatedIdentities: identityPool.AllowUnauthenticatedIdentities === true ? 'true' : 'false',
        };
        return data;
    };
    /**
     * Transforms userPoolClient info into outputs.
     * @param userPoolClient userPoolClient data
     * @returns formatted outputs
     */
    getUserPoolClientOutputs = (userPoolClient) => {
        const data = {
            oauthScope: JSON.stringify(userPoolClient.AllowedOAuthScopes ?? []),
            oauthRedirectSignIn: userPoolClient.CallbackURLs
                ? userPoolClient.CallbackURLs.join(',')
                : '',
            oauthRedirectSignOut: userPoolClient.LogoutURLs
                ? userPoolClient.LogoutURLs.join(',')
                : '',
            oauthResponseType: userPoolClient.AllowedOAuthFlows
                ? userPoolClient.AllowedOAuthFlows.join(',')
                : '',
            oauthClientId: userPoolClient.ClientId,
        };
        return data;
    };
}
/**
 * Entry point for the lambda-backend custom resource to retrieve auth outputs.
 */
export const handler = async (event) => {
    const initializer = new ReferenceAuthInitializer(new CognitoIdentityClient(), new CognitoIdentityProviderClient(), randomUUID);
    return initializer.handleEvent(event);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlX2F1dGhfaW5pdGlhbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGFtYmRhL3JlZmVyZW5jZV9hdXRoX2luaXRpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFDTCw2QkFBNkIsRUFDN0IsNkJBQTZCLEVBQzdCLHVCQUF1QixFQUN2QiwyQkFBMkIsRUFHM0IsaUJBQWlCLEVBQ2pCLDRCQUE0QixHQUs3QixNQUFNLDJDQUEyQyxDQUFDO0FBQ25ELE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsMkJBQTJCLEVBRTNCLDJCQUEyQixHQUM1QixNQUFNLGtDQUFrQyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFZekM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sd0JBQXdCO0lBT3pCO0lBQ0E7SUFDQTtJQVJWOzs7O09BSUc7SUFDSCxZQUNVLHFCQUE0QyxFQUM1Qyw2QkFBNEQsRUFDNUQsYUFBMkI7UUFGM0IsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1QyxrQ0FBNkIsR0FBN0IsNkJBQTZCLENBQStCO1FBQzVELGtCQUFhLEdBQWIsYUFBYSxDQUFjO0lBQ2xDLENBQUM7SUFFSjs7OztPQUlHO0lBQ0ksV0FBVyxHQUFHLEtBQUssRUFBRSxLQUF3QyxFQUFFLEVBQUU7UUFDdEUsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEtBQUssQ0FBQyxXQUFXLFNBQVMsQ0FBQyxDQUFDO1FBQ3RELDJFQUEyRTtRQUMzRSxNQUFNLFVBQVUsR0FDZCxLQUFLLENBQUMsV0FBVyxLQUFLLFFBQVE7WUFDNUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztRQUUvQiwwRUFBMEU7UUFDMUUsSUFBSSxLQUFLLENBQUMsV0FBVyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQ25DLE9BQU87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Q0FBQyxHQUFHLENBQUM7Z0JBQ3JDLENBQUMsQ0FBQyxFQUFFO1lBQ04saUJBQWlCLEVBQUUsY0FBYyxDQUFDLGlCQUFpQjtnQkFDakQsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2dCQUM1QyxDQUFDLENBQUMsRUFBRTtZQUNOLGFBQWEsRUFBRSxjQUFjLENBQUMsUUFBUTtTQUN2QyxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDLENBQUM7Q0FDSDtBQUVEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDMUIsS0FBd0MsRUFDTyxFQUFFO0lBQ2pELE1BQU0sV0FBVyxHQUFHLElBQUksd0JBQXdCLENBQzlDLElBQUkscUJBQXFCLEVBQUUsRUFDM0IsSUFBSSw2QkFBNkIsRUFBRSxFQUNuQyxVQUFVLENBQ1gsQ0FBQztJQUNGLE9BQU8sV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnQsXG4gIENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VSZXNwb25zZSxcbiAgQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZVN1Y2Nlc3NSZXNwb25zZSxcbn0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQge1xuICBDb2duaXRvSWRlbnRpdHlQcm92aWRlckNsaWVudCxcbiAgRGVzY3JpYmVVc2VyUG9vbENsaWVudENvbW1hbmQsXG4gIERlc2NyaWJlVXNlclBvb2xDb21tYW5kLFxuICBHZXRVc2VyUG9vbE1mYUNvbmZpZ0NvbW1hbmQsXG4gIEdldFVzZXJQb29sTWZhQ29uZmlnQ29tbWFuZE91dHB1dCxcbiAgR3JvdXBUeXBlLFxuICBMaXN0R3JvdXBzQ29tbWFuZCxcbiAgTGlzdElkZW50aXR5UHJvdmlkZXJzQ29tbWFuZCxcbiAgUGFzc3dvcmRQb2xpY3lUeXBlLFxuICBQcm92aWRlckRlc2NyaXB0aW9uLFxuICBVc2VyUG9vbENsaWVudFR5cGUsXG4gIFVzZXJQb29sVHlwZSxcbn0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNvZ25pdG8taWRlbnRpdHktcHJvdmlkZXInO1xuaW1wb3J0IHtcbiAgQ29nbml0b0lkZW50aXR5Q2xpZW50LFxuICBEZXNjcmliZUlkZW50aXR5UG9vbENvbW1hbmQsXG4gIERlc2NyaWJlSWRlbnRpdHlQb29sQ29tbWFuZE91dHB1dCxcbiAgR2V0SWRlbnRpdHlQb29sUm9sZXNDb21tYW5kLFxufSBmcm9tICdAYXdzLXNkay9jbGllbnQtY29nbml0by1pZGVudGl0eSc7XG5pbXBvcnQgeyByYW5kb21VVUlEIH0gZnJvbSAnbm9kZTpjcnlwdG8nO1xuaW1wb3J0IHsgQXV0aE91dHB1dCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLW91dHB1dC1zY2hlbWFzJztcbmV4cG9ydCB0eXBlIFJlZmVyZW5jZUF1dGhJbml0aWFsaXplclByb3BzID0ge1xuICB1c2VyUG9vbElkOiBzdHJpbmc7XG4gIGlkZW50aXR5UG9vbElkOiBzdHJpbmc7XG4gIGF1dGhSb2xlQXJuOiBzdHJpbmc7XG4gIHVuYXV0aFJvbGVBcm46IHN0cmluZztcbiAgdXNlclBvb2xDbGllbnRJZDogc3RyaW5nO1xuICBncm91cHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gIHJlZ2lvbjogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplciB0aGF0IGZldGNoZXMgYW5kIHByb2Nlc3MgYXV0aCByZXNvdXJjZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWZlcmVuY2VBdXRoSW5pdGlhbGl6ZXIge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluaXRpYWxpemVyXG4gICAqIEBwYXJhbSBjb2duaXRvSWRlbnRpdHlDbGllbnQgaWRlbnRpdHkgY2xpZW50XG4gICAqIEBwYXJhbSBjb2duaXRvSWRlbnRpdHlQcm92aWRlckNsaWVudCBpZGVudGl0eSBwcm92aWRlciBjbGllbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY29nbml0b0lkZW50aXR5Q2xpZW50OiBDb2duaXRvSWRlbnRpdHlDbGllbnQsXG4gICAgcHJpdmF0ZSBjb2duaXRvSWRlbnRpdHlQcm92aWRlckNsaWVudDogQ29nbml0b0lkZW50aXR5UHJvdmlkZXJDbGllbnQsXG4gICAgcHJpdmF0ZSB1dWlkR2VuZXJhdG9yOiAoKSA9PiBzdHJpbmcsXG4gICkge31cblxuICAvKipcbiAgICogSGFuZGxlcyBjdXN0b20gcmVzb3VyY2UgZXZlbnRzXG4gICAqIEBwYXJhbSBldmVudCBldmVudCB0byBwcm9jZXNzXG4gICAqIEByZXR1cm5zIGN1c3RvbSByZXNvdXJjZSByZXNwb25zZVxuICAgKi9cbiAgcHVibGljIGhhbmRsZUV2ZW50ID0gYXN5bmMgKGV2ZW50OiBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnQpID0+IHtcbiAgICBjb25zb2xlLmluZm8oYFJlY2VpdmVkICcke2V2ZW50LlJlcXVlc3RUeXBlfScgZXZlbnRgKTtcbiAgICAvLyBwaHlzaWNhbCBpZCBpcyBvbmx5IGdlbmVyYXRlZCBvbiBjcmVhdGUsIG90aGVyd2lzZSBpdCBtdXN0IHN0YXkgdGhlIHNhbWVcbiAgICBjb25zdCBwaHlzaWNhbElkID1cbiAgICAgIGV2ZW50LlJlcXVlc3RUeXBlID09PSAnQ3JlYXRlJ1xuICAgICAgICA/IHRoaXMudXVpZEdlbmVyYXRvcigpXG4gICAgICAgIDogZXZlbnQuUGh5c2ljYWxSZXNvdXJjZUlkO1xuXG4gICAgLy8gb24gZGVsZXRlLCBqdXN0IHJlc3BvbmQgd2l0aCBzdWNjZXNzIHNpbmNlIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmdcbiAgICBpZiAoZXZlbnQuUmVxdWVzdFR5cGUgPT09ICdEZWxldGUnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBSZXF1ZXN0SWQ6IGV2ZW50LlJlcXVlc3RJZCxcbiAgICAgICAgTG9naWNhbFJlc291cmNlSWQ6IGV2ZW50LkxvZ2ljYWxSZXNvdXJjZUlkLFxuICAgICAgICBQaHlzaWNhbFJlc291cmNlSWQ6IHBoeXNpY2FsSWQsXG4gICAgICAgIFN0YWNrSWQ6IGV2ZW50LlN0YWNrSWQsXG4gICAgICAgIE5vRWNobzogdHJ1ZSxcbiAgICAgICAgU3RhdHVzOiAnU1VDQ0VTUycsXG4gICAgICB9IGFzIENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VTdWNjZXNzUmVzcG9uc2U7XG4gICAgfVxuICAgIC8vIGZvciBjcmVhdGUgb3IgdXBkYXRlIGV2ZW50cywgd2Ugd2lsbCBmZXRjaCBhbmQgdmFsaWRhdGUgcmVzb3VyY2UgcHJvcGVydGllc1xuICAgIGNvbnN0IHByb3BzID1cbiAgICAgIGV2ZW50LlJlc291cmNlUHJvcGVydGllcyBhcyB1bmtub3duIGFzIFJlZmVyZW5jZUF1dGhJbml0aWFsaXplclByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIHVzZXJQb29sLFxuICAgICAgdXNlclBvb2xQYXNzd29yZFBvbGljeSxcbiAgICAgIHVzZXJQb29sTUZBLFxuICAgICAgdXNlclBvb2xHcm91cHMsXG4gICAgICB1c2VyUG9vbFByb3ZpZGVycyxcbiAgICAgIHVzZXJQb29sQ2xpZW50LFxuICAgICAgaWRlbnRpdHlQb29sLFxuICAgICAgcm9sZXMsXG4gICAgfSA9IGF3YWl0IHRoaXMuZ2V0UmVzb3VyY2VEZXRhaWxzKFxuICAgICAgcHJvcHMudXNlclBvb2xJZCxcbiAgICAgIHByb3BzLmlkZW50aXR5UG9vbElkLFxuICAgICAgcHJvcHMudXNlclBvb2xDbGllbnRJZCxcbiAgICApO1xuXG4gICAgdGhpcy52YWxpZGF0ZVJlc291cmNlcyhcbiAgICAgIHVzZXJQb29sLFxuICAgICAgdXNlclBvb2xQcm92aWRlcnMsXG4gICAgICB1c2VyUG9vbEdyb3VwcyxcbiAgICAgIHVzZXJQb29sQ2xpZW50LFxuICAgICAgaWRlbnRpdHlQb29sLFxuICAgICAgcm9sZXMsXG4gICAgICBwcm9wcyxcbiAgICApO1xuXG4gICAgY29uc3QgdXNlclBvb2xPdXRwdXRzID0gYXdhaXQgdGhpcy5nZXRVc2VyUG9vbE91dHB1dHMoXG4gICAgICB1c2VyUG9vbCxcbiAgICAgIHVzZXJQb29sUGFzc3dvcmRQb2xpY3ksXG4gICAgICB1c2VyUG9vbFByb3ZpZGVycyxcbiAgICAgIHVzZXJQb29sTUZBLFxuICAgICAgcHJvcHMucmVnaW9uLFxuICAgICk7XG4gICAgY29uc3QgaWRlbnRpdHlQb29sT3V0cHV0cyA9IGF3YWl0IHRoaXMuZ2V0SWRlbnRpdHlQb29sT3V0cHV0cyhpZGVudGl0eVBvb2wpO1xuICAgIGNvbnN0IHVzZXJQb29sQ2xpZW50T3V0cHV0cyA9XG4gICAgICBhd2FpdCB0aGlzLmdldFVzZXJQb29sQ2xpZW50T3V0cHV0cyh1c2VyUG9vbENsaWVudCk7XG4gICAgY29uc3QgZGF0YTogT21pdDxBdXRoT3V0cHV0WydwYXlsb2FkJ10sICdhdXRoUmVnaW9uJz4gPSB7XG4gICAgICB1c2VyUG9vbElkOiBwcm9wcy51c2VyUG9vbElkLFxuICAgICAgd2ViQ2xpZW50SWQ6IHByb3BzLnVzZXJQb29sQ2xpZW50SWQsXG4gICAgICBpZGVudGl0eVBvb2xJZDogcHJvcHMuaWRlbnRpdHlQb29sSWQsXG4gICAgICAuLi51c2VyUG9vbE91dHB1dHMsXG4gICAgICAuLi5pZGVudGl0eVBvb2xPdXRwdXRzLFxuICAgICAgLi4udXNlclBvb2xDbGllbnRPdXRwdXRzLFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIFJlcXVlc3RJZDogZXZlbnQuUmVxdWVzdElkLFxuICAgICAgTG9naWNhbFJlc291cmNlSWQ6IGV2ZW50LkxvZ2ljYWxSZXNvdXJjZUlkLFxuICAgICAgUGh5c2ljYWxSZXNvdXJjZUlkOiBwaHlzaWNhbElkLFxuICAgICAgU3RhY2tJZDogZXZlbnQuU3RhY2tJZCxcbiAgICAgIE5vRWNobzogdHJ1ZSxcbiAgICAgIERhdGE6IGRhdGEsXG4gICAgICBTdGF0dXM6ICdTVUNDRVNTJyxcbiAgICB9IGFzIENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VTdWNjZXNzUmVzcG9uc2U7XG4gIH07XG5cbiAgcHJpdmF0ZSBnZXRVc2VyUG9vbCA9IGFzeW5jICh1c2VyUG9vbElkOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCB1c2VyUG9vbENvbW1hbmQgPSBuZXcgRGVzY3JpYmVVc2VyUG9vbENvbW1hbmQoe1xuICAgICAgVXNlclBvb2xJZDogdXNlclBvb2xJZCxcbiAgICB9KTtcbiAgICBjb25zdCB1c2VyUG9vbFJlc3BvbnNlID1cbiAgICAgIGF3YWl0IHRoaXMuY29nbml0b0lkZW50aXR5UHJvdmlkZXJDbGllbnQuc2VuZCh1c2VyUG9vbENvbW1hbmQpO1xuICAgIGlmICghdXNlclBvb2xSZXNwb25zZS5Vc2VyUG9vbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmV0cmlldmUgdGhlIHNwZWNpZmllZCBVc2VyUG9vbC4nKTtcbiAgICB9XG4gICAgY29uc3QgdXNlclBvb2wgPSB1c2VyUG9vbFJlc3BvbnNlLlVzZXJQb29sO1xuICAgIGNvbnN0IHBvbGljeSA9IHVzZXJQb29sLlBvbGljaWVzPy5QYXNzd29yZFBvbGljeTtcbiAgICBpZiAoIXBvbGljeSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmV0cmlldmUgcGFzc3dvcmQgcG9saWN5LicpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdXNlclBvb2w6IHVzZXJQb29sUmVzcG9uc2UuVXNlclBvb2wsXG4gICAgICB1c2VyUG9vbFBhc3N3b3JkUG9saWN5OiBwb2xpY3ksXG4gICAgfTtcbiAgfTtcblxuICBwcml2YXRlIGdldFVzZXJQb29sTUZBU2V0dGluZ3MgPSBhc3luYyAodXNlclBvb2xJZDogc3RyaW5nKSA9PiB7XG4gICAgLy8gbWZhIHR5cGVzXG4gICAgY29uc3QgbWZhQ29tbWFuZCA9IG5ldyBHZXRVc2VyUG9vbE1mYUNvbmZpZ0NvbW1hbmQoe1xuICAgICAgVXNlclBvb2xJZDogdXNlclBvb2xJZCxcbiAgICB9KTtcbiAgICBjb25zdCBtZmFSZXNwb25zZSA9XG4gICAgICBhd2FpdCB0aGlzLmNvZ25pdG9JZGVudGl0eVByb3ZpZGVyQ2xpZW50LnNlbmQobWZhQ29tbWFuZCk7XG4gICAgcmV0dXJuIG1mYVJlc3BvbnNlO1xuICB9O1xuXG4gIHByaXZhdGUgZ2V0VXNlclBvb2xHcm91cHMgPSBhc3luYyAodXNlclBvb2xJZDogc3RyaW5nKSA9PiB7XG4gICAgbGV0IG5leHRUb2tlbjogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGNvbnN0IGdyb3VwczogR3JvdXBUeXBlW10gPSBbXTtcbiAgICBkbyB7XG4gICAgICBjb25zdCBsaXN0R3JvdXBzUmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNvZ25pdG9JZGVudGl0eVByb3ZpZGVyQ2xpZW50LnNlbmQoXG4gICAgICAgIG5ldyBMaXN0R3JvdXBzQ29tbWFuZCh7XG4gICAgICAgICAgVXNlclBvb2xJZDogdXNlclBvb2xJZCxcbiAgICAgICAgICBOZXh0VG9rZW46IG5leHRUb2tlbixcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgICAgaWYgKCFsaXN0R3JvdXBzUmVzcG9uc2UuR3JvdXBzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcmV0cmlldmluZyB0aGUgZ3JvdXBzIGZvciB0aGUgdXNlciBwb29sLicsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBncm91cHMucHVzaCguLi5saXN0R3JvdXBzUmVzcG9uc2UuR3JvdXBzKTtcbiAgICAgIG5leHRUb2tlbiA9IGxpc3RHcm91cHNSZXNwb25zZS5OZXh0VG9rZW47XG4gICAgfSB3aGlsZSAobmV4dFRva2VuKTtcbiAgICByZXR1cm4gZ3JvdXBzO1xuICB9O1xuXG4gIHByaXZhdGUgZ2V0VXNlclBvb2xQcm92aWRlcnMgPSBhc3luYyAodXNlclBvb2xJZDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgcHJvdmlkZXJzOiBQcm92aWRlckRlc2NyaXB0aW9uW10gPSBbXTtcbiAgICBsZXQgbmV4dFRva2VuOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgZG8ge1xuICAgICAgY29uc3QgcHJvdmlkZXJzUmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNvZ25pdG9JZGVudGl0eVByb3ZpZGVyQ2xpZW50LnNlbmQoXG4gICAgICAgIG5ldyBMaXN0SWRlbnRpdHlQcm92aWRlcnNDb21tYW5kKHtcbiAgICAgICAgICBVc2VyUG9vbElkOiB1c2VyUG9vbElkLFxuICAgICAgICAgIE5leHRUb2tlbjogbmV4dFRva2VuLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgICBpZiAocHJvdmlkZXJzUmVzcG9uc2UuUHJvdmlkZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSByZXRyaWV2aW5nIGlkZW50aXR5IHByb3ZpZGVycyBmb3IgdGhlIHVzZXIgcG9vbC4nLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvdmlkZXJzLnB1c2goLi4ucHJvdmlkZXJzUmVzcG9uc2UuUHJvdmlkZXJzKTtcbiAgICAgIG5leHRUb2tlbiA9IHByb3ZpZGVyc1Jlc3BvbnNlLk5leHRUb2tlbjtcbiAgICB9IHdoaWxlIChuZXh0VG9rZW4pO1xuICAgIHJldHVybiBwcm92aWRlcnM7XG4gIH07XG5cbiAgcHJpdmF0ZSBnZXRJZGVudGl0eVBvb2wgPSBhc3luYyAoaWRlbnRpdHlQb29sSWQ6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGlkcFJlc3BvbnNlID0gYXdhaXQgdGhpcy5jb2duaXRvSWRlbnRpdHlDbGllbnQuc2VuZChcbiAgICAgIG5ldyBEZXNjcmliZUlkZW50aXR5UG9vbENvbW1hbmQoe1xuICAgICAgICBJZGVudGl0eVBvb2xJZDogaWRlbnRpdHlQb29sSWQsXG4gICAgICB9KSxcbiAgICApO1xuICAgIGlmICghaWRwUmVzcG9uc2UuSWRlbnRpdHlQb29sSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIHJldHJpZXZpbmcgdGhlIGlkZW50aXR5IHBvb2wgZGV0YWlscy4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGlkcFJlc3BvbnNlO1xuICB9O1xuXG4gIHByaXZhdGUgZ2V0SWRlbnRpdHlQb29sUm9sZXMgPSBhc3luYyAoaWRlbnRpdHlQb29sSWQ6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHJvbGVzQ29tbWFuZCA9IG5ldyBHZXRJZGVudGl0eVBvb2xSb2xlc0NvbW1hbmQoe1xuICAgICAgSWRlbnRpdHlQb29sSWQ6IGlkZW50aXR5UG9vbElkLFxuICAgIH0pO1xuICAgIGNvbnN0IHJvbGVzUmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNvZ25pdG9JZGVudGl0eUNsaWVudC5zZW5kKHJvbGVzQ29tbWFuZCk7XG4gICAgaWYgKCFyb2xlc1Jlc3BvbnNlLlJvbGVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSByZXRyaWV2aW5nIHRoZSByb2xlcyBmb3IgdGhlIGlkZW50aXR5IHBvb2wuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiByb2xlc1Jlc3BvbnNlLlJvbGVzO1xuICB9O1xuXG4gIHByaXZhdGUgZ2V0VXNlclBvb2xDbGllbnQgPSBhc3luYyAoXG4gICAgdXNlclBvb2xJZDogc3RyaW5nLFxuICAgIHVzZXJQb29sQ2xpZW50SWQ6IHN0cmluZyxcbiAgKSA9PiB7XG4gICAgY29uc3QgdXNlclBvb2xDbGllbnRDb21tYW5kID0gbmV3IERlc2NyaWJlVXNlclBvb2xDbGllbnRDb21tYW5kKHtcbiAgICAgIFVzZXJQb29sSWQ6IHVzZXJQb29sSWQsXG4gICAgICBDbGllbnRJZDogdXNlclBvb2xDbGllbnRJZCxcbiAgICB9KTtcbiAgICBjb25zdCB1c2VyUG9vbENsaWVudFJlc3BvbnNlID1cbiAgICAgIGF3YWl0IHRoaXMuY29nbml0b0lkZW50aXR5UHJvdmlkZXJDbGllbnQuc2VuZCh1c2VyUG9vbENsaWVudENvbW1hbmQpO1xuICAgIGlmICghdXNlclBvb2xDbGllbnRSZXNwb25zZS5Vc2VyUG9vbENsaWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcmV0cmlldmluZyB0aGUgdXNlciBwb29sIGNsaWVudCBkZXRhaWxzLicsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdXNlclBvb2xDbGllbnRSZXNwb25zZS5Vc2VyUG9vbENsaWVudDtcbiAgfTtcblxuICAvKipcbiAgICogUmV0cmlldmVzIGFsbCBvZiB0aGUgcmVzb3VyY2UgZGF0YSB0aGF0IGlzIG5lY2Vzc2FyeSBmb3IgdmFsaWRhdGlvbiBhbmQgb3V0cHV0IGdlbmVyYXRpb24uXG4gICAqIEBwYXJhbSB1c2VyUG9vbElkIHVzZXJQb29sSWRcbiAgICogQHBhcmFtIGlkZW50aXR5UG9vbElkIGlkZW50aXR5UG9vbElkXG4gICAqIEBwYXJhbSB1c2VyUG9vbENsaWVudElkIHVzZXJQb29sQ2xpZW50SWRcbiAgICogQHJldHVybnMgYWxsIG5lY2Vzc2FyeSByZXNvdXJjZSBkYXRhXG4gICAqL1xuICBwcml2YXRlIGdldFJlc291cmNlRGV0YWlscyA9IGFzeW5jIChcbiAgICB1c2VyUG9vbElkOiBzdHJpbmcsXG4gICAgaWRlbnRpdHlQb29sSWQ6IHN0cmluZyxcbiAgICB1c2VyUG9vbENsaWVudElkOiBzdHJpbmcsXG4gICkgPT4ge1xuICAgIGNvbnN0IHsgdXNlclBvb2wsIHVzZXJQb29sUGFzc3dvcmRQb2xpY3kgfSA9XG4gICAgICBhd2FpdCB0aGlzLmdldFVzZXJQb29sKHVzZXJQb29sSWQpO1xuICAgIGNvbnN0IHVzZXJQb29sTUZBID0gYXdhaXQgdGhpcy5nZXRVc2VyUG9vbE1GQVNldHRpbmdzKHVzZXJQb29sSWQpO1xuICAgIGNvbnN0IHVzZXJQb29sUHJvdmlkZXJzID0gYXdhaXQgdGhpcy5nZXRVc2VyUG9vbFByb3ZpZGVycyh1c2VyUG9vbElkKTtcbiAgICBjb25zdCB1c2VyUG9vbEdyb3VwcyA9IGF3YWl0IHRoaXMuZ2V0VXNlclBvb2xHcm91cHModXNlclBvb2xJZCk7XG4gICAgY29uc3QgdXNlclBvb2xDbGllbnQgPSBhd2FpdCB0aGlzLmdldFVzZXJQb29sQ2xpZW50KFxuICAgICAgdXNlclBvb2xJZCxcbiAgICAgIHVzZXJQb29sQ2xpZW50SWQsXG4gICAgKTtcbiAgICBjb25zdCBpZGVudGl0eVBvb2wgPSBhd2FpdCB0aGlzLmdldElkZW50aXR5UG9vbChpZGVudGl0eVBvb2xJZCk7XG4gICAgY29uc3Qgcm9sZXMgPSBhd2FpdCB0aGlzLmdldElkZW50aXR5UG9vbFJvbGVzKGlkZW50aXR5UG9vbElkKTtcbiAgICByZXR1cm4ge1xuICAgICAgdXNlclBvb2wsXG4gICAgICB1c2VyUG9vbFBhc3N3b3JkUG9saWN5LFxuICAgICAgdXNlclBvb2xNRkEsXG4gICAgICB1c2VyUG9vbFByb3ZpZGVycyxcbiAgICAgIHVzZXJQb29sR3JvdXBzLFxuICAgICAgdXNlclBvb2xDbGllbnQsXG4gICAgICBpZGVudGl0eVBvb2wsXG4gICAgICByb2xlcyxcbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSB0aGUgcmVzb3VyY2UgYXNzb2NpYXRpb25zLlxuICAgKiAxLiBtYWtlIHN1cmUgdGhlIHVzZXIgcG9vbCAmIHVzZXIgcG9vbCBjbGllbnQgcGFpciBhcmUgYSBjb2duaXRvIHByb3ZpZGVyIGZvciB0aGUgaWRlbnRpdHkgcG9vbFxuICAgKiAyLiBtYWtlIHN1cmUgdGhlIHByb3ZpZGVkIGF1dGgvdW5hdXRoIHJvbGUgQVJOcyBtYXRjaCB0aGUgcm9sZXMgZm9yIHRoZSBpZGVudGl0eSBwb29sXG4gICAqIDMuIG1ha2Ugc3VyZSB0aGUgdXNlciBwb29sIGNsaWVudCBpcyBhIHdlYiBjbGllbnRcbiAgICogQHBhcmFtIHVzZXJQb29sIHVzZXJQb29sXG4gICAqIEBwYXJhbSB1c2VyUG9vbFByb3ZpZGVycyB0aGUgdXNlciBwb29sIHByb3ZpZGVyc1xuICAgKiBAcGFyYW0gdXNlclBvb2xHcm91cHMgdGhlIGV4aXN0aW5nIGdyb3VwcyBmb3IgdGhlIHVzZXJQb29sXG4gICAqIEBwYXJhbSB1c2VyUG9vbENsaWVudCB1c2VyUG9vbENsaWVudFxuICAgKiBAcGFyYW0gaWRlbnRpdHlQb29sIGlkZW50aXR5UG9vbFxuICAgKiBAcGFyYW0gaWRlbnRpdHlQb29sUm9sZXMgaWRlbnRpdHlQb29sIHJvbGVzXG4gICAqIEBwYXJhbSBwcm9wcyBwcm9wcyB0aGF0IGluY2x1ZGUgdGhlIHJvbGVzIHdoaWNoIHdlIGNvbXBhcmUgd2l0aCB0aGUgYWN0dWFsIHJvbGVzIGZvciB0aGUgaWRlbnRpdHkgcG9vbFxuICAgKi9cbiAgcHJpdmF0ZSB2YWxpZGF0ZVJlc291cmNlcyA9IChcbiAgICB1c2VyUG9vbDogVXNlclBvb2xUeXBlLFxuICAgIHVzZXJQb29sUHJvdmlkZXJzOiBQcm92aWRlckRlc2NyaXB0aW9uW10sXG4gICAgdXNlclBvb2xHcm91cHM6IEdyb3VwVHlwZVtdLFxuICAgIHVzZXJQb29sQ2xpZW50OiBVc2VyUG9vbENsaWVudFR5cGUsXG4gICAgaWRlbnRpdHlQb29sOiBEZXNjcmliZUlkZW50aXR5UG9vbENvbW1hbmRPdXRwdXQsXG4gICAgaWRlbnRpdHlQb29sUm9sZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXG4gICAgcHJvcHM6IFJlZmVyZW5jZUF1dGhJbml0aWFsaXplclByb3BzLFxuICApID0+IHtcbiAgICAvLyB2ZXJpZnkgdGhlIHVzZXIgcG9vbCBpcyBhIGNvZ25pdG8gcHJvdmlkZXIgZm9yIHRoaXMgaWRlbnRpdHkgcG9vbFxuICAgIGlmIChcbiAgICAgICFpZGVudGl0eVBvb2wuQ29nbml0b0lkZW50aXR5UHJvdmlkZXJzIHx8XG4gICAgICBpZGVudGl0eVBvb2wuQ29nbml0b0lkZW50aXR5UHJvdmlkZXJzLmxlbmd0aCA9PT0gMFxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHNwZWNpZmllZCBpZGVudGl0eSBwb29sIGRvZXMgbm90IGhhdmUgYW55IGNvZ25pdG8gaWRlbnRpdHkgcHJvdmlkZXJzLicsXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBjaGVjayBmb3IgYWxpYXMgYXR0cmlidXRlcywgc2luY2Ugd2UgZG9uJ3Qgc3VwcG9ydCB0aGlzIHlldFxuICAgIGlmICh1c2VyUG9vbC5BbGlhc0F0dHJpYnV0ZXMgJiYgdXNlclBvb2wuQWxpYXNBdHRyaWJ1dGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSBzcGVjaWZpZWQgdXNlciBwb29sIGlzIGNvbmZpZ3VyZWQgd2l0aCBhbGlhcyBhdHRyaWJ1dGVzIHdoaWNoIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZC4nLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBPQXV0aCBzZXR0aW5nc1xuICAgIGlmICh1c2VyUG9vbFByb3ZpZGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyB2YWxpZGF0ZSB1c2VyIHBvb2xcbiAgICAgIGNvbnN0IGRvbWFpblNwZWNpZmllZCA9IHVzZXJQb29sLkRvbWFpbiB8fCB1c2VyUG9vbC5DdXN0b21Eb21haW47XG4gICAgICBpZiAoIWRvbWFpblNwZWNpZmllZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1lvdSBtdXN0IGNvbmZpZ3VyZSBhIGRvbWFpbiBmb3IgeW91ciBVc2VyUG9vbCBpZiBleHRlcm5hbCBsb2dpbiBwcm92aWRlcnMgYXJlIGVuYWJsZWQuJyxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWRhdGUgdXNlciBwb29sIGNsaWVudFxuICAgICAgY29uc3QgaGFzTG9nb3V0VXJscyA9XG4gICAgICAgIHVzZXJQb29sQ2xpZW50LkxvZ291dFVSTHMgJiYgdXNlclBvb2xDbGllbnQuTG9nb3V0VVJMcy5sZW5ndGggPiAwO1xuICAgICAgY29uc3QgaGFzQ2FsbGJhY2tVcmxzID1cbiAgICAgICAgdXNlclBvb2xDbGllbnQuQ2FsbGJhY2tVUkxzICYmIHVzZXJQb29sQ2xpZW50LkNhbGxiYWNrVVJMcy5sZW5ndGggPiAwO1xuICAgICAgaWYgKCFoYXNMb2dvdXRVcmxzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnWW91ciBVc2VyUG9vbCBjbGllbnQgbXVzdCBoYXZlIFwiQWxsb3dlZCBzaWduLW91dCBVUkxzXCIgY29uZmlndXJlZCBpZiBleHRlcm5hbCBsb2dpbiBwcm92aWRlcnMgYXJlIGVuYWJsZWQuJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICghaGFzQ2FsbGJhY2tVcmxzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnWW91ciBVc2VyUG9vbCBjbGllbnQgbXVzdCBoYXZlIFwiQWxsb3dlZCBjYWxsYmFjayBVUkxzXCIgY29uZmlndXJlZCBpZiBleHRlcm5hbCBsb2dpbiBwcm92aWRlcnMgYXJlIGVuYWJsZWQuJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBtYWtlIHN1cmUgcHJvcHMgZ3JvdXBzIFJvbGVzIGFjdHVhbGx5IGV4aXN0IGZvciB0aGUgdXNlciBwb29sXG4gICAgY29uc3QgZ3JvdXBFbnRyaWVzID0gT2JqZWN0LmVudHJpZXMocHJvcHMuZ3JvdXBzKTtcbiAgICBmb3IgKGNvbnN0IFtncm91cE5hbWUsIGdyb3VwUm9sZUFSTl0gb2YgZ3JvdXBFbnRyaWVzKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IHVzZXJQb29sR3JvdXBzLmZpbmQoKGcpID0+IGcuUm9sZUFybiA9PT0gZ3JvdXBSb2xlQVJOKTtcbiAgICAgIGlmIChtYXRjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgVGhlIGdyb3VwICcke2dyb3VwTmFtZX0nIHdpdGggcm9sZSAnJHtncm91cFJvbGVBUk59JyBkb2VzIG5vdCBtYXRjaCBhbnkgZ3JvdXAgZm9yIHRoZSBzcGVjaWZpZWQgdXNlciBwb29sLmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHZlcmlmeSB0aGF0IHRoZSB1c2VyIHBvb2wgKyB1c2VyIHBvb2wgY2xpZW50IHBhaXIgYXJlIGNvbmZpZ3VyZWQgd2l0aCB0aGUgaWRlbnRpdHkgcG9vbFxuICAgIGNvbnN0IG1hdGNoaW5nUHJvdmlkZXIgPSBpZGVudGl0eVBvb2wuQ29nbml0b0lkZW50aXR5UHJvdmlkZXJzLmZpbmQoKHApID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoaW5nVXNlclBvb2w6IGJvb2xlYW4gPVxuICAgICAgICBwLlByb3ZpZGVyTmFtZSA9PT1cbiAgICAgICAgYGNvZ25pdG8taWRwLiR7cHJvcHMucmVnaW9ufS5hbWF6b25hd3MuY29tLyR7dXNlclBvb2wuSWR9YDtcbiAgICAgIGNvbnN0IG1hdGNoaW5nVXNlclBvb2xDbGllbnQ6IGJvb2xlYW4gPVxuICAgICAgICBwLkNsaWVudElkID09PSB1c2VyUG9vbENsaWVudC5DbGllbnRJZDtcbiAgICAgIHJldHVybiBtYXRjaGluZ1VzZXJQb29sICYmIG1hdGNoaW5nVXNlclBvb2xDbGllbnQ7XG4gICAgfSk7XG4gICAgaWYgKCFtYXRjaGluZ1Byb3ZpZGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgdXNlciBwb29sIGFuZCB1c2VyIHBvb2wgY2xpZW50IHBhaXIgZG8gbm90IG1hdGNoIGFueSBjb2duaXRvIGlkZW50aXR5IHByb3ZpZGVycyBmb3IgdGhlIHNwZWNpZmllZCBpZGVudGl0eSBwb29sLicsXG4gICAgICApO1xuICAgIH1cbiAgICAvLyB2ZXJpZnkgdGhlIGF1dGggLyB1bmF1dGggcm9sZXMgZnJvbSB0aGUgcHJvcHMgbWF0Y2ggdGhlIGlkZW50aXR5IHBvb2wgcm9sZXMgdGhhdCB3ZSByZXRyaWV2ZWRcbiAgICBjb25zdCBhdXRoUm9sZUFybiA9IGlkZW50aXR5UG9vbFJvbGVzWydhdXRoZW50aWNhdGVkJ107XG4gICAgY29uc3QgdW5hdXRoUm9sZUFybiA9IGlkZW50aXR5UG9vbFJvbGVzWyd1bmF1dGhlbnRpY2F0ZWQnXTtcbiAgICBpZiAoYXV0aFJvbGVBcm4gIT09IHByb3BzLmF1dGhSb2xlQXJuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgcHJvdmlkZWQgYXV0aFJvbGVBcm4gZG9lcyBub3QgbWF0Y2ggdGhlIGF1dGhlbnRpY2F0ZWQgcm9sZSBmb3IgdGhlIHNwZWNpZmllZCBpZGVudGl0eSBwb29sLicsXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAodW5hdXRoUm9sZUFybiAhPT0gcHJvcHMudW5hdXRoUm9sZUFybikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHByb3ZpZGVkIHVuYXV0aFJvbGVBcm4gZG9lcyBub3QgbWF0Y2ggdGhlIHVuYXV0aGVudGljYXRlZCByb2xlIGZvciB0aGUgc3BlY2lmaWVkIGlkZW50aXR5IHBvb2wuJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBzdXJlIHRoZSBjbGllbnQgaXMgYSB3ZWIgY2xpZW50IGhlcmUgKHdlYiBjbGllbnRzIHNob3VsZG4ndCBoYXZlIGNsaWVudCBzZWNyZXRzKVxuICAgIGlmICh1c2VyUG9vbENsaWVudD8uQ2xpZW50U2VjcmV0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgc3BlY2lmaWVkIHVzZXIgcG9vbCBjbGllbnQgaXMgbm90IGNvbmZpZ3VyZWQgYXMgYSB3ZWIgY2xpZW50LicsXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogVHJhbnNmb3JtIHRoZSB1c2VyUG9vbCBkYXRhIGludG8gb3V0cHV0cy5cbiAgICogQHBhcmFtIHVzZXJQb29sIHVzZXIgcG9vbFxuICAgKiBAcGFyYW0gdXNlclBvb2xQYXNzd29yZFBvbGljeSB1c2VyIHBvb2wgcGFzc3dvcmQgcG9saWN5XG4gICAqIEBwYXJhbSB1c2VyUG9vbFByb3ZpZGVycyB1c2VyIHBvb2wgcHJvdmlkZXJzXG4gICAqIEBwYXJhbSB1c2VyUG9vbE1GQSB1c2VyIHBvb2wgTUZBIHNldHRpbmdzXG4gICAqIEByZXR1cm5zIGZvcm1hdHRlZCBvdXRwdXRzXG4gICAqL1xuICBwcml2YXRlIGdldFVzZXJQb29sT3V0cHV0cyA9IChcbiAgICB1c2VyUG9vbDogVXNlclBvb2xUeXBlLFxuICAgIHVzZXJQb29sUGFzc3dvcmRQb2xpY3k6IFBhc3N3b3JkUG9saWN5VHlwZSxcbiAgICB1c2VyUG9vbFByb3ZpZGVyczogUHJvdmlkZXJEZXNjcmlwdGlvbltdLFxuICAgIHVzZXJQb29sTUZBOiBHZXRVc2VyUG9vbE1mYUNvbmZpZ0NvbW1hbmRPdXRwdXQsXG4gICAgcmVnaW9uOiBzdHJpbmcsXG4gICkgPT4ge1xuICAgIC8vIHBhc3N3b3JkIHBvbGljeSByZXF1aXJlbWVudHNcbiAgICBjb25zdCByZXF1aXJlbWVudHM6IHN0cmluZ1tdID0gW107XG4gICAgdXNlclBvb2xQYXNzd29yZFBvbGljeS5SZXF1aXJlTnVtYmVycyAmJlxuICAgICAgcmVxdWlyZW1lbnRzLnB1c2goJ1JFUVVJUkVTX05VTUJFUlMnKTtcbiAgICB1c2VyUG9vbFBhc3N3b3JkUG9saWN5LlJlcXVpcmVMb3dlcmNhc2UgJiZcbiAgICAgIHJlcXVpcmVtZW50cy5wdXNoKCdSRVFVSVJFU19MT1dFUkNBU0UnKTtcbiAgICB1c2VyUG9vbFBhc3N3b3JkUG9saWN5LlJlcXVpcmVVcHBlcmNhc2UgJiZcbiAgICAgIHJlcXVpcmVtZW50cy5wdXNoKCdSRVFVSVJFU19VUFBFUkNBU0UnKTtcbiAgICB1c2VyUG9vbFBhc3N3b3JkUG9saWN5LlJlcXVpcmVTeW1ib2xzICYmXG4gICAgICByZXF1aXJlbWVudHMucHVzaCgnUkVRVUlSRVNfU1lNQk9MUycpO1xuICAgIC8vIG1mYSB0eXBlc1xuICAgIGNvbnN0IG1mYVR5cGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGlmIChcbiAgICAgIHVzZXJQb29sTUZBLlNtc01mYUNvbmZpZ3VyYXRpb24gJiZcbiAgICAgIHVzZXJQb29sTUZBLlNtc01mYUNvbmZpZ3VyYXRpb24uU21zQ29uZmlndXJhdGlvblxuICAgICkge1xuICAgICAgbWZhVHlwZXMucHVzaCgnU01TX01GQScpO1xuICAgIH1cbiAgICBpZiAodXNlclBvb2xNRkEuU29mdHdhcmVUb2tlbk1mYUNvbmZpZ3VyYXRpb24/LkVuYWJsZWQpIHtcbiAgICAgIG1mYVR5cGVzLnB1c2goJ1RPVFAnKTtcbiAgICB9XG4gICAgLy8gc29jaWFsIHByb3ZpZGVyc1xuICAgIGNvbnN0IHNvY2lhbFByb3ZpZGVyczogc3RyaW5nW10gPSBbXTtcbiAgICBpZiAodXNlclBvb2xQcm92aWRlcnMpIHtcbiAgICAgIGZvciAoY29uc3QgcHJvdmlkZXIgb2YgdXNlclBvb2xQcm92aWRlcnMpIHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXJUeXBlID0gcHJvdmlkZXIuUHJvdmlkZXJUeXBlO1xuICAgICAgICBjb25zdCBwcm92aWRlck5hbWUgPSBwcm92aWRlci5Qcm92aWRlck5hbWU7XG4gICAgICAgIGlmIChwcm92aWRlclR5cGUgPT09ICdHb29nbGUnKSB7XG4gICAgICAgICAgc29jaWFsUHJvdmlkZXJzLnB1c2goJ0dPT0dMRScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm92aWRlclR5cGUgPT09ICdGYWNlYm9vaycpIHtcbiAgICAgICAgICBzb2NpYWxQcm92aWRlcnMucHVzaCgnRkFDRUJPT0snKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvdmlkZXJUeXBlID09PSAnU2lnbkluV2l0aEFwcGxlJykge1xuICAgICAgICAgIHNvY2lhbFByb3ZpZGVycy5wdXNoKCdTSUdOX0lOX1dJVEhfQVBQTEUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvdmlkZXJUeXBlID09PSAnTG9naW5XaXRoQW1hem9uJykge1xuICAgICAgICAgIHNvY2lhbFByb3ZpZGVycy5wdXNoKCdMT0dJTl9XSVRIX0FNQVpPTicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm92aWRlclR5cGUgPT09ICdPSURDJyAmJiBwcm92aWRlck5hbWUpIHtcbiAgICAgICAgICBzb2NpYWxQcm92aWRlcnMucHVzaChwcm92aWRlck5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm92aWRlclR5cGUgPT09ICdTQU1MJyAmJiBwcm92aWRlck5hbWUpIHtcbiAgICAgICAgICBzb2NpYWxQcm92aWRlcnMucHVzaChwcm92aWRlck5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZG9tYWluXG4gICAgY29uc3Qgb2F1dGhEb21haW4gPSB1c2VyUG9vbC5DdXN0b21Eb21haW4gPz8gdXNlclBvb2wuRG9tYWluID8/ICcnO1xuICAgIGNvbnN0IGZ1bGxEb21haW5QYXRoID0gdXNlclBvb2wuQ3VzdG9tRG9tYWluXG4gICAgICA/IHVzZXJQb29sLkN1c3RvbURvbWFpblxuICAgICAgOiBgJHtvYXV0aERvbWFpbn0uYXV0aC4ke3JlZ2lvbn0uYW1hem9uY29nbml0by5jb21gO1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBzaWdudXBBdHRyaWJ1dGVzOiBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgdXNlclBvb2wuU2NoZW1hQXR0cmlidXRlcz8uZmlsdGVyKFxuICAgICAgICAgIChhdHRyaWJ1dGUpID0+IGF0dHJpYnV0ZS5SZXF1aXJlZCAmJiBhdHRyaWJ1dGUuTmFtZSxcbiAgICAgICAgKS5tYXAoKGF0dHJpYnV0ZSkgPT4gYXR0cmlidXRlLk5hbWU/LnRvTG93ZXJDYXNlKCkpIHx8IFtdLFxuICAgICAgKSxcbiAgICAgIHVzZXJuYW1lQXR0cmlidXRlczogSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgIHVzZXJQb29sLlVzZXJuYW1lQXR0cmlidXRlcz8ubWFwKChhdHRyaWJ1dGUpID0+XG4gICAgICAgICAgYXR0cmlidXRlLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICkgfHwgW10sXG4gICAgICApLFxuICAgICAgdmVyaWZpY2F0aW9uTWVjaGFuaXNtczogSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgIHVzZXJQb29sLkF1dG9WZXJpZmllZEF0dHJpYnV0ZXMgPz8gW10sXG4gICAgICApLFxuICAgICAgcGFzc3dvcmRQb2xpY3lNaW5MZW5ndGg6XG4gICAgICAgIHVzZXJQb29sUGFzc3dvcmRQb2xpY3kuTWluaW11bUxlbmd0aCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAnJ1xuICAgICAgICAgIDogdXNlclBvb2xQYXNzd29yZFBvbGljeS5NaW5pbXVtTGVuZ3RoLnRvU3RyaW5nKCksXG4gICAgICBwYXNzd29yZFBvbGljeVJlcXVpcmVtZW50czogSlNPTi5zdHJpbmdpZnkocmVxdWlyZW1lbnRzKSxcbiAgICAgIG1mYUNvbmZpZ3VyYXRpb246IHVzZXJQb29sLk1mYUNvbmZpZ3VyYXRpb24gPz8gJ09GRicsXG4gICAgICBtZmFUeXBlczogSlNPTi5zdHJpbmdpZnkobWZhVHlwZXMpLFxuICAgICAgc29jaWFsUHJvdmlkZXJzOiBKU09OLnN0cmluZ2lmeShzb2NpYWxQcm92aWRlcnMpLFxuICAgICAgb2F1dGhDb2duaXRvRG9tYWluOiBmdWxsRG9tYWluUGF0aCxcbiAgICB9O1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIGlkZW50aXR5UG9vbCBpbmZvIGludG8gb3V0cHV0cy5cbiAgICogQHBhcmFtIGlkZW50aXR5UG9vbCBpZGVudGl0eSBwb29sIGRhdGFcbiAgICogQHJldHVybnMgZm9ybWF0dGVkIG91dHB1dHNcbiAgICovXG4gIHByaXZhdGUgZ2V0SWRlbnRpdHlQb29sT3V0cHV0cyA9IChcbiAgICBpZGVudGl0eVBvb2w6IERlc2NyaWJlSWRlbnRpdHlQb29sQ29tbWFuZE91dHB1dCxcbiAgKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGFsbG93VW5hdXRoZW50aWNhdGVkSWRlbnRpdGllczpcbiAgICAgICAgaWRlbnRpdHlQb29sLkFsbG93VW5hdXRoZW50aWNhdGVkSWRlbnRpdGllcyA9PT0gdHJ1ZSA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgfTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICAvKipcbiAgICogVHJhbnNmb3JtcyB1c2VyUG9vbENsaWVudCBpbmZvIGludG8gb3V0cHV0cy5cbiAgICogQHBhcmFtIHVzZXJQb29sQ2xpZW50IHVzZXJQb29sQ2xpZW50IGRhdGFcbiAgICogQHJldHVybnMgZm9ybWF0dGVkIG91dHB1dHNcbiAgICovXG4gIHByaXZhdGUgZ2V0VXNlclBvb2xDbGllbnRPdXRwdXRzID0gKHVzZXJQb29sQ2xpZW50OiBVc2VyUG9vbENsaWVudFR5cGUpID0+IHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgb2F1dGhTY29wZTogSlNPTi5zdHJpbmdpZnkodXNlclBvb2xDbGllbnQuQWxsb3dlZE9BdXRoU2NvcGVzID8/IFtdKSxcbiAgICAgIG9hdXRoUmVkaXJlY3RTaWduSW46IHVzZXJQb29sQ2xpZW50LkNhbGxiYWNrVVJMc1xuICAgICAgICA/IHVzZXJQb29sQ2xpZW50LkNhbGxiYWNrVVJMcy5qb2luKCcsJylcbiAgICAgICAgOiAnJyxcbiAgICAgIG9hdXRoUmVkaXJlY3RTaWduT3V0OiB1c2VyUG9vbENsaWVudC5Mb2dvdXRVUkxzXG4gICAgICAgID8gdXNlclBvb2xDbGllbnQuTG9nb3V0VVJMcy5qb2luKCcsJylcbiAgICAgICAgOiAnJyxcbiAgICAgIG9hdXRoUmVzcG9uc2VUeXBlOiB1c2VyUG9vbENsaWVudC5BbGxvd2VkT0F1dGhGbG93c1xuICAgICAgICA/IHVzZXJQb29sQ2xpZW50LkFsbG93ZWRPQXV0aEZsb3dzLmpvaW4oJywnKVxuICAgICAgICA6ICcnLFxuICAgICAgb2F1dGhDbGllbnRJZDogdXNlclBvb2xDbGllbnQuQ2xpZW50SWQsXG4gICAgfTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcbn1cblxuLyoqXG4gKiBFbnRyeSBwb2ludCBmb3IgdGhlIGxhbWJkYS1iYWNrZW5kIGN1c3RvbSByZXNvdXJjZSB0byByZXRyaWV2ZSBhdXRoIG91dHB1dHMuXG4gKi9cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKFxuICBldmVudDogQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50LFxuKTogUHJvbWlzZTxDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlUmVzcG9uc2U+ID0+IHtcbiAgY29uc3QgaW5pdGlhbGl6ZXIgPSBuZXcgUmVmZXJlbmNlQXV0aEluaXRpYWxpemVyKFxuICAgIG5ldyBDb2duaXRvSWRlbnRpdHlDbGllbnQoKSxcbiAgICBuZXcgQ29nbml0b0lkZW50aXR5UHJvdmlkZXJDbGllbnQoKSxcbiAgICByYW5kb21VVUlELFxuICApO1xuICByZXR1cm4gaW5pdGlhbGl6ZXIuaGFuZGxlRXZlbnQoZXZlbnQpO1xufTtcbiJdfQ==