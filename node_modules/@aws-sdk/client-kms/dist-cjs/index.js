'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "kms",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class KMSClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultKMSHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class KMSServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, KMSServiceException.prototype);
    }
}

const AlgorithmSpec = {
    RSAES_OAEP_SHA_1: "RSAES_OAEP_SHA_1",
    RSAES_OAEP_SHA_256: "RSAES_OAEP_SHA_256",
    RSAES_PKCS1_V1_5: "RSAES_PKCS1_V1_5",
    RSA_AES_KEY_WRAP_SHA_1: "RSA_AES_KEY_WRAP_SHA_1",
    RSA_AES_KEY_WRAP_SHA_256: "RSA_AES_KEY_WRAP_SHA_256",
    SM2PKE: "SM2PKE",
};
class AlreadyExistsException extends KMSServiceException {
    name = "AlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
    }
}
class DependencyTimeoutException extends KMSServiceException {
    name = "DependencyTimeoutException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "DependencyTimeoutException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, DependencyTimeoutException.prototype);
    }
}
class InvalidArnException extends KMSServiceException {
    name = "InvalidArnException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidArnException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidArnException.prototype);
    }
}
class KMSInternalException extends KMSServiceException {
    name = "KMSInternalException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "KMSInternalException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, KMSInternalException.prototype);
    }
}
class KMSInvalidStateException extends KMSServiceException {
    name = "KMSInvalidStateException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KMSInvalidStateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KMSInvalidStateException.prototype);
    }
}
class NotFoundException extends KMSServiceException {
    name = "NotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
class CloudHsmClusterInUseException extends KMSServiceException {
    name = "CloudHsmClusterInUseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CloudHsmClusterInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CloudHsmClusterInUseException.prototype);
    }
}
class CloudHsmClusterInvalidConfigurationException extends KMSServiceException {
    name = "CloudHsmClusterInvalidConfigurationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CloudHsmClusterInvalidConfigurationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CloudHsmClusterInvalidConfigurationException.prototype);
    }
}
class CloudHsmClusterNotActiveException extends KMSServiceException {
    name = "CloudHsmClusterNotActiveException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CloudHsmClusterNotActiveException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CloudHsmClusterNotActiveException.prototype);
    }
}
class CloudHsmClusterNotFoundException extends KMSServiceException {
    name = "CloudHsmClusterNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CloudHsmClusterNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CloudHsmClusterNotFoundException.prototype);
    }
}
class CloudHsmClusterNotRelatedException extends KMSServiceException {
    name = "CloudHsmClusterNotRelatedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CloudHsmClusterNotRelatedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CloudHsmClusterNotRelatedException.prototype);
    }
}
class ConflictException extends KMSServiceException {
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
class CustomKeyStoreInvalidStateException extends KMSServiceException {
    name = "CustomKeyStoreInvalidStateException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CustomKeyStoreInvalidStateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CustomKeyStoreInvalidStateException.prototype);
    }
}
class CustomKeyStoreNotFoundException extends KMSServiceException {
    name = "CustomKeyStoreNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CustomKeyStoreNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CustomKeyStoreNotFoundException.prototype);
    }
}
const ConnectionErrorCodeType = {
    CLUSTER_NOT_FOUND: "CLUSTER_NOT_FOUND",
    INSUFFICIENT_CLOUDHSM_HSMS: "INSUFFICIENT_CLOUDHSM_HSMS",
    INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET: "INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    INVALID_CREDENTIALS: "INVALID_CREDENTIALS",
    NETWORK_ERRORS: "NETWORK_ERRORS",
    SUBNET_NOT_FOUND: "SUBNET_NOT_FOUND",
    USER_LOCKED_OUT: "USER_LOCKED_OUT",
    USER_LOGGED_IN: "USER_LOGGED_IN",
    USER_NOT_FOUND: "USER_NOT_FOUND",
    XKS_PROXY_ACCESS_DENIED: "XKS_PROXY_ACCESS_DENIED",
    XKS_PROXY_INVALID_CONFIGURATION: "XKS_PROXY_INVALID_CONFIGURATION",
    XKS_PROXY_INVALID_RESPONSE: "XKS_PROXY_INVALID_RESPONSE",
    XKS_PROXY_INVALID_TLS_CONFIGURATION: "XKS_PROXY_INVALID_TLS_CONFIGURATION",
    XKS_PROXY_NOT_REACHABLE: "XKS_PROXY_NOT_REACHABLE",
    XKS_PROXY_TIMED_OUT: "XKS_PROXY_TIMED_OUT",
    XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION: "XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION",
    XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND: "XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND",
};
const ConnectionStateType = {
    CONNECTED: "CONNECTED",
    CONNECTING: "CONNECTING",
    DISCONNECTED: "DISCONNECTED",
    DISCONNECTING: "DISCONNECTING",
    FAILED: "FAILED",
};
class InvalidAliasNameException extends KMSServiceException {
    name = "InvalidAliasNameException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidAliasNameException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidAliasNameException.prototype);
    }
}
class LimitExceededException extends KMSServiceException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
const CustomKeyStoreType = {
    AWS_CLOUDHSM: "AWS_CLOUDHSM",
    EXTERNAL_KEY_STORE: "EXTERNAL_KEY_STORE",
};
const XksProxyConnectivityType = {
    PUBLIC_ENDPOINT: "PUBLIC_ENDPOINT",
    VPC_ENDPOINT_SERVICE: "VPC_ENDPOINT_SERVICE",
};
class CustomKeyStoreNameInUseException extends KMSServiceException {
    name = "CustomKeyStoreNameInUseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CustomKeyStoreNameInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CustomKeyStoreNameInUseException.prototype);
    }
}
class IncorrectTrustAnchorException extends KMSServiceException {
    name = "IncorrectTrustAnchorException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "IncorrectTrustAnchorException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, IncorrectTrustAnchorException.prototype);
    }
}
class XksProxyIncorrectAuthenticationCredentialException extends KMSServiceException {
    name = "XksProxyIncorrectAuthenticationCredentialException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "XksProxyIncorrectAuthenticationCredentialException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, XksProxyIncorrectAuthenticationCredentialException.prototype);
    }
}
class XksProxyInvalidConfigurationException extends KMSServiceException {
    name = "XksProxyInvalidConfigurationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "XksProxyInvalidConfigurationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, XksProxyInvalidConfigurationException.prototype);
    }
}
class XksProxyInvalidResponseException extends KMSServiceException {
    name = "XksProxyInvalidResponseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "XksProxyInvalidResponseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, XksProxyInvalidResponseException.prototype);
    }
}
class XksProxyUriEndpointInUseException extends KMSServiceException {
    name = "XksProxyUriEndpointInUseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "XksProxyUriEndpointInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, XksProxyUriEndpointInUseException.prototype);
    }
}
class XksProxyUriInUseException extends KMSServiceException {
    name = "XksProxyUriInUseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "XksProxyUriInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, XksProxyUriInUseException.prototype);
    }
}
class XksProxyUriUnreachableException extends KMSServiceException {
    name = "XksProxyUriUnreachableException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "XksProxyUriUnreachableException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, XksProxyUriUnreachableException.prototype);
    }
}
class XksProxyVpcEndpointServiceInUseException extends KMSServiceException {
    name = "XksProxyVpcEndpointServiceInUseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "XksProxyVpcEndpointServiceInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, XksProxyVpcEndpointServiceInUseException.prototype);
    }
}
class XksProxyVpcEndpointServiceInvalidConfigurationException extends KMSServiceException {
    name = "XksProxyVpcEndpointServiceInvalidConfigurationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "XksProxyVpcEndpointServiceInvalidConfigurationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, XksProxyVpcEndpointServiceInvalidConfigurationException.prototype);
    }
}
class XksProxyVpcEndpointServiceNotFoundException extends KMSServiceException {
    name = "XksProxyVpcEndpointServiceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "XksProxyVpcEndpointServiceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, XksProxyVpcEndpointServiceNotFoundException.prototype);
    }
}
const GrantOperation = {
    CreateGrant: "CreateGrant",
    Decrypt: "Decrypt",
    DeriveSharedSecret: "DeriveSharedSecret",
    DescribeKey: "DescribeKey",
    Encrypt: "Encrypt",
    GenerateDataKey: "GenerateDataKey",
    GenerateDataKeyPair: "GenerateDataKeyPair",
    GenerateDataKeyPairWithoutPlaintext: "GenerateDataKeyPairWithoutPlaintext",
    GenerateDataKeyWithoutPlaintext: "GenerateDataKeyWithoutPlaintext",
    GenerateMac: "GenerateMac",
    GetPublicKey: "GetPublicKey",
    ReEncryptFrom: "ReEncryptFrom",
    ReEncryptTo: "ReEncryptTo",
    RetireGrant: "RetireGrant",
    Sign: "Sign",
    Verify: "Verify",
    VerifyMac: "VerifyMac",
};
class DisabledException extends KMSServiceException {
    name = "DisabledException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DisabledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DisabledException.prototype);
    }
}
class DryRunOperationException extends KMSServiceException {
    name = "DryRunOperationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DryRunOperationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DryRunOperationException.prototype);
    }
}
class InvalidGrantTokenException extends KMSServiceException {
    name = "InvalidGrantTokenException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidGrantTokenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidGrantTokenException.prototype);
    }
}
const CustomerMasterKeySpec = {
    ECC_NIST_P256: "ECC_NIST_P256",
    ECC_NIST_P384: "ECC_NIST_P384",
    ECC_NIST_P521: "ECC_NIST_P521",
    ECC_SECG_P256K1: "ECC_SECG_P256K1",
    HMAC_224: "HMAC_224",
    HMAC_256: "HMAC_256",
    HMAC_384: "HMAC_384",
    HMAC_512: "HMAC_512",
    RSA_2048: "RSA_2048",
    RSA_3072: "RSA_3072",
    RSA_4096: "RSA_4096",
    SM2: "SM2",
    SYMMETRIC_DEFAULT: "SYMMETRIC_DEFAULT",
};
const KeySpec = {
    ECC_NIST_P256: "ECC_NIST_P256",
    ECC_NIST_P384: "ECC_NIST_P384",
    ECC_NIST_P521: "ECC_NIST_P521",
    ECC_SECG_P256K1: "ECC_SECG_P256K1",
    HMAC_224: "HMAC_224",
    HMAC_256: "HMAC_256",
    HMAC_384: "HMAC_384",
    HMAC_512: "HMAC_512",
    ML_DSA_44: "ML_DSA_44",
    ML_DSA_65: "ML_DSA_65",
    ML_DSA_87: "ML_DSA_87",
    RSA_2048: "RSA_2048",
    RSA_3072: "RSA_3072",
    RSA_4096: "RSA_4096",
    SM2: "SM2",
    SYMMETRIC_DEFAULT: "SYMMETRIC_DEFAULT",
};
const KeyUsageType = {
    ENCRYPT_DECRYPT: "ENCRYPT_DECRYPT",
    GENERATE_VERIFY_MAC: "GENERATE_VERIFY_MAC",
    KEY_AGREEMENT: "KEY_AGREEMENT",
    SIGN_VERIFY: "SIGN_VERIFY",
};
const OriginType = {
    AWS_CLOUDHSM: "AWS_CLOUDHSM",
    AWS_KMS: "AWS_KMS",
    EXTERNAL: "EXTERNAL",
    EXTERNAL_KEY_STORE: "EXTERNAL_KEY_STORE",
};
const EncryptionAlgorithmSpec = {
    RSAES_OAEP_SHA_1: "RSAES_OAEP_SHA_1",
    RSAES_OAEP_SHA_256: "RSAES_OAEP_SHA_256",
    SM2PKE: "SM2PKE",
    SYMMETRIC_DEFAULT: "SYMMETRIC_DEFAULT",
};
const ExpirationModelType = {
    KEY_MATERIAL_DOES_NOT_EXPIRE: "KEY_MATERIAL_DOES_NOT_EXPIRE",
    KEY_MATERIAL_EXPIRES: "KEY_MATERIAL_EXPIRES",
};
const KeyAgreementAlgorithmSpec = {
    ECDH: "ECDH",
};
const KeyManagerType = {
    AWS: "AWS",
    CUSTOMER: "CUSTOMER",
};
const KeyState = {
    Creating: "Creating",
    Disabled: "Disabled",
    Enabled: "Enabled",
    PendingDeletion: "PendingDeletion",
    PendingImport: "PendingImport",
    PendingReplicaDeletion: "PendingReplicaDeletion",
    Unavailable: "Unavailable",
    Updating: "Updating",
};
const MacAlgorithmSpec = {
    HMAC_SHA_224: "HMAC_SHA_224",
    HMAC_SHA_256: "HMAC_SHA_256",
    HMAC_SHA_384: "HMAC_SHA_384",
    HMAC_SHA_512: "HMAC_SHA_512",
};
const MultiRegionKeyType = {
    PRIMARY: "PRIMARY",
    REPLICA: "REPLICA",
};
const SigningAlgorithmSpec = {
    ECDSA_SHA_256: "ECDSA_SHA_256",
    ECDSA_SHA_384: "ECDSA_SHA_384",
    ECDSA_SHA_512: "ECDSA_SHA_512",
    ML_DSA_SHAKE_256: "ML_DSA_SHAKE_256",
    RSASSA_PKCS1_V1_5_SHA_256: "RSASSA_PKCS1_V1_5_SHA_256",
    RSASSA_PKCS1_V1_5_SHA_384: "RSASSA_PKCS1_V1_5_SHA_384",
    RSASSA_PKCS1_V1_5_SHA_512: "RSASSA_PKCS1_V1_5_SHA_512",
    RSASSA_PSS_SHA_256: "RSASSA_PSS_SHA_256",
    RSASSA_PSS_SHA_384: "RSASSA_PSS_SHA_384",
    RSASSA_PSS_SHA_512: "RSASSA_PSS_SHA_512",
    SM2DSA: "SM2DSA",
};
class MalformedPolicyDocumentException extends KMSServiceException {
    name = "MalformedPolicyDocumentException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "MalformedPolicyDocumentException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
    }
}
class TagException extends KMSServiceException {
    name = "TagException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TagException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TagException.prototype);
    }
}
class UnsupportedOperationException extends KMSServiceException {
    name = "UnsupportedOperationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedOperationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedOperationException.prototype);
    }
}
class XksKeyAlreadyInUseException extends KMSServiceException {
    name = "XksKeyAlreadyInUseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "XksKeyAlreadyInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, XksKeyAlreadyInUseException.prototype);
    }
}
class XksKeyInvalidConfigurationException extends KMSServiceException {
    name = "XksKeyInvalidConfigurationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "XksKeyInvalidConfigurationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, XksKeyInvalidConfigurationException.prototype);
    }
}
class XksKeyNotFoundException extends KMSServiceException {
    name = "XksKeyNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "XksKeyNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, XksKeyNotFoundException.prototype);
    }
}
class CustomKeyStoreHasCMKsException extends KMSServiceException {
    name = "CustomKeyStoreHasCMKsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CustomKeyStoreHasCMKsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CustomKeyStoreHasCMKsException.prototype);
    }
}
const DataKeyPairSpec = {
    ECC_NIST_P256: "ECC_NIST_P256",
    ECC_NIST_P384: "ECC_NIST_P384",
    ECC_NIST_P521: "ECC_NIST_P521",
    ECC_SECG_P256K1: "ECC_SECG_P256K1",
    RSA_2048: "RSA_2048",
    RSA_3072: "RSA_3072",
    RSA_4096: "RSA_4096",
    SM2: "SM2",
};
const DataKeySpec = {
    AES_128: "AES_128",
    AES_256: "AES_256",
};
const KeyEncryptionMechanism = {
    RSAES_OAEP_SHA_256: "RSAES_OAEP_SHA_256",
};
class IncorrectKeyException extends KMSServiceException {
    name = "IncorrectKeyException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "IncorrectKeyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, IncorrectKeyException.prototype);
    }
}
class InvalidCiphertextException extends KMSServiceException {
    name = "InvalidCiphertextException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidCiphertextException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidCiphertextException.prototype);
    }
}
class InvalidKeyUsageException extends KMSServiceException {
    name = "InvalidKeyUsageException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidKeyUsageException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidKeyUsageException.prototype);
    }
}
class KeyUnavailableException extends KMSServiceException {
    name = "KeyUnavailableException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "KeyUnavailableException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, KeyUnavailableException.prototype);
    }
}
class InvalidMarkerException extends KMSServiceException {
    name = "InvalidMarkerException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidMarkerException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidMarkerException.prototype);
    }
}
class ExpiredImportTokenException extends KMSServiceException {
    name = "ExpiredImportTokenException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ExpiredImportTokenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ExpiredImportTokenException.prototype);
    }
}
const WrappingKeySpec = {
    RSA_2048: "RSA_2048",
    RSA_3072: "RSA_3072",
    RSA_4096: "RSA_4096",
    SM2: "SM2",
};
const ImportType = {
    EXISTING_KEY_MATERIAL: "EXISTING_KEY_MATERIAL",
    NEW_KEY_MATERIAL: "NEW_KEY_MATERIAL",
};
class IncorrectKeyMaterialException extends KMSServiceException {
    name = "IncorrectKeyMaterialException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "IncorrectKeyMaterialException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, IncorrectKeyMaterialException.prototype);
    }
}
class InvalidImportTokenException extends KMSServiceException {
    name = "InvalidImportTokenException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidImportTokenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidImportTokenException.prototype);
    }
}
const ImportState = {
    IMPORTED: "IMPORTED",
    PENDING_IMPORT: "PENDING_IMPORT",
};
const IncludeKeyMaterial = {
    ALL_KEY_MATERIAL: "ALL_KEY_MATERIAL",
    ROTATIONS_ONLY: "ROTATIONS_ONLY",
};
class InvalidGrantIdException extends KMSServiceException {
    name = "InvalidGrantIdException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidGrantIdException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidGrantIdException.prototype);
    }
}
const KeyMaterialState = {
    CURRENT: "CURRENT",
    NON_CURRENT: "NON_CURRENT",
    PENDING_ROTATION: "PENDING_ROTATION",
};
class KMSInvalidMacException extends KMSServiceException {
    name = "KMSInvalidMacException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KMSInvalidMacException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KMSInvalidMacException.prototype);
    }
}
class KMSInvalidSignatureException extends KMSServiceException {
    name = "KMSInvalidSignatureException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KMSInvalidSignatureException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KMSInvalidSignatureException.prototype);
    }
}
const RotationType = {
    AUTOMATIC: "AUTOMATIC",
    ON_DEMAND: "ON_DEMAND",
};
const MessageType = {
    DIGEST: "DIGEST",
    EXTERNAL_MU: "EXTERNAL_MU",
    RAW: "RAW",
};
const XksProxyAuthenticationCredentialTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessKeyId && { AccessKeyId: smithyClient.SENSITIVE_STRING }),
    ...(obj.RawSecretAccessKey && { RawSecretAccessKey: smithyClient.SENSITIVE_STRING }),
});
const CreateCustomKeyStoreRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.KeyStorePassword && { KeyStorePassword: smithyClient.SENSITIVE_STRING }),
    ...(obj.XksProxyAuthenticationCredential && {
        XksProxyAuthenticationCredential: XksProxyAuthenticationCredentialTypeFilterSensitiveLog(obj.XksProxyAuthenticationCredential),
    }),
});
const XksProxyConfigurationTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessKeyId && { AccessKeyId: smithyClient.SENSITIVE_STRING }),
});
const CustomKeyStoresListEntryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.XksProxyConfiguration && {
        XksProxyConfiguration: XksProxyConfigurationTypeFilterSensitiveLog(obj.XksProxyConfiguration),
    }),
});
const DecryptResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Plaintext && { Plaintext: smithyClient.SENSITIVE_STRING }),
});
const DeriveSharedSecretResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SharedSecret && { SharedSecret: smithyClient.SENSITIVE_STRING }),
});
const DescribeCustomKeyStoresResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CustomKeyStores && {
        CustomKeyStores: obj.CustomKeyStores.map((item) => CustomKeyStoresListEntryFilterSensitiveLog(item)),
    }),
});
const EncryptRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Plaintext && { Plaintext: smithyClient.SENSITIVE_STRING }),
});
const GenerateDataKeyResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Plaintext && { Plaintext: smithyClient.SENSITIVE_STRING }),
});
const GenerateDataKeyPairResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PrivateKeyPlaintext && { PrivateKeyPlaintext: smithyClient.SENSITIVE_STRING }),
});
const GenerateMacRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Message && { Message: smithyClient.SENSITIVE_STRING }),
});
const GenerateRandomResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Plaintext && { Plaintext: smithyClient.SENSITIVE_STRING }),
});
const GetParametersForImportResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PublicKey && { PublicKey: smithyClient.SENSITIVE_STRING }),
});
const SignRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Message && { Message: smithyClient.SENSITIVE_STRING }),
});
const UpdateCustomKeyStoreRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.KeyStorePassword && { KeyStorePassword: smithyClient.SENSITIVE_STRING }),
    ...(obj.XksProxyAuthenticationCredential && {
        XksProxyAuthenticationCredential: XksProxyAuthenticationCredentialTypeFilterSensitiveLog(obj.XksProxyAuthenticationCredential),
    }),
});
const VerifyRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Message && { Message: smithyClient.SENSITIVE_STRING }),
});
const VerifyMacRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Message && { Message: smithyClient.SENSITIVE_STRING }),
});

const se_CancelKeyDeletionCommand = async (input, context) => {
    const headers = sharedHeaders("CancelKeyDeletion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ConnectCustomKeyStoreCommand = async (input, context) => {
    const headers = sharedHeaders("ConnectCustomKeyStore");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAliasCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAlias");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateCustomKeyStoreCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCustomKeyStore");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateGrantCommand = async (input, context) => {
    const headers = sharedHeaders("CreateGrant");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateKeyCommand = async (input, context) => {
    const headers = sharedHeaders("CreateKey");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DecryptCommand = async (input, context) => {
    const headers = sharedHeaders("Decrypt");
    let body;
    body = JSON.stringify(se_DecryptRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAliasCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAlias");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteCustomKeyStoreCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCustomKeyStore");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteImportedKeyMaterialCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteImportedKeyMaterial");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeriveSharedSecretCommand = async (input, context) => {
    const headers = sharedHeaders("DeriveSharedSecret");
    let body;
    body = JSON.stringify(se_DeriveSharedSecretRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCustomKeyStoresCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCustomKeyStores");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeKeyCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeKey");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableKeyCommand = async (input, context) => {
    const headers = sharedHeaders("DisableKey");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableKeyRotationCommand = async (input, context) => {
    const headers = sharedHeaders("DisableKeyRotation");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisconnectCustomKeyStoreCommand = async (input, context) => {
    const headers = sharedHeaders("DisconnectCustomKeyStore");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableKeyCommand = async (input, context) => {
    const headers = sharedHeaders("EnableKey");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableKeyRotationCommand = async (input, context) => {
    const headers = sharedHeaders("EnableKeyRotation");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EncryptCommand = async (input, context) => {
    const headers = sharedHeaders("Encrypt");
    let body;
    body = JSON.stringify(se_EncryptRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GenerateDataKeyCommand = async (input, context) => {
    const headers = sharedHeaders("GenerateDataKey");
    let body;
    body = JSON.stringify(se_GenerateDataKeyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GenerateDataKeyPairCommand = async (input, context) => {
    const headers = sharedHeaders("GenerateDataKeyPair");
    let body;
    body = JSON.stringify(se_GenerateDataKeyPairRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GenerateDataKeyPairWithoutPlaintextCommand = async (input, context) => {
    const headers = sharedHeaders("GenerateDataKeyPairWithoutPlaintext");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GenerateDataKeyWithoutPlaintextCommand = async (input, context) => {
    const headers = sharedHeaders("GenerateDataKeyWithoutPlaintext");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GenerateMacCommand = async (input, context) => {
    const headers = sharedHeaders("GenerateMac");
    let body;
    body = JSON.stringify(se_GenerateMacRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GenerateRandomCommand = async (input, context) => {
    const headers = sharedHeaders("GenerateRandom");
    let body;
    body = JSON.stringify(se_GenerateRandomRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetKeyPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetKeyPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetKeyRotationStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetKeyRotationStatus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetParametersForImportCommand = async (input, context) => {
    const headers = sharedHeaders("GetParametersForImport");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetPublicKeyCommand = async (input, context) => {
    const headers = sharedHeaders("GetPublicKey");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ImportKeyMaterialCommand = async (input, context) => {
    const headers = sharedHeaders("ImportKeyMaterial");
    let body;
    body = JSON.stringify(se_ImportKeyMaterialRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAliasesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAliases");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListGrantsCommand = async (input, context) => {
    const headers = sharedHeaders("ListGrants");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListKeyPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("ListKeyPolicies");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListKeyRotationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListKeyRotations");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListKeysCommand = async (input, context) => {
    const headers = sharedHeaders("ListKeys");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListResourceTagsCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceTags");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListRetirableGrantsCommand = async (input, context) => {
    const headers = sharedHeaders("ListRetirableGrants");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutKeyPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutKeyPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReEncryptCommand = async (input, context) => {
    const headers = sharedHeaders("ReEncrypt");
    let body;
    body = JSON.stringify(se_ReEncryptRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReplicateKeyCommand = async (input, context) => {
    const headers = sharedHeaders("ReplicateKey");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RetireGrantCommand = async (input, context) => {
    const headers = sharedHeaders("RetireGrant");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RevokeGrantCommand = async (input, context) => {
    const headers = sharedHeaders("RevokeGrant");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RotateKeyOnDemandCommand = async (input, context) => {
    const headers = sharedHeaders("RotateKeyOnDemand");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ScheduleKeyDeletionCommand = async (input, context) => {
    const headers = sharedHeaders("ScheduleKeyDeletion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SignCommand = async (input, context) => {
    const headers = sharedHeaders("Sign");
    let body;
    body = JSON.stringify(se_SignRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateAliasCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAlias");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateCustomKeyStoreCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCustomKeyStore");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateKeyDescriptionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateKeyDescription");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdatePrimaryRegionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePrimaryRegion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_VerifyCommand = async (input, context) => {
    const headers = sharedHeaders("Verify");
    let body;
    body = JSON.stringify(se_VerifyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_VerifyMacCommand = async (input, context) => {
    const headers = sharedHeaders("VerifyMac");
    let body;
    body = JSON.stringify(se_VerifyMacRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_CancelKeyDeletionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ConnectCustomKeyStoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateCustomKeyStoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateGrantCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateKeyResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DecryptCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DecryptResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteCustomKeyStoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteImportedKeyMaterialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeriveSharedSecretCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeriveSharedSecretResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCustomKeyStoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeCustomKeyStoresResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeKeyResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DisableKeyRotationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DisconnectCustomKeyStoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_EnableKeyRotationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_EncryptCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_EncryptResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GenerateDataKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GenerateDataKeyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GenerateDataKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GenerateDataKeyPairResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GenerateDataKeyPairWithoutPlaintextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GenerateDataKeyPairWithoutPlaintextResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GenerateDataKeyWithoutPlaintextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GenerateDataKeyWithoutPlaintextResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GenerateMacCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GenerateMacResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GenerateRandomCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GenerateRandomResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetKeyPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetKeyRotationStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetKeyRotationStatusResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetParametersForImportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetParametersForImportResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetPublicKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetPublicKeyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportKeyMaterialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAliasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListAliasesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListGrantsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListGrantsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListKeyPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListKeyRotationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListKeyRotationsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListResourceTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListRetirableGrantsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListGrantsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutKeyPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ReEncryptCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ReEncryptResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReplicateKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ReplicateKeyResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RetireGrantCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RevokeGrantCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RotateKeyOnDemandCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ScheduleKeyDeletionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ScheduleKeyDeletionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SignCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_SignResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateCustomKeyStoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateKeyDescriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdatePrimaryRegionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_VerifyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_VerifyMacCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DependencyTimeoutException":
        case "com.amazonaws.kms#DependencyTimeoutException":
            throw await de_DependencyTimeoutExceptionRes(parsedOutput);
        case "InvalidArnException":
        case "com.amazonaws.kms#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput);
        case "KMSInternalException":
        case "com.amazonaws.kms#KMSInternalException":
            throw await de_KMSInternalExceptionRes(parsedOutput);
        case "KMSInvalidStateException":
        case "com.amazonaws.kms#KMSInvalidStateException":
            throw await de_KMSInvalidStateExceptionRes(parsedOutput);
        case "NotFoundException":
        case "com.amazonaws.kms#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput);
        case "CloudHsmClusterInvalidConfigurationException":
        case "com.amazonaws.kms#CloudHsmClusterInvalidConfigurationException":
            throw await de_CloudHsmClusterInvalidConfigurationExceptionRes(parsedOutput);
        case "CloudHsmClusterNotActiveException":
        case "com.amazonaws.kms#CloudHsmClusterNotActiveException":
            throw await de_CloudHsmClusterNotActiveExceptionRes(parsedOutput);
        case "CustomKeyStoreInvalidStateException":
        case "com.amazonaws.kms#CustomKeyStoreInvalidStateException":
            throw await de_CustomKeyStoreInvalidStateExceptionRes(parsedOutput);
        case "CustomKeyStoreNotFoundException":
        case "com.amazonaws.kms#CustomKeyStoreNotFoundException":
            throw await de_CustomKeyStoreNotFoundExceptionRes(parsedOutput);
        case "AlreadyExistsException":
        case "com.amazonaws.kms#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput);
        case "InvalidAliasNameException":
        case "com.amazonaws.kms#InvalidAliasNameException":
            throw await de_InvalidAliasNameExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.kms#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "CloudHsmClusterInUseException":
        case "com.amazonaws.kms#CloudHsmClusterInUseException":
            throw await de_CloudHsmClusterInUseExceptionRes(parsedOutput);
        case "CloudHsmClusterNotFoundException":
        case "com.amazonaws.kms#CloudHsmClusterNotFoundException":
            throw await de_CloudHsmClusterNotFoundExceptionRes(parsedOutput);
        case "CustomKeyStoreNameInUseException":
        case "com.amazonaws.kms#CustomKeyStoreNameInUseException":
            throw await de_CustomKeyStoreNameInUseExceptionRes(parsedOutput);
        case "IncorrectTrustAnchorException":
        case "com.amazonaws.kms#IncorrectTrustAnchorException":
            throw await de_IncorrectTrustAnchorExceptionRes(parsedOutput);
        case "XksProxyIncorrectAuthenticationCredentialException":
        case "com.amazonaws.kms#XksProxyIncorrectAuthenticationCredentialException":
            throw await de_XksProxyIncorrectAuthenticationCredentialExceptionRes(parsedOutput);
        case "XksProxyInvalidConfigurationException":
        case "com.amazonaws.kms#XksProxyInvalidConfigurationException":
            throw await de_XksProxyInvalidConfigurationExceptionRes(parsedOutput);
        case "XksProxyInvalidResponseException":
        case "com.amazonaws.kms#XksProxyInvalidResponseException":
            throw await de_XksProxyInvalidResponseExceptionRes(parsedOutput);
        case "XksProxyUriEndpointInUseException":
        case "com.amazonaws.kms#XksProxyUriEndpointInUseException":
            throw await de_XksProxyUriEndpointInUseExceptionRes(parsedOutput);
        case "XksProxyUriInUseException":
        case "com.amazonaws.kms#XksProxyUriInUseException":
            throw await de_XksProxyUriInUseExceptionRes(parsedOutput);
        case "XksProxyUriUnreachableException":
        case "com.amazonaws.kms#XksProxyUriUnreachableException":
            throw await de_XksProxyUriUnreachableExceptionRes(parsedOutput);
        case "XksProxyVpcEndpointServiceInUseException":
        case "com.amazonaws.kms#XksProxyVpcEndpointServiceInUseException":
            throw await de_XksProxyVpcEndpointServiceInUseExceptionRes(parsedOutput);
        case "XksProxyVpcEndpointServiceInvalidConfigurationException":
        case "com.amazonaws.kms#XksProxyVpcEndpointServiceInvalidConfigurationException":
            throw await de_XksProxyVpcEndpointServiceInvalidConfigurationExceptionRes(parsedOutput);
        case "XksProxyVpcEndpointServiceNotFoundException":
        case "com.amazonaws.kms#XksProxyVpcEndpointServiceNotFoundException":
            throw await de_XksProxyVpcEndpointServiceNotFoundExceptionRes(parsedOutput);
        case "DisabledException":
        case "com.amazonaws.kms#DisabledException":
            throw await de_DisabledExceptionRes(parsedOutput);
        case "DryRunOperationException":
        case "com.amazonaws.kms#DryRunOperationException":
            throw await de_DryRunOperationExceptionRes(parsedOutput);
        case "InvalidGrantTokenException":
        case "com.amazonaws.kms#InvalidGrantTokenException":
            throw await de_InvalidGrantTokenExceptionRes(parsedOutput);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.kms#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput);
        case "TagException":
        case "com.amazonaws.kms#TagException":
            throw await de_TagExceptionRes(parsedOutput);
        case "UnsupportedOperationException":
        case "com.amazonaws.kms#UnsupportedOperationException":
            throw await de_UnsupportedOperationExceptionRes(parsedOutput);
        case "XksKeyAlreadyInUseException":
        case "com.amazonaws.kms#XksKeyAlreadyInUseException":
            throw await de_XksKeyAlreadyInUseExceptionRes(parsedOutput);
        case "XksKeyInvalidConfigurationException":
        case "com.amazonaws.kms#XksKeyInvalidConfigurationException":
            throw await de_XksKeyInvalidConfigurationExceptionRes(parsedOutput);
        case "XksKeyNotFoundException":
        case "com.amazonaws.kms#XksKeyNotFoundException":
            throw await de_XksKeyNotFoundExceptionRes(parsedOutput);
        case "IncorrectKeyException":
        case "com.amazonaws.kms#IncorrectKeyException":
            throw await de_IncorrectKeyExceptionRes(parsedOutput);
        case "InvalidCiphertextException":
        case "com.amazonaws.kms#InvalidCiphertextException":
            throw await de_InvalidCiphertextExceptionRes(parsedOutput);
        case "InvalidKeyUsageException":
        case "com.amazonaws.kms#InvalidKeyUsageException":
            throw await de_InvalidKeyUsageExceptionRes(parsedOutput);
        case "KeyUnavailableException":
        case "com.amazonaws.kms#KeyUnavailableException":
            throw await de_KeyUnavailableExceptionRes(parsedOutput);
        case "CustomKeyStoreHasCMKsException":
        case "com.amazonaws.kms#CustomKeyStoreHasCMKsException":
            throw await de_CustomKeyStoreHasCMKsExceptionRes(parsedOutput);
        case "InvalidMarkerException":
        case "com.amazonaws.kms#InvalidMarkerException":
            throw await de_InvalidMarkerExceptionRes(parsedOutput);
        case "ExpiredImportTokenException":
        case "com.amazonaws.kms#ExpiredImportTokenException":
            throw await de_ExpiredImportTokenExceptionRes(parsedOutput);
        case "IncorrectKeyMaterialException":
        case "com.amazonaws.kms#IncorrectKeyMaterialException":
            throw await de_IncorrectKeyMaterialExceptionRes(parsedOutput);
        case "InvalidImportTokenException":
        case "com.amazonaws.kms#InvalidImportTokenException":
            throw await de_InvalidImportTokenExceptionRes(parsedOutput);
        case "InvalidGrantIdException":
        case "com.amazonaws.kms#InvalidGrantIdException":
            throw await de_InvalidGrantIdExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.kms#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "CloudHsmClusterNotRelatedException":
        case "com.amazonaws.kms#CloudHsmClusterNotRelatedException":
            throw await de_CloudHsmClusterNotRelatedExceptionRes(parsedOutput);
        case "KMSInvalidSignatureException":
        case "com.amazonaws.kms#KMSInvalidSignatureException":
            throw await de_KMSInvalidSignatureExceptionRes(parsedOutput);
        case "KMSInvalidMacException":
        case "com.amazonaws.kms#KMSInvalidMacException":
            throw await de_KMSInvalidMacExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CloudHsmClusterInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new CloudHsmClusterInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CloudHsmClusterInvalidConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new CloudHsmClusterInvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CloudHsmClusterNotActiveExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new CloudHsmClusterNotActiveException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CloudHsmClusterNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new CloudHsmClusterNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CloudHsmClusterNotRelatedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new CloudHsmClusterNotRelatedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CustomKeyStoreHasCMKsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new CustomKeyStoreHasCMKsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CustomKeyStoreInvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new CustomKeyStoreInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CustomKeyStoreNameInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new CustomKeyStoreNameInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CustomKeyStoreNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new CustomKeyStoreNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_DependencyTimeoutExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new DependencyTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_DisabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new DisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_DryRunOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new DryRunOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ExpiredImportTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ExpiredImportTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_IncorrectKeyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new IncorrectKeyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_IncorrectKeyMaterialExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new IncorrectKeyMaterialException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_IncorrectTrustAnchorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new IncorrectTrustAnchorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidAliasNameExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidAliasNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidArnExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidCiphertextExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidCiphertextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidGrantIdExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidGrantIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidGrantTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidGrantTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidImportTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidImportTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidKeyUsageExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidKeyUsageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidMarkerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidMarkerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KeyUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new KeyUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KMSInternalExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new KMSInternalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KMSInvalidMacExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new KMSInvalidMacException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KMSInvalidSignatureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new KMSInvalidSignatureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KMSInvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new KMSInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TagExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TagException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnsupportedOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnsupportedOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_XksKeyAlreadyInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new XksKeyAlreadyInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_XksKeyInvalidConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new XksKeyInvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_XksKeyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new XksKeyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_XksProxyIncorrectAuthenticationCredentialExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new XksProxyIncorrectAuthenticationCredentialException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_XksProxyInvalidConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new XksProxyInvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_XksProxyInvalidResponseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new XksProxyInvalidResponseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_XksProxyUriEndpointInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new XksProxyUriEndpointInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_XksProxyUriInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new XksProxyUriInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_XksProxyUriUnreachableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new XksProxyUriUnreachableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_XksProxyVpcEndpointServiceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new XksProxyVpcEndpointServiceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_XksProxyVpcEndpointServiceInvalidConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new XksProxyVpcEndpointServiceInvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_XksProxyVpcEndpointServiceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new XksProxyVpcEndpointServiceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_DecryptRequest = (input, context) => {
    return smithyClient.take(input, {
        CiphertextBlob: context.base64Encoder,
        DryRun: [],
        EncryptionAlgorithm: [],
        EncryptionContext: smithyClient._json,
        GrantTokens: smithyClient._json,
        KeyId: [],
        Recipient: (_) => se_RecipientInfo(_, context),
    });
};
const se_DeriveSharedSecretRequest = (input, context) => {
    return smithyClient.take(input, {
        DryRun: [],
        GrantTokens: smithyClient._json,
        KeyAgreementAlgorithm: [],
        KeyId: [],
        PublicKey: context.base64Encoder,
        Recipient: (_) => se_RecipientInfo(_, context),
    });
};
const se_EncryptRequest = (input, context) => {
    return smithyClient.take(input, {
        DryRun: [],
        EncryptionAlgorithm: [],
        EncryptionContext: smithyClient._json,
        GrantTokens: smithyClient._json,
        KeyId: [],
        Plaintext: context.base64Encoder,
    });
};
const se_GenerateDataKeyPairRequest = (input, context) => {
    return smithyClient.take(input, {
        DryRun: [],
        EncryptionContext: smithyClient._json,
        GrantTokens: smithyClient._json,
        KeyId: [],
        KeyPairSpec: [],
        Recipient: (_) => se_RecipientInfo(_, context),
    });
};
const se_GenerateDataKeyRequest = (input, context) => {
    return smithyClient.take(input, {
        DryRun: [],
        EncryptionContext: smithyClient._json,
        GrantTokens: smithyClient._json,
        KeyId: [],
        KeySpec: [],
        NumberOfBytes: [],
        Recipient: (_) => se_RecipientInfo(_, context),
    });
};
const se_GenerateMacRequest = (input, context) => {
    return smithyClient.take(input, {
        DryRun: [],
        GrantTokens: smithyClient._json,
        KeyId: [],
        MacAlgorithm: [],
        Message: context.base64Encoder,
    });
};
const se_GenerateRandomRequest = (input, context) => {
    return smithyClient.take(input, {
        CustomKeyStoreId: [],
        NumberOfBytes: [],
        Recipient: (_) => se_RecipientInfo(_, context),
    });
};
const se_ImportKeyMaterialRequest = (input, context) => {
    return smithyClient.take(input, {
        EncryptedKeyMaterial: context.base64Encoder,
        ExpirationModel: [],
        ImportToken: context.base64Encoder,
        ImportType: [],
        KeyId: [],
        KeyMaterialDescription: [],
        KeyMaterialId: [],
        ValidTo: (_) => _.getTime() / 1_000,
    });
};
const se_RecipientInfo = (input, context) => {
    return smithyClient.take(input, {
        AttestationDocument: context.base64Encoder,
        KeyEncryptionAlgorithm: [],
    });
};
const se_ReEncryptRequest = (input, context) => {
    return smithyClient.take(input, {
        CiphertextBlob: context.base64Encoder,
        DestinationEncryptionAlgorithm: [],
        DestinationEncryptionContext: smithyClient._json,
        DestinationKeyId: [],
        DryRun: [],
        GrantTokens: smithyClient._json,
        SourceEncryptionAlgorithm: [],
        SourceEncryptionContext: smithyClient._json,
        SourceKeyId: [],
    });
};
const se_SignRequest = (input, context) => {
    return smithyClient.take(input, {
        DryRun: [],
        GrantTokens: smithyClient._json,
        KeyId: [],
        Message: context.base64Encoder,
        MessageType: [],
        SigningAlgorithm: [],
    });
};
const se_VerifyMacRequest = (input, context) => {
    return smithyClient.take(input, {
        DryRun: [],
        GrantTokens: smithyClient._json,
        KeyId: [],
        Mac: context.base64Encoder,
        MacAlgorithm: [],
        Message: context.base64Encoder,
    });
};
const se_VerifyRequest = (input, context) => {
    return smithyClient.take(input, {
        DryRun: [],
        GrantTokens: smithyClient._json,
        KeyId: [],
        Message: context.base64Encoder,
        MessageType: [],
        Signature: context.base64Encoder,
        SigningAlgorithm: [],
    });
};
const de_AliasList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AliasListEntry(entry);
    });
    return retVal;
};
const de_AliasListEntry = (output, context) => {
    return smithyClient.take(output, {
        AliasArn: smithyClient.expectString,
        AliasName: smithyClient.expectString,
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastUpdatedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TargetKeyId: smithyClient.expectString,
    });
};
const de_CreateKeyResponse = (output, context) => {
    return smithyClient.take(output, {
        KeyMetadata: (_) => de_KeyMetadata(_),
    });
};
const de_CustomKeyStoresList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomKeyStoresListEntry(entry);
    });
    return retVal;
};
const de_CustomKeyStoresListEntry = (output, context) => {
    return smithyClient.take(output, {
        CloudHsmClusterId: smithyClient.expectString,
        ConnectionErrorCode: smithyClient.expectString,
        ConnectionState: smithyClient.expectString,
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CustomKeyStoreId: smithyClient.expectString,
        CustomKeyStoreName: smithyClient.expectString,
        CustomKeyStoreType: smithyClient.expectString,
        TrustAnchorCertificate: smithyClient.expectString,
        XksProxyConfiguration: smithyClient._json,
    });
};
const de_DecryptResponse = (output, context) => {
    return smithyClient.take(output, {
        CiphertextForRecipient: context.base64Decoder,
        EncryptionAlgorithm: smithyClient.expectString,
        KeyId: smithyClient.expectString,
        KeyMaterialId: smithyClient.expectString,
        Plaintext: context.base64Decoder,
    });
};
const de_DeriveSharedSecretResponse = (output, context) => {
    return smithyClient.take(output, {
        CiphertextForRecipient: context.base64Decoder,
        KeyAgreementAlgorithm: smithyClient.expectString,
        KeyId: smithyClient.expectString,
        KeyOrigin: smithyClient.expectString,
        SharedSecret: context.base64Decoder,
    });
};
const de_DescribeCustomKeyStoresResponse = (output, context) => {
    return smithyClient.take(output, {
        CustomKeyStores: (_) => de_CustomKeyStoresList(_),
        NextMarker: smithyClient.expectString,
        Truncated: smithyClient.expectBoolean,
    });
};
const de_DescribeKeyResponse = (output, context) => {
    return smithyClient.take(output, {
        KeyMetadata: (_) => de_KeyMetadata(_),
    });
};
const de_EncryptResponse = (output, context) => {
    return smithyClient.take(output, {
        CiphertextBlob: context.base64Decoder,
        EncryptionAlgorithm: smithyClient.expectString,
        KeyId: smithyClient.expectString,
    });
};
const de_GenerateDataKeyPairResponse = (output, context) => {
    return smithyClient.take(output, {
        CiphertextForRecipient: context.base64Decoder,
        KeyId: smithyClient.expectString,
        KeyMaterialId: smithyClient.expectString,
        KeyPairSpec: smithyClient.expectString,
        PrivateKeyCiphertextBlob: context.base64Decoder,
        PrivateKeyPlaintext: context.base64Decoder,
        PublicKey: context.base64Decoder,
    });
};
const de_GenerateDataKeyPairWithoutPlaintextResponse = (output, context) => {
    return smithyClient.take(output, {
        KeyId: smithyClient.expectString,
        KeyMaterialId: smithyClient.expectString,
        KeyPairSpec: smithyClient.expectString,
        PrivateKeyCiphertextBlob: context.base64Decoder,
        PublicKey: context.base64Decoder,
    });
};
const de_GenerateDataKeyResponse = (output, context) => {
    return smithyClient.take(output, {
        CiphertextBlob: context.base64Decoder,
        CiphertextForRecipient: context.base64Decoder,
        KeyId: smithyClient.expectString,
        KeyMaterialId: smithyClient.expectString,
        Plaintext: context.base64Decoder,
    });
};
const de_GenerateDataKeyWithoutPlaintextResponse = (output, context) => {
    return smithyClient.take(output, {
        CiphertextBlob: context.base64Decoder,
        KeyId: smithyClient.expectString,
        KeyMaterialId: smithyClient.expectString,
    });
};
const de_GenerateMacResponse = (output, context) => {
    return smithyClient.take(output, {
        KeyId: smithyClient.expectString,
        Mac: context.base64Decoder,
        MacAlgorithm: smithyClient.expectString,
    });
};
const de_GenerateRandomResponse = (output, context) => {
    return smithyClient.take(output, {
        CiphertextForRecipient: context.base64Decoder,
        Plaintext: context.base64Decoder,
    });
};
const de_GetKeyRotationStatusResponse = (output, context) => {
    return smithyClient.take(output, {
        KeyId: smithyClient.expectString,
        KeyRotationEnabled: smithyClient.expectBoolean,
        NextRotationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        OnDemandRotationStartDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RotationPeriodInDays: smithyClient.expectInt32,
    });
};
const de_GetParametersForImportResponse = (output, context) => {
    return smithyClient.take(output, {
        ImportToken: context.base64Decoder,
        KeyId: smithyClient.expectString,
        ParametersValidTo: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        PublicKey: context.base64Decoder,
    });
};
const de_GetPublicKeyResponse = (output, context) => {
    return smithyClient.take(output, {
        CustomerMasterKeySpec: smithyClient.expectString,
        EncryptionAlgorithms: smithyClient._json,
        KeyAgreementAlgorithms: smithyClient._json,
        KeyId: smithyClient.expectString,
        KeySpec: smithyClient.expectString,
        KeyUsage: smithyClient.expectString,
        PublicKey: context.base64Decoder,
        SigningAlgorithms: smithyClient._json,
    });
};
const de_GrantList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GrantListEntry(entry);
    });
    return retVal;
};
const de_GrantListEntry = (output, context) => {
    return smithyClient.take(output, {
        Constraints: smithyClient._json,
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        GrantId: smithyClient.expectString,
        GranteePrincipal: smithyClient.expectString,
        IssuingAccount: smithyClient.expectString,
        KeyId: smithyClient.expectString,
        Name: smithyClient.expectString,
        Operations: smithyClient._json,
        RetiringPrincipal: smithyClient.expectString,
    });
};
const de_KeyMetadata = (output, context) => {
    return smithyClient.take(output, {
        AWSAccountId: smithyClient.expectString,
        Arn: smithyClient.expectString,
        CloudHsmClusterId: smithyClient.expectString,
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CurrentKeyMaterialId: smithyClient.expectString,
        CustomKeyStoreId: smithyClient.expectString,
        CustomerMasterKeySpec: smithyClient.expectString,
        DeletionDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        Enabled: smithyClient.expectBoolean,
        EncryptionAlgorithms: smithyClient._json,
        ExpirationModel: smithyClient.expectString,
        KeyAgreementAlgorithms: smithyClient._json,
        KeyId: smithyClient.expectString,
        KeyManager: smithyClient.expectString,
        KeySpec: smithyClient.expectString,
        KeyState: smithyClient.expectString,
        KeyUsage: smithyClient.expectString,
        MacAlgorithms: smithyClient._json,
        MultiRegion: smithyClient.expectBoolean,
        MultiRegionConfiguration: smithyClient._json,
        Origin: smithyClient.expectString,
        PendingDeletionWindowInDays: smithyClient.expectInt32,
        SigningAlgorithms: smithyClient._json,
        ValidTo: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        XksKeyConfiguration: smithyClient._json,
    });
};
const de_ListAliasesResponse = (output, context) => {
    return smithyClient.take(output, {
        Aliases: (_) => de_AliasList(_),
        NextMarker: smithyClient.expectString,
        Truncated: smithyClient.expectBoolean,
    });
};
const de_ListGrantsResponse = (output, context) => {
    return smithyClient.take(output, {
        Grants: (_) => de_GrantList(_),
        NextMarker: smithyClient.expectString,
        Truncated: smithyClient.expectBoolean,
    });
};
const de_ListKeyRotationsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextMarker: smithyClient.expectString,
        Rotations: (_) => de_RotationsList(_),
        Truncated: smithyClient.expectBoolean,
    });
};
const de_ReEncryptResponse = (output, context) => {
    return smithyClient.take(output, {
        CiphertextBlob: context.base64Decoder,
        DestinationEncryptionAlgorithm: smithyClient.expectString,
        DestinationKeyMaterialId: smithyClient.expectString,
        KeyId: smithyClient.expectString,
        SourceEncryptionAlgorithm: smithyClient.expectString,
        SourceKeyId: smithyClient.expectString,
        SourceKeyMaterialId: smithyClient.expectString,
    });
};
const de_ReplicateKeyResponse = (output, context) => {
    return smithyClient.take(output, {
        ReplicaKeyMetadata: (_) => de_KeyMetadata(_),
        ReplicaPolicy: smithyClient.expectString,
        ReplicaTags: smithyClient._json,
    });
};
const de_RotationsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RotationsListEntry(entry);
    });
    return retVal;
};
const de_RotationsListEntry = (output, context) => {
    return smithyClient.take(output, {
        ExpirationModel: smithyClient.expectString,
        ImportState: smithyClient.expectString,
        KeyId: smithyClient.expectString,
        KeyMaterialDescription: smithyClient.expectString,
        KeyMaterialId: smithyClient.expectString,
        KeyMaterialState: smithyClient.expectString,
        RotationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RotationType: smithyClient.expectString,
        ValidTo: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_ScheduleKeyDeletionResponse = (output, context) => {
    return smithyClient.take(output, {
        DeletionDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        KeyId: smithyClient.expectString,
        KeyState: smithyClient.expectString,
        PendingWindowInDays: smithyClient.expectInt32,
    });
};
const de_SignResponse = (output, context) => {
    return smithyClient.take(output, {
        KeyId: smithyClient.expectString,
        Signature: context.base64Decoder,
        SigningAlgorithm: smithyClient.expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(KMSServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `TrentService.${operation}`,
    };
}

class CancelKeyDeletionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "CancelKeyDeletion", {})
    .n("KMSClient", "CancelKeyDeletionCommand")
    .f(void 0, void 0)
    .ser(se_CancelKeyDeletionCommand)
    .de(de_CancelKeyDeletionCommand)
    .build() {
}

class ConnectCustomKeyStoreCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "ConnectCustomKeyStore", {})
    .n("KMSClient", "ConnectCustomKeyStoreCommand")
    .f(void 0, void 0)
    .ser(se_ConnectCustomKeyStoreCommand)
    .de(de_ConnectCustomKeyStoreCommand)
    .build() {
}

class CreateAliasCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "CreateAlias", {})
    .n("KMSClient", "CreateAliasCommand")
    .f(void 0, void 0)
    .ser(se_CreateAliasCommand)
    .de(de_CreateAliasCommand)
    .build() {
}

class CreateCustomKeyStoreCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "CreateCustomKeyStore", {})
    .n("KMSClient", "CreateCustomKeyStoreCommand")
    .f(CreateCustomKeyStoreRequestFilterSensitiveLog, void 0)
    .ser(se_CreateCustomKeyStoreCommand)
    .de(de_CreateCustomKeyStoreCommand)
    .build() {
}

class CreateGrantCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "CreateGrant", {})
    .n("KMSClient", "CreateGrantCommand")
    .f(void 0, void 0)
    .ser(se_CreateGrantCommand)
    .de(de_CreateGrantCommand)
    .build() {
}

class CreateKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "CreateKey", {})
    .n("KMSClient", "CreateKeyCommand")
    .f(void 0, void 0)
    .ser(se_CreateKeyCommand)
    .de(de_CreateKeyCommand)
    .build() {
}

class DecryptCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "Decrypt", {})
    .n("KMSClient", "DecryptCommand")
    .f(void 0, DecryptResponseFilterSensitiveLog)
    .ser(se_DecryptCommand)
    .de(de_DecryptCommand)
    .build() {
}

class DeleteAliasCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "DeleteAlias", {})
    .n("KMSClient", "DeleteAliasCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAliasCommand)
    .de(de_DeleteAliasCommand)
    .build() {
}

class DeleteCustomKeyStoreCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "DeleteCustomKeyStore", {})
    .n("KMSClient", "DeleteCustomKeyStoreCommand")
    .f(void 0, void 0)
    .ser(se_DeleteCustomKeyStoreCommand)
    .de(de_DeleteCustomKeyStoreCommand)
    .build() {
}

class DeleteImportedKeyMaterialCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "DeleteImportedKeyMaterial", {})
    .n("KMSClient", "DeleteImportedKeyMaterialCommand")
    .f(void 0, void 0)
    .ser(se_DeleteImportedKeyMaterialCommand)
    .de(de_DeleteImportedKeyMaterialCommand)
    .build() {
}

class DeriveSharedSecretCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "DeriveSharedSecret", {})
    .n("KMSClient", "DeriveSharedSecretCommand")
    .f(void 0, DeriveSharedSecretResponseFilterSensitiveLog)
    .ser(se_DeriveSharedSecretCommand)
    .de(de_DeriveSharedSecretCommand)
    .build() {
}

class DescribeCustomKeyStoresCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "DescribeCustomKeyStores", {})
    .n("KMSClient", "DescribeCustomKeyStoresCommand")
    .f(void 0, DescribeCustomKeyStoresResponseFilterSensitiveLog)
    .ser(se_DescribeCustomKeyStoresCommand)
    .de(de_DescribeCustomKeyStoresCommand)
    .build() {
}

class DescribeKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "DescribeKey", {})
    .n("KMSClient", "DescribeKeyCommand")
    .f(void 0, void 0)
    .ser(se_DescribeKeyCommand)
    .de(de_DescribeKeyCommand)
    .build() {
}

class DisableKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "DisableKey", {})
    .n("KMSClient", "DisableKeyCommand")
    .f(void 0, void 0)
    .ser(se_DisableKeyCommand)
    .de(de_DisableKeyCommand)
    .build() {
}

class DisableKeyRotationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "DisableKeyRotation", {})
    .n("KMSClient", "DisableKeyRotationCommand")
    .f(void 0, void 0)
    .ser(se_DisableKeyRotationCommand)
    .de(de_DisableKeyRotationCommand)
    .build() {
}

class DisconnectCustomKeyStoreCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "DisconnectCustomKeyStore", {})
    .n("KMSClient", "DisconnectCustomKeyStoreCommand")
    .f(void 0, void 0)
    .ser(se_DisconnectCustomKeyStoreCommand)
    .de(de_DisconnectCustomKeyStoreCommand)
    .build() {
}

class EnableKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "EnableKey", {})
    .n("KMSClient", "EnableKeyCommand")
    .f(void 0, void 0)
    .ser(se_EnableKeyCommand)
    .de(de_EnableKeyCommand)
    .build() {
}

class EnableKeyRotationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "EnableKeyRotation", {})
    .n("KMSClient", "EnableKeyRotationCommand")
    .f(void 0, void 0)
    .ser(se_EnableKeyRotationCommand)
    .de(de_EnableKeyRotationCommand)
    .build() {
}

class EncryptCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "Encrypt", {})
    .n("KMSClient", "EncryptCommand")
    .f(EncryptRequestFilterSensitiveLog, void 0)
    .ser(se_EncryptCommand)
    .de(de_EncryptCommand)
    .build() {
}

class GenerateDataKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "GenerateDataKey", {})
    .n("KMSClient", "GenerateDataKeyCommand")
    .f(void 0, GenerateDataKeyResponseFilterSensitiveLog)
    .ser(se_GenerateDataKeyCommand)
    .de(de_GenerateDataKeyCommand)
    .build() {
}

class GenerateDataKeyPairCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "GenerateDataKeyPair", {})
    .n("KMSClient", "GenerateDataKeyPairCommand")
    .f(void 0, GenerateDataKeyPairResponseFilterSensitiveLog)
    .ser(se_GenerateDataKeyPairCommand)
    .de(de_GenerateDataKeyPairCommand)
    .build() {
}

class GenerateDataKeyPairWithoutPlaintextCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "GenerateDataKeyPairWithoutPlaintext", {})
    .n("KMSClient", "GenerateDataKeyPairWithoutPlaintextCommand")
    .f(void 0, void 0)
    .ser(se_GenerateDataKeyPairWithoutPlaintextCommand)
    .de(de_GenerateDataKeyPairWithoutPlaintextCommand)
    .build() {
}

class GenerateDataKeyWithoutPlaintextCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "GenerateDataKeyWithoutPlaintext", {})
    .n("KMSClient", "GenerateDataKeyWithoutPlaintextCommand")
    .f(void 0, void 0)
    .ser(se_GenerateDataKeyWithoutPlaintextCommand)
    .de(de_GenerateDataKeyWithoutPlaintextCommand)
    .build() {
}

class GenerateMacCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "GenerateMac", {})
    .n("KMSClient", "GenerateMacCommand")
    .f(GenerateMacRequestFilterSensitiveLog, void 0)
    .ser(se_GenerateMacCommand)
    .de(de_GenerateMacCommand)
    .build() {
}

class GenerateRandomCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "GenerateRandom", {})
    .n("KMSClient", "GenerateRandomCommand")
    .f(void 0, GenerateRandomResponseFilterSensitiveLog)
    .ser(se_GenerateRandomCommand)
    .de(de_GenerateRandomCommand)
    .build() {
}

class GetKeyPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "GetKeyPolicy", {})
    .n("KMSClient", "GetKeyPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetKeyPolicyCommand)
    .de(de_GetKeyPolicyCommand)
    .build() {
}

class GetKeyRotationStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "GetKeyRotationStatus", {})
    .n("KMSClient", "GetKeyRotationStatusCommand")
    .f(void 0, void 0)
    .ser(se_GetKeyRotationStatusCommand)
    .de(de_GetKeyRotationStatusCommand)
    .build() {
}

class GetParametersForImportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "GetParametersForImport", {})
    .n("KMSClient", "GetParametersForImportCommand")
    .f(void 0, GetParametersForImportResponseFilterSensitiveLog)
    .ser(se_GetParametersForImportCommand)
    .de(de_GetParametersForImportCommand)
    .build() {
}

class GetPublicKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "GetPublicKey", {})
    .n("KMSClient", "GetPublicKeyCommand")
    .f(void 0, void 0)
    .ser(se_GetPublicKeyCommand)
    .de(de_GetPublicKeyCommand)
    .build() {
}

class ImportKeyMaterialCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "ImportKeyMaterial", {})
    .n("KMSClient", "ImportKeyMaterialCommand")
    .f(void 0, void 0)
    .ser(se_ImportKeyMaterialCommand)
    .de(de_ImportKeyMaterialCommand)
    .build() {
}

class ListAliasesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "ListAliases", {})
    .n("KMSClient", "ListAliasesCommand")
    .f(void 0, void 0)
    .ser(se_ListAliasesCommand)
    .de(de_ListAliasesCommand)
    .build() {
}

class ListGrantsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "ListGrants", {})
    .n("KMSClient", "ListGrantsCommand")
    .f(void 0, void 0)
    .ser(se_ListGrantsCommand)
    .de(de_ListGrantsCommand)
    .build() {
}

class ListKeyPoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "ListKeyPolicies", {})
    .n("KMSClient", "ListKeyPoliciesCommand")
    .f(void 0, void 0)
    .ser(se_ListKeyPoliciesCommand)
    .de(de_ListKeyPoliciesCommand)
    .build() {
}

class ListKeyRotationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "ListKeyRotations", {})
    .n("KMSClient", "ListKeyRotationsCommand")
    .f(void 0, void 0)
    .ser(se_ListKeyRotationsCommand)
    .de(de_ListKeyRotationsCommand)
    .build() {
}

class ListKeysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "ListKeys", {})
    .n("KMSClient", "ListKeysCommand")
    .f(void 0, void 0)
    .ser(se_ListKeysCommand)
    .de(de_ListKeysCommand)
    .build() {
}

class ListResourceTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "ListResourceTags", {})
    .n("KMSClient", "ListResourceTagsCommand")
    .f(void 0, void 0)
    .ser(se_ListResourceTagsCommand)
    .de(de_ListResourceTagsCommand)
    .build() {
}

class ListRetirableGrantsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "ListRetirableGrants", {})
    .n("KMSClient", "ListRetirableGrantsCommand")
    .f(void 0, void 0)
    .ser(se_ListRetirableGrantsCommand)
    .de(de_ListRetirableGrantsCommand)
    .build() {
}

class PutKeyPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "PutKeyPolicy", {})
    .n("KMSClient", "PutKeyPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutKeyPolicyCommand)
    .de(de_PutKeyPolicyCommand)
    .build() {
}

class ReEncryptCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "ReEncrypt", {})
    .n("KMSClient", "ReEncryptCommand")
    .f(void 0, void 0)
    .ser(se_ReEncryptCommand)
    .de(de_ReEncryptCommand)
    .build() {
}

class ReplicateKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "ReplicateKey", {})
    .n("KMSClient", "ReplicateKeyCommand")
    .f(void 0, void 0)
    .ser(se_ReplicateKeyCommand)
    .de(de_ReplicateKeyCommand)
    .build() {
}

class RetireGrantCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "RetireGrant", {})
    .n("KMSClient", "RetireGrantCommand")
    .f(void 0, void 0)
    .ser(se_RetireGrantCommand)
    .de(de_RetireGrantCommand)
    .build() {
}

class RevokeGrantCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "RevokeGrant", {})
    .n("KMSClient", "RevokeGrantCommand")
    .f(void 0, void 0)
    .ser(se_RevokeGrantCommand)
    .de(de_RevokeGrantCommand)
    .build() {
}

class RotateKeyOnDemandCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "RotateKeyOnDemand", {})
    .n("KMSClient", "RotateKeyOnDemandCommand")
    .f(void 0, void 0)
    .ser(se_RotateKeyOnDemandCommand)
    .de(de_RotateKeyOnDemandCommand)
    .build() {
}

class ScheduleKeyDeletionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "ScheduleKeyDeletion", {})
    .n("KMSClient", "ScheduleKeyDeletionCommand")
    .f(void 0, void 0)
    .ser(se_ScheduleKeyDeletionCommand)
    .de(de_ScheduleKeyDeletionCommand)
    .build() {
}

class SignCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "Sign", {})
    .n("KMSClient", "SignCommand")
    .f(SignRequestFilterSensitiveLog, void 0)
    .ser(se_SignCommand)
    .de(de_SignCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "TagResource", {})
    .n("KMSClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "UntagResource", {})
    .n("KMSClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateAliasCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "UpdateAlias", {})
    .n("KMSClient", "UpdateAliasCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAliasCommand)
    .de(de_UpdateAliasCommand)
    .build() {
}

class UpdateCustomKeyStoreCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "UpdateCustomKeyStore", {})
    .n("KMSClient", "UpdateCustomKeyStoreCommand")
    .f(UpdateCustomKeyStoreRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateCustomKeyStoreCommand)
    .de(de_UpdateCustomKeyStoreCommand)
    .build() {
}

class UpdateKeyDescriptionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "UpdateKeyDescription", {})
    .n("KMSClient", "UpdateKeyDescriptionCommand")
    .f(void 0, void 0)
    .ser(se_UpdateKeyDescriptionCommand)
    .de(de_UpdateKeyDescriptionCommand)
    .build() {
}

class UpdatePrimaryRegionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "UpdatePrimaryRegion", {})
    .n("KMSClient", "UpdatePrimaryRegionCommand")
    .f(void 0, void 0)
    .ser(se_UpdatePrimaryRegionCommand)
    .de(de_UpdatePrimaryRegionCommand)
    .build() {
}

class VerifyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "Verify", {})
    .n("KMSClient", "VerifyCommand")
    .f(VerifyRequestFilterSensitiveLog, void 0)
    .ser(se_VerifyCommand)
    .de(de_VerifyCommand)
    .build() {
}

class VerifyMacCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("TrentService", "VerifyMac", {})
    .n("KMSClient", "VerifyMacCommand")
    .f(VerifyMacRequestFilterSensitiveLog, void 0)
    .ser(se_VerifyMacCommand)
    .de(de_VerifyMacCommand)
    .build() {
}

const commands = {
    CancelKeyDeletionCommand,
    ConnectCustomKeyStoreCommand,
    CreateAliasCommand,
    CreateCustomKeyStoreCommand,
    CreateGrantCommand,
    CreateKeyCommand,
    DecryptCommand,
    DeleteAliasCommand,
    DeleteCustomKeyStoreCommand,
    DeleteImportedKeyMaterialCommand,
    DeriveSharedSecretCommand,
    DescribeCustomKeyStoresCommand,
    DescribeKeyCommand,
    DisableKeyCommand,
    DisableKeyRotationCommand,
    DisconnectCustomKeyStoreCommand,
    EnableKeyCommand,
    EnableKeyRotationCommand,
    EncryptCommand,
    GenerateDataKeyCommand,
    GenerateDataKeyPairCommand,
    GenerateDataKeyPairWithoutPlaintextCommand,
    GenerateDataKeyWithoutPlaintextCommand,
    GenerateMacCommand,
    GenerateRandomCommand,
    GetKeyPolicyCommand,
    GetKeyRotationStatusCommand,
    GetParametersForImportCommand,
    GetPublicKeyCommand,
    ImportKeyMaterialCommand,
    ListAliasesCommand,
    ListGrantsCommand,
    ListKeyPoliciesCommand,
    ListKeyRotationsCommand,
    ListKeysCommand,
    ListResourceTagsCommand,
    ListRetirableGrantsCommand,
    PutKeyPolicyCommand,
    ReEncryptCommand,
    ReplicateKeyCommand,
    RetireGrantCommand,
    RevokeGrantCommand,
    RotateKeyOnDemandCommand,
    ScheduleKeyDeletionCommand,
    SignCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateAliasCommand,
    UpdateCustomKeyStoreCommand,
    UpdateKeyDescriptionCommand,
    UpdatePrimaryRegionCommand,
    VerifyCommand,
    VerifyMacCommand,
};
class KMS extends KMSClient {
}
smithyClient.createAggregatedClient(commands, KMS);

const paginateDescribeCustomKeyStores = core.createPaginator(KMSClient, DescribeCustomKeyStoresCommand, "Marker", "NextMarker", "Limit");

const paginateListAliases = core.createPaginator(KMSClient, ListAliasesCommand, "Marker", "NextMarker", "Limit");

const paginateListGrants = core.createPaginator(KMSClient, ListGrantsCommand, "Marker", "NextMarker", "Limit");

const paginateListKeyPolicies = core.createPaginator(KMSClient, ListKeyPoliciesCommand, "Marker", "NextMarker", "Limit");

const paginateListKeyRotations = core.createPaginator(KMSClient, ListKeyRotationsCommand, "Marker", "NextMarker", "Limit");

const paginateListKeys = core.createPaginator(KMSClient, ListKeysCommand, "Marker", "NextMarker", "Limit");

const paginateListResourceTags = core.createPaginator(KMSClient, ListResourceTagsCommand, "Marker", "NextMarker", "Limit");

const paginateListRetirableGrants = core.createPaginator(KMSClient, ListRetirableGrantsCommand, "Marker", "NextMarker", "Limit");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AlgorithmSpec = AlgorithmSpec;
exports.AlreadyExistsException = AlreadyExistsException;
exports.CancelKeyDeletionCommand = CancelKeyDeletionCommand;
exports.CloudHsmClusterInUseException = CloudHsmClusterInUseException;
exports.CloudHsmClusterInvalidConfigurationException = CloudHsmClusterInvalidConfigurationException;
exports.CloudHsmClusterNotActiveException = CloudHsmClusterNotActiveException;
exports.CloudHsmClusterNotFoundException = CloudHsmClusterNotFoundException;
exports.CloudHsmClusterNotRelatedException = CloudHsmClusterNotRelatedException;
exports.ConflictException = ConflictException;
exports.ConnectCustomKeyStoreCommand = ConnectCustomKeyStoreCommand;
exports.ConnectionErrorCodeType = ConnectionErrorCodeType;
exports.ConnectionStateType = ConnectionStateType;
exports.CreateAliasCommand = CreateAliasCommand;
exports.CreateCustomKeyStoreCommand = CreateCustomKeyStoreCommand;
exports.CreateCustomKeyStoreRequestFilterSensitiveLog = CreateCustomKeyStoreRequestFilterSensitiveLog;
exports.CreateGrantCommand = CreateGrantCommand;
exports.CreateKeyCommand = CreateKeyCommand;
exports.CustomKeyStoreHasCMKsException = CustomKeyStoreHasCMKsException;
exports.CustomKeyStoreInvalidStateException = CustomKeyStoreInvalidStateException;
exports.CustomKeyStoreNameInUseException = CustomKeyStoreNameInUseException;
exports.CustomKeyStoreNotFoundException = CustomKeyStoreNotFoundException;
exports.CustomKeyStoreType = CustomKeyStoreType;
exports.CustomKeyStoresListEntryFilterSensitiveLog = CustomKeyStoresListEntryFilterSensitiveLog;
exports.CustomerMasterKeySpec = CustomerMasterKeySpec;
exports.DataKeyPairSpec = DataKeyPairSpec;
exports.DataKeySpec = DataKeySpec;
exports.DecryptCommand = DecryptCommand;
exports.DecryptResponseFilterSensitiveLog = DecryptResponseFilterSensitiveLog;
exports.DeleteAliasCommand = DeleteAliasCommand;
exports.DeleteCustomKeyStoreCommand = DeleteCustomKeyStoreCommand;
exports.DeleteImportedKeyMaterialCommand = DeleteImportedKeyMaterialCommand;
exports.DependencyTimeoutException = DependencyTimeoutException;
exports.DeriveSharedSecretCommand = DeriveSharedSecretCommand;
exports.DeriveSharedSecretResponseFilterSensitiveLog = DeriveSharedSecretResponseFilterSensitiveLog;
exports.DescribeCustomKeyStoresCommand = DescribeCustomKeyStoresCommand;
exports.DescribeCustomKeyStoresResponseFilterSensitiveLog = DescribeCustomKeyStoresResponseFilterSensitiveLog;
exports.DescribeKeyCommand = DescribeKeyCommand;
exports.DisableKeyCommand = DisableKeyCommand;
exports.DisableKeyRotationCommand = DisableKeyRotationCommand;
exports.DisabledException = DisabledException;
exports.DisconnectCustomKeyStoreCommand = DisconnectCustomKeyStoreCommand;
exports.DryRunOperationException = DryRunOperationException;
exports.EnableKeyCommand = EnableKeyCommand;
exports.EnableKeyRotationCommand = EnableKeyRotationCommand;
exports.EncryptCommand = EncryptCommand;
exports.EncryptRequestFilterSensitiveLog = EncryptRequestFilterSensitiveLog;
exports.EncryptionAlgorithmSpec = EncryptionAlgorithmSpec;
exports.ExpirationModelType = ExpirationModelType;
exports.ExpiredImportTokenException = ExpiredImportTokenException;
exports.GenerateDataKeyCommand = GenerateDataKeyCommand;
exports.GenerateDataKeyPairCommand = GenerateDataKeyPairCommand;
exports.GenerateDataKeyPairResponseFilterSensitiveLog = GenerateDataKeyPairResponseFilterSensitiveLog;
exports.GenerateDataKeyPairWithoutPlaintextCommand = GenerateDataKeyPairWithoutPlaintextCommand;
exports.GenerateDataKeyResponseFilterSensitiveLog = GenerateDataKeyResponseFilterSensitiveLog;
exports.GenerateDataKeyWithoutPlaintextCommand = GenerateDataKeyWithoutPlaintextCommand;
exports.GenerateMacCommand = GenerateMacCommand;
exports.GenerateMacRequestFilterSensitiveLog = GenerateMacRequestFilterSensitiveLog;
exports.GenerateRandomCommand = GenerateRandomCommand;
exports.GenerateRandomResponseFilterSensitiveLog = GenerateRandomResponseFilterSensitiveLog;
exports.GetKeyPolicyCommand = GetKeyPolicyCommand;
exports.GetKeyRotationStatusCommand = GetKeyRotationStatusCommand;
exports.GetParametersForImportCommand = GetParametersForImportCommand;
exports.GetParametersForImportResponseFilterSensitiveLog = GetParametersForImportResponseFilterSensitiveLog;
exports.GetPublicKeyCommand = GetPublicKeyCommand;
exports.GrantOperation = GrantOperation;
exports.ImportKeyMaterialCommand = ImportKeyMaterialCommand;
exports.ImportState = ImportState;
exports.ImportType = ImportType;
exports.IncludeKeyMaterial = IncludeKeyMaterial;
exports.IncorrectKeyException = IncorrectKeyException;
exports.IncorrectKeyMaterialException = IncorrectKeyMaterialException;
exports.IncorrectTrustAnchorException = IncorrectTrustAnchorException;
exports.InvalidAliasNameException = InvalidAliasNameException;
exports.InvalidArnException = InvalidArnException;
exports.InvalidCiphertextException = InvalidCiphertextException;
exports.InvalidGrantIdException = InvalidGrantIdException;
exports.InvalidGrantTokenException = InvalidGrantTokenException;
exports.InvalidImportTokenException = InvalidImportTokenException;
exports.InvalidKeyUsageException = InvalidKeyUsageException;
exports.InvalidMarkerException = InvalidMarkerException;
exports.KMS = KMS;
exports.KMSClient = KMSClient;
exports.KMSInternalException = KMSInternalException;
exports.KMSInvalidMacException = KMSInvalidMacException;
exports.KMSInvalidSignatureException = KMSInvalidSignatureException;
exports.KMSInvalidStateException = KMSInvalidStateException;
exports.KMSServiceException = KMSServiceException;
exports.KeyAgreementAlgorithmSpec = KeyAgreementAlgorithmSpec;
exports.KeyEncryptionMechanism = KeyEncryptionMechanism;
exports.KeyManagerType = KeyManagerType;
exports.KeyMaterialState = KeyMaterialState;
exports.KeySpec = KeySpec;
exports.KeyState = KeyState;
exports.KeyUnavailableException = KeyUnavailableException;
exports.KeyUsageType = KeyUsageType;
exports.LimitExceededException = LimitExceededException;
exports.ListAliasesCommand = ListAliasesCommand;
exports.ListGrantsCommand = ListGrantsCommand;
exports.ListKeyPoliciesCommand = ListKeyPoliciesCommand;
exports.ListKeyRotationsCommand = ListKeyRotationsCommand;
exports.ListKeysCommand = ListKeysCommand;
exports.ListResourceTagsCommand = ListResourceTagsCommand;
exports.ListRetirableGrantsCommand = ListRetirableGrantsCommand;
exports.MacAlgorithmSpec = MacAlgorithmSpec;
exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
exports.MessageType = MessageType;
exports.MultiRegionKeyType = MultiRegionKeyType;
exports.NotFoundException = NotFoundException;
exports.OriginType = OriginType;
exports.PutKeyPolicyCommand = PutKeyPolicyCommand;
exports.ReEncryptCommand = ReEncryptCommand;
exports.ReplicateKeyCommand = ReplicateKeyCommand;
exports.RetireGrantCommand = RetireGrantCommand;
exports.RevokeGrantCommand = RevokeGrantCommand;
exports.RotateKeyOnDemandCommand = RotateKeyOnDemandCommand;
exports.RotationType = RotationType;
exports.ScheduleKeyDeletionCommand = ScheduleKeyDeletionCommand;
exports.SignCommand = SignCommand;
exports.SignRequestFilterSensitiveLog = SignRequestFilterSensitiveLog;
exports.SigningAlgorithmSpec = SigningAlgorithmSpec;
exports.TagException = TagException;
exports.TagResourceCommand = TagResourceCommand;
exports.UnsupportedOperationException = UnsupportedOperationException;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateAliasCommand = UpdateAliasCommand;
exports.UpdateCustomKeyStoreCommand = UpdateCustomKeyStoreCommand;
exports.UpdateCustomKeyStoreRequestFilterSensitiveLog = UpdateCustomKeyStoreRequestFilterSensitiveLog;
exports.UpdateKeyDescriptionCommand = UpdateKeyDescriptionCommand;
exports.UpdatePrimaryRegionCommand = UpdatePrimaryRegionCommand;
exports.VerifyCommand = VerifyCommand;
exports.VerifyMacCommand = VerifyMacCommand;
exports.VerifyMacRequestFilterSensitiveLog = VerifyMacRequestFilterSensitiveLog;
exports.VerifyRequestFilterSensitiveLog = VerifyRequestFilterSensitiveLog;
exports.WrappingKeySpec = WrappingKeySpec;
exports.XksKeyAlreadyInUseException = XksKeyAlreadyInUseException;
exports.XksKeyInvalidConfigurationException = XksKeyInvalidConfigurationException;
exports.XksKeyNotFoundException = XksKeyNotFoundException;
exports.XksProxyAuthenticationCredentialTypeFilterSensitiveLog = XksProxyAuthenticationCredentialTypeFilterSensitiveLog;
exports.XksProxyConfigurationTypeFilterSensitiveLog = XksProxyConfigurationTypeFilterSensitiveLog;
exports.XksProxyConnectivityType = XksProxyConnectivityType;
exports.XksProxyIncorrectAuthenticationCredentialException = XksProxyIncorrectAuthenticationCredentialException;
exports.XksProxyInvalidConfigurationException = XksProxyInvalidConfigurationException;
exports.XksProxyInvalidResponseException = XksProxyInvalidResponseException;
exports.XksProxyUriEndpointInUseException = XksProxyUriEndpointInUseException;
exports.XksProxyUriInUseException = XksProxyUriInUseException;
exports.XksProxyUriUnreachableException = XksProxyUriUnreachableException;
exports.XksProxyVpcEndpointServiceInUseException = XksProxyVpcEndpointServiceInUseException;
exports.XksProxyVpcEndpointServiceInvalidConfigurationException = XksProxyVpcEndpointServiceInvalidConfigurationException;
exports.XksProxyVpcEndpointServiceNotFoundException = XksProxyVpcEndpointServiceNotFoundException;
exports.paginateDescribeCustomKeyStores = paginateDescribeCustomKeyStores;
exports.paginateListAliases = paginateListAliases;
exports.paginateListGrants = paginateListGrants;
exports.paginateListKeyPolicies = paginateListKeyPolicies;
exports.paginateListKeyRotations = paginateListKeyRotations;
exports.paginateListKeys = paginateListKeys;
exports.paginateListResourceTags = paginateListResourceTags;
exports.paginateListRetirableGrants = paginateListRetirableGrants;
