'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "appsync",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class AppSyncClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultAppSyncHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class AppSyncServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, AppSyncServiceException.prototype);
    }
}

class AccessDeniedException extends AppSyncServiceException {
    name = "AccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
const AuthenticationType = {
    AMAZON_COGNITO_USER_POOLS: "AMAZON_COGNITO_USER_POOLS",
    API_KEY: "API_KEY",
    AWS_IAM: "AWS_IAM",
    AWS_LAMBDA: "AWS_LAMBDA",
    OPENID_CONNECT: "OPENID_CONNECT",
};
const EventLogLevel = {
    ALL: "ALL",
    DEBUG: "DEBUG",
    ERROR: "ERROR",
    INFO: "INFO",
    NONE: "NONE",
};
const AssociationStatus = {
    Failed: "FAILED",
    Processing: "PROCESSING",
    Success: "SUCCESS",
};
const ApiCachingBehavior = {
    FULL_REQUEST_CACHING: "FULL_REQUEST_CACHING",
    OPERATION_LEVEL_CACHING: "OPERATION_LEVEL_CACHING",
    PER_RESOLVER_CACHING: "PER_RESOLVER_CACHING",
};
const CacheHealthMetricsConfig = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const ApiCacheStatus = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    MODIFYING: "MODIFYING",
};
const ApiCacheType = {
    LARGE: "LARGE",
    LARGE_12X: "LARGE_12X",
    LARGE_2X: "LARGE_2X",
    LARGE_4X: "LARGE_4X",
    LARGE_8X: "LARGE_8X",
    MEDIUM: "MEDIUM",
    R4_2XLARGE: "R4_2XLARGE",
    R4_4XLARGE: "R4_4XLARGE",
    R4_8XLARGE: "R4_8XLARGE",
    R4_LARGE: "R4_LARGE",
    R4_XLARGE: "R4_XLARGE",
    SMALL: "SMALL",
    T2_MEDIUM: "T2_MEDIUM",
    T2_SMALL: "T2_SMALL",
    XLARGE: "XLARGE",
};
class ApiKeyLimitExceededException extends AppSyncServiceException {
    name = "ApiKeyLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ApiKeyLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ApiKeyLimitExceededException.prototype);
    }
}
class ApiKeyValidityOutOfBoundsException extends AppSyncServiceException {
    name = "ApiKeyValidityOutOfBoundsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ApiKeyValidityOutOfBoundsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ApiKeyValidityOutOfBoundsException.prototype);
    }
}
class ApiLimitExceededException extends AppSyncServiceException {
    name = "ApiLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ApiLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ApiLimitExceededException.prototype);
    }
}
const RuntimeName = {
    APPSYNC_JS: "APPSYNC_JS",
};
const BadRequestReason = {
    CODE_ERROR: "CODE_ERROR",
};
class BadRequestException extends AppSyncServiceException {
    name = "BadRequestException";
    $fault = "client";
    reason;
    detail;
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.reason = opts.reason;
        this.detail = opts.detail;
    }
}
class InternalFailureException extends AppSyncServiceException {
    name = "InternalFailureException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalFailureException.prototype);
    }
}
class NotFoundException extends AppSyncServiceException {
    name = "NotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
const MergeType = {
    AUTO_MERGE: "AUTO_MERGE",
    MANUAL_MERGE: "MANUAL_MERGE",
};
const SourceApiAssociationStatus = {
    AUTO_MERGE_SCHEDULE_FAILED: "AUTO_MERGE_SCHEDULE_FAILED",
    DELETION_FAILED: "DELETION_FAILED",
    DELETION_IN_PROGRESS: "DELETION_IN_PROGRESS",
    DELETION_SCHEDULED: "DELETION_SCHEDULED",
    MERGE_FAILED: "MERGE_FAILED",
    MERGE_IN_PROGRESS: "MERGE_IN_PROGRESS",
    MERGE_SCHEDULED: "MERGE_SCHEDULED",
    MERGE_SUCCESS: "MERGE_SUCCESS",
};
class ConcurrentModificationException extends AppSyncServiceException {
    name = "ConcurrentModificationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
class LimitExceededException extends AppSyncServiceException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class UnauthorizedException extends AppSyncServiceException {
    name = "UnauthorizedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
    }
}
const AuthorizationType = {
    AWS_IAM: "AWS_IAM",
};
class ServiceQuotaExceededException extends AppSyncServiceException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
class ConflictException extends AppSyncServiceException {
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
const HandlerBehavior = {
    CODE: "CODE",
    DIRECT: "DIRECT",
};
const InvokeType = {
    EVENT: "EVENT",
    REQUEST_RESPONSE: "REQUEST_RESPONSE",
};
const DataSourceLevelMetricsConfig = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const RelationalDatabaseSourceType = {
    RDS_HTTP_ENDPOINT: "RDS_HTTP_ENDPOINT",
};
const DataSourceType = {
    AMAZON_BEDROCK_RUNTIME: "AMAZON_BEDROCK_RUNTIME",
    AMAZON_DYNAMODB: "AMAZON_DYNAMODB",
    AMAZON_ELASTICSEARCH: "AMAZON_ELASTICSEARCH",
    AMAZON_EVENTBRIDGE: "AMAZON_EVENTBRIDGE",
    AMAZON_OPENSEARCH_SERVICE: "AMAZON_OPENSEARCH_SERVICE",
    AWS_LAMBDA: "AWS_LAMBDA",
    HTTP: "HTTP",
    NONE: "NONE",
    RELATIONAL_DATABASE: "RELATIONAL_DATABASE",
};
const ConflictDetectionType = {
    NONE: "NONE",
    VERSION: "VERSION",
};
const ConflictHandlerType = {
    AUTOMERGE: "AUTOMERGE",
    LAMBDA: "LAMBDA",
    NONE: "NONE",
    OPTIMISTIC_CONCURRENCY: "OPTIMISTIC_CONCURRENCY",
};
const GraphQLApiType = {
    GRAPHQL: "GRAPHQL",
    MERGED: "MERGED",
};
const DataSourceLevelMetricsBehavior = {
    FULL_REQUEST_DATA_SOURCE_METRICS: "FULL_REQUEST_DATA_SOURCE_METRICS",
    PER_DATA_SOURCE_METRICS: "PER_DATA_SOURCE_METRICS",
};
const OperationLevelMetricsConfig = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const ResolverLevelMetricsBehavior = {
    FULL_REQUEST_RESOLVER_METRICS: "FULL_REQUEST_RESOLVER_METRICS",
    PER_RESOLVER_METRICS: "PER_RESOLVER_METRICS",
};
const GraphQLApiIntrospectionConfig = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const FieldLogLevel = {
    ALL: "ALL",
    DEBUG: "DEBUG",
    ERROR: "ERROR",
    INFO: "INFO",
    NONE: "NONE",
};
const DefaultAction = {
    ALLOW: "ALLOW",
    DENY: "DENY",
};
const GraphQLApiVisibility = {
    GLOBAL: "GLOBAL",
    PRIVATE: "PRIVATE",
};
const ResolverKind = {
    PIPELINE: "PIPELINE",
    UNIT: "UNIT",
};
const ResolverLevelMetricsConfig = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const TypeDefinitionFormat = {
    JSON: "JSON",
    SDL: "SDL",
};
const DataSourceIntrospectionStatus = {
    FAILED: "FAILED",
    PROCESSING: "PROCESSING",
    SUCCESS: "SUCCESS",
};
const OutputType = {
    JSON: "JSON",
    SDL: "SDL",
};
class GraphQLSchemaException extends AppSyncServiceException {
    name = "GraphQLSchemaException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "GraphQLSchemaException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, GraphQLSchemaException.prototype);
    }
}
const SchemaStatus = {
    Active: "ACTIVE",
    Deleting: "DELETING",
    Failed: "FAILED",
    NotApplicable: "NOT_APPLICABLE",
    Processing: "PROCESSING",
    Success: "SUCCESS",
};
const Ownership = {
    CURRENT_ACCOUNT: "CURRENT_ACCOUNT",
    OTHER_ACCOUNTS: "OTHER_ACCOUNTS",
};

const se_AssociateApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/domainnames/{domainName}/apiassociation");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        apiId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_AssociateMergedGraphqlApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations");
    b.p("sourceApiIdentifier", () => input.sourceApiIdentifier, "{sourceApiIdentifier}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        description: [],
        mergedApiIdentifier: [],
        sourceApiAssociationConfig: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_AssociateSourceGraphqlApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations");
    b.p("mergedApiIdentifier", () => input.mergedApiIdentifier, "{mergedApiIdentifier}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        description: [],
        sourceApiAssociationConfig: (_) => smithyClient._json(_),
        sourceApiIdentifier: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v2/apis");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        eventConfig: (_) => smithyClient._json(_),
        name: [],
        ownerContact: [],
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateApiCacheCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/ApiCaches");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        apiCachingBehavior: [],
        atRestEncryptionEnabled: [],
        healthMetricsConfig: [],
        transitEncryptionEnabled: [],
        ttl: [],
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateApiKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/apikeys");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        description: [],
        expires: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateChannelNamespaceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v2/apis/{apiId}/channelNamespaces");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        codeHandlers: [],
        handlerConfigs: (_) => smithyClient._json(_),
        name: [],
        publishAuthModes: (_) => smithyClient._json(_),
        subscribeAuthModes: (_) => smithyClient._json(_),
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateDataSourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/datasources");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        description: [],
        dynamodbConfig: (_) => smithyClient._json(_),
        elasticsearchConfig: (_) => smithyClient._json(_),
        eventBridgeConfig: (_) => smithyClient._json(_),
        httpConfig: (_) => smithyClient._json(_),
        lambdaConfig: (_) => smithyClient._json(_),
        metricsConfig: [],
        name: [],
        openSearchServiceConfig: (_) => smithyClient._json(_),
        relationalDatabaseConfig: (_) => smithyClient._json(_),
        serviceRoleArn: [],
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateDomainNameCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/domainnames");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        certificateArn: [],
        description: [],
        domainName: [],
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateFunctionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/functions");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        code: [],
        dataSourceName: [],
        description: [],
        functionVersion: [],
        maxBatchSize: [],
        name: [],
        requestMappingTemplate: [],
        responseMappingTemplate: [],
        runtime: (_) => smithyClient._json(_),
        syncConfig: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateGraphqlApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        additionalAuthenticationProviders: (_) => smithyClient._json(_),
        apiType: [],
        authenticationType: [],
        enhancedMetricsConfig: (_) => smithyClient._json(_),
        introspectionConfig: [],
        lambdaAuthorizerConfig: (_) => smithyClient._json(_),
        logConfig: (_) => smithyClient._json(_),
        mergedApiExecutionRoleArn: [],
        name: [],
        openIDConnectConfig: (_) => smithyClient._json(_),
        ownerContact: [],
        queryDepthLimit: [],
        resolverCountLimit: [],
        tags: (_) => smithyClient._json(_),
        userPoolConfig: (_) => smithyClient._json(_),
        visibility: [],
        xrayEnabled: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateResolverCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/types/{typeName}/resolvers");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        cachingConfig: (_) => smithyClient._json(_),
        code: [],
        dataSourceName: [],
        fieldName: [],
        kind: [],
        maxBatchSize: [],
        metricsConfig: [],
        pipelineConfig: (_) => smithyClient._json(_),
        requestMappingTemplate: [],
        responseMappingTemplate: [],
        runtime: (_) => smithyClient._json(_),
        syncConfig: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateTypeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/types");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        definition: [],
        format: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DeleteApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v2/apis/{apiId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteApiCacheCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/ApiCaches");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteApiKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/apikeys/{id}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteChannelNamespaceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v2/apis/{apiId}/channelNamespaces/{name}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("name", () => input.name, "{name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteDataSourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/datasources/{name}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("name", () => input.name, "{name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteDomainNameCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/domainnames/{domainName}");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteFunctionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/functions/{functionId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("functionId", () => input.functionId, "{functionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteGraphqlApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteResolverCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    b.p("fieldName", () => input.fieldName, "{fieldName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteTypeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/types/{typeName}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DisassociateApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/domainnames/{domainName}/apiassociation");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DisassociateMergedGraphqlApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations/{associationId}");
    b.p("sourceApiIdentifier", () => input.sourceApiIdentifier, "{sourceApiIdentifier}", false);
    b.p("associationId", () => input.associationId, "{associationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DisassociateSourceGraphqlApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}");
    b.p("mergedApiIdentifier", () => input.mergedApiIdentifier, "{mergedApiIdentifier}", false);
    b.p("associationId", () => input.associationId, "{associationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_EvaluateCodeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/dataplane-evaluatecode");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        code: [],
        context: [],
        function: [],
        runtime: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_EvaluateMappingTemplateCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/dataplane-evaluatetemplate");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        context: [],
        template: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_FlushApiCacheCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/FlushCache");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_GetApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v2/apis/{apiId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetApiAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/domainnames/{domainName}/apiassociation");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetApiCacheCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/ApiCaches");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetChannelNamespaceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v2/apis/{apiId}/channelNamespaces/{name}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("name", () => input.name, "{name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetDataSourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/datasources/{name}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("name", () => input.name, "{name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetDataSourceIntrospectionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/datasources/introspections/{introspectionId}");
    b.p("introspectionId", () => input.introspectionId, "{introspectionId}", false);
    const query = smithyClient.map({
        [_iMSDL]: [() => input.includeModelsSDL !== void 0, () => input[_iMSDL].toString()],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetDomainNameCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/domainnames/{domainName}");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetFunctionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/functions/{functionId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("functionId", () => input.functionId, "{functionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetGraphqlApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetGraphqlApiEnvironmentVariablesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/environmentVariables");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetIntrospectionSchemaCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/schema");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = smithyClient.map({
        [_f]: [, smithyClient.expectNonNull(input[_f], `format`)],
        [_iD]: [() => input.includeDirectives !== void 0, () => input[_iD].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetResolverCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    b.p("fieldName", () => input.fieldName, "{fieldName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetSchemaCreationStatusCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/schemacreation");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetSourceApiAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}");
    b.p("mergedApiIdentifier", () => input.mergedApiIdentifier, "{mergedApiIdentifier}", false);
    b.p("associationId", () => input.associationId, "{associationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetTypeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/types/{typeName}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    const query = smithyClient.map({
        [_f]: [, smithyClient.expectNonNull(input[_f], `format`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListApiKeysCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/apikeys");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListApisCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v2/apis");
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListChannelNamespacesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v2/apis/{apiId}/channelNamespaces");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListDataSourcesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/datasources");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListDomainNamesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/domainnames");
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListFunctionsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/functions");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListGraphqlApisCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis");
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_aT]: [, input[_aT]],
        [_o]: [, input[_o]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListResolversCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/types/{typeName}/resolvers");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListResolversByFunctionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/functions/{functionId}/resolvers");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("functionId", () => input.functionId, "{functionId}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListSourceApiAssociationsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/sourceApiAssociations");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListTypesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/apis/{apiId}/types");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    const query = smithyClient.map({
        [_f]: [, smithyClient.expectNonNull(input[_f], `format`)],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTypesByAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/types");
    b.p("mergedApiIdentifier", () => input.mergedApiIdentifier, "{mergedApiIdentifier}", false);
    b.p("associationId", () => input.associationId, "{associationId}", false);
    const query = smithyClient.map({
        [_f]: [, smithyClient.expectNonNull(input[_f], `format`)],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_PutGraphqlApiEnvironmentVariablesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/environmentVariables");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        environmentVariables: (_) => smithyClient._json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_StartDataSourceIntrospectionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/datasources/introspections");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        rdsDataApiConfig: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StartSchemaCreationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/schemacreation");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        definition: (_) => context.base64Encoder(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StartSchemaMergeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/merge");
    b.p("associationId", () => input.associationId, "{associationId}", false);
    b.p("mergedApiIdentifier", () => input.mergedApiIdentifier, "{mergedApiIdentifier}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_TagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UntagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/v1/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = smithyClient.map({
        [_tK]: [smithyClient.expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v2/apis/{apiId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        eventConfig: (_) => smithyClient._json(_),
        name: [],
        ownerContact: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateApiCacheCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/ApiCaches/update");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        apiCachingBehavior: [],
        healthMetricsConfig: [],
        ttl: [],
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateApiKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/apikeys/{id}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        description: [],
        expires: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateChannelNamespaceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v2/apis/{apiId}/channelNamespaces/{name}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("name", () => input.name, "{name}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        codeHandlers: [],
        handlerConfigs: (_) => smithyClient._json(_),
        publishAuthModes: (_) => smithyClient._json(_),
        subscribeAuthModes: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateDataSourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/datasources/{name}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("name", () => input.name, "{name}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        description: [],
        dynamodbConfig: (_) => smithyClient._json(_),
        elasticsearchConfig: (_) => smithyClient._json(_),
        eventBridgeConfig: (_) => smithyClient._json(_),
        httpConfig: (_) => smithyClient._json(_),
        lambdaConfig: (_) => smithyClient._json(_),
        metricsConfig: [],
        openSearchServiceConfig: (_) => smithyClient._json(_),
        relationalDatabaseConfig: (_) => smithyClient._json(_),
        serviceRoleArn: [],
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateDomainNameCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/domainnames/{domainName}");
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        description: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateFunctionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/functions/{functionId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("functionId", () => input.functionId, "{functionId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        code: [],
        dataSourceName: [],
        description: [],
        functionVersion: [],
        maxBatchSize: [],
        name: [],
        requestMappingTemplate: [],
        responseMappingTemplate: [],
        runtime: (_) => smithyClient._json(_),
        syncConfig: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateGraphqlApiCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        additionalAuthenticationProviders: (_) => smithyClient._json(_),
        authenticationType: [],
        enhancedMetricsConfig: (_) => smithyClient._json(_),
        introspectionConfig: [],
        lambdaAuthorizerConfig: (_) => smithyClient._json(_),
        logConfig: (_) => smithyClient._json(_),
        mergedApiExecutionRoleArn: [],
        name: [],
        openIDConnectConfig: (_) => smithyClient._json(_),
        ownerContact: [],
        queryDepthLimit: [],
        resolverCountLimit: [],
        userPoolConfig: (_) => smithyClient._json(_),
        xrayEnabled: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateResolverCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    b.p("fieldName", () => input.fieldName, "{fieldName}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        cachingConfig: (_) => smithyClient._json(_),
        code: [],
        dataSourceName: [],
        kind: [],
        maxBatchSize: [],
        metricsConfig: [],
        pipelineConfig: (_) => smithyClient._json(_),
        requestMappingTemplate: [],
        responseMappingTemplate: [],
        runtime: (_) => smithyClient._json(_),
        syncConfig: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateSourceApiAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}");
    b.p("associationId", () => input.associationId, "{associationId}", false);
    b.p("mergedApiIdentifier", () => input.mergedApiIdentifier, "{mergedApiIdentifier}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        description: [],
        sourceApiAssociationConfig: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateTypeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apis/{apiId}/types/{typeName}");
    b.p("apiId", () => input.apiId, "{apiId}", false);
    b.p("typeName", () => input.typeName, "{typeName}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        definition: [],
        format: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const de_AssociateApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiAssociation: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_AssociateMergedGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        sourceApiAssociation: (_) => de_SourceApiAssociation(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_AssociateSourceGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        sourceApiAssociation: (_) => de_SourceApiAssociation(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        api: (_) => de_Api(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateApiCacheCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiCache: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKey: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateChannelNamespaceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        channelNamespace: (_) => de_ChannelNamespace(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        dataSource: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        domainNameConfig: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        functionConfiguration: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        graphqlApi: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateResolverCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        resolver: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateTypeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        type: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeleteApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteApiCacheCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteChannelNamespaceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteResolverCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteTypeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DisassociateApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DisassociateMergedGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        sourceApiAssociationStatus: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DisassociateSourceGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        sourceApiAssociationStatus: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_EvaluateCodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        error: smithyClient._json,
        evaluationResult: smithyClient.expectString,
        logs: smithyClient._json,
        outErrors: smithyClient.expectString,
        stash: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_EvaluateMappingTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        error: smithyClient._json,
        evaluationResult: smithyClient.expectString,
        logs: smithyClient._json,
        outErrors: smithyClient.expectString,
        stash: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_FlushApiCacheCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_GetApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        api: (_) => de_Api(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetApiAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiAssociation: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetApiCacheCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiCache: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetChannelNamespaceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        channelNamespace: (_) => de_ChannelNamespace(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        dataSource: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDataSourceIntrospectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        introspectionId: smithyClient.expectString,
        introspectionResult: (_) => de_DataSourceIntrospectionResult(_),
        introspectionStatus: smithyClient.expectString,
        introspectionStatusDetail: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        domainNameConfig: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        functionConfiguration: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        graphqlApi: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetGraphqlApiEnvironmentVariablesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        environmentVariables: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetIntrospectionSchemaCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = await smithyClient.collectBody(output.body, context);
    contents.schema = data;
    return contents;
};
const de_GetResolverCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        resolver: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetSchemaCreationStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        details: smithyClient.expectString,
        status: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetSourceApiAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        sourceApiAssociation: (_) => de_SourceApiAssociation(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetTypeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        type: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListApiKeysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKeys: smithyClient._json,
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListApisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apis: (_) => de_Apis(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListChannelNamespacesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        channelNamespaces: (_) => de_ChannelNamespaces(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListDataSourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        dataSources: smithyClient._json,
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListDomainNamesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        domainNameConfigs: smithyClient._json,
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListFunctionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        functions: smithyClient._json,
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListGraphqlApisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        graphqlApis: smithyClient._json,
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListResolversCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        nextToken: smithyClient.expectString,
        resolvers: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListResolversByFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        nextToken: smithyClient.expectString,
        resolvers: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListSourceApiAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        nextToken: smithyClient.expectString,
        sourceApiAssociationSummaries: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTypesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        nextToken: smithyClient.expectString,
        types: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTypesByAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        nextToken: smithyClient.expectString,
        types: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_PutGraphqlApiEnvironmentVariablesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        environmentVariables: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartDataSourceIntrospectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        introspectionId: smithyClient.expectString,
        introspectionStatus: smithyClient.expectString,
        introspectionStatusDetail: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartSchemaCreationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        status: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartSchemaMergeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        sourceApiAssociationStatus: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UpdateApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        api: (_) => de_Api(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateApiCacheCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiCache: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apiKey: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateChannelNamespaceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        channelNamespace: (_) => de_ChannelNamespace(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        dataSource: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        domainNameConfig: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        functionConfiguration: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateGraphqlApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        graphqlApi: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateResolverCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        resolver: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateSourceApiAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        sourceApiAssociation: (_) => de_SourceApiAssociation(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateTypeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        type: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.appsync#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput);
        case "BadRequestException":
        case "com.amazonaws.appsync#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput);
        case "InternalFailureException":
        case "com.amazonaws.appsync#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput);
        case "NotFoundException":
        case "com.amazonaws.appsync#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput);
        case "ConcurrentModificationException":
        case "com.amazonaws.appsync#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.appsync#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "UnauthorizedException":
        case "com.amazonaws.appsync#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.appsync#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput);
        case "ApiKeyLimitExceededException":
        case "com.amazonaws.appsync#ApiKeyLimitExceededException":
            throw await de_ApiKeyLimitExceededExceptionRes(parsedOutput);
        case "ApiKeyValidityOutOfBoundsException":
        case "com.amazonaws.appsync#ApiKeyValidityOutOfBoundsException":
            throw await de_ApiKeyValidityOutOfBoundsExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.appsync#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "ApiLimitExceededException":
        case "com.amazonaws.appsync#ApiLimitExceededException":
            throw await de_ApiLimitExceededExceptionRes(parsedOutput);
        case "GraphQLSchemaException":
        case "com.amazonaws.appsync#GraphQLSchemaException":
            throw await de_GraphQLSchemaExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = smithyClient.withBaseException(AppSyncServiceException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ApiKeyLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ApiKeyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ApiKeyValidityOutOfBoundsExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ApiKeyValidityOutOfBoundsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ApiLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ApiLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        detail: smithyClient._json,
        message: smithyClient.expectString,
        reason: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_GraphQLSchemaExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new GraphQLSchemaException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_InternalFailureExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_Api = (output, context) => {
    return smithyClient.take(output, {
        apiArn: smithyClient.expectString,
        apiId: smithyClient.expectString,
        created: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        dns: smithyClient._json,
        eventConfig: smithyClient._json,
        name: smithyClient.expectString,
        ownerContact: smithyClient.expectString,
        tags: smithyClient._json,
        wafWebAclArn: smithyClient.expectString,
        xrayEnabled: smithyClient.expectBoolean,
    });
};
const de_Apis = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Api(entry);
    });
    return retVal;
};
const de_ChannelNamespace = (output, context) => {
    return smithyClient.take(output, {
        apiId: smithyClient.expectString,
        channelNamespaceArn: smithyClient.expectString,
        codeHandlers: smithyClient.expectString,
        created: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        handlerConfigs: smithyClient._json,
        lastModified: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        name: smithyClient.expectString,
        publishAuthModes: smithyClient._json,
        subscribeAuthModes: smithyClient._json,
        tags: smithyClient._json,
    });
};
const de_ChannelNamespaces = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChannelNamespace(entry);
    });
    return retVal;
};
const de_DataSourceIntrospectionModel = (output, context) => {
    return smithyClient.take(output, {
        fields: (_) => de_DataSourceIntrospectionModelFields(_),
        indexes: smithyClient._json,
        name: smithyClient.expectString,
        primaryKey: smithyClient._json,
        sdl: smithyClient.expectString,
    });
};
const de_DataSourceIntrospectionModelField = (output, context) => {
    return smithyClient.take(output, {
        length: smithyClient.expectLong,
        name: smithyClient.expectString,
        type: (_) => de_DataSourceIntrospectionModelFieldType(_),
    });
};
const de_DataSourceIntrospectionModelFields = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSourceIntrospectionModelField(entry);
    });
    return retVal;
};
const de_DataSourceIntrospectionModelFieldType = (output, context) => {
    return smithyClient.take(output, {
        kind: smithyClient.expectString,
        name: smithyClient.expectString,
        type: (_) => de_DataSourceIntrospectionModelFieldType(_),
        values: smithyClient._json,
    });
};
const de_DataSourceIntrospectionModels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSourceIntrospectionModel(entry);
    });
    return retVal;
};
const de_DataSourceIntrospectionResult = (output, context) => {
    return smithyClient.take(output, {
        models: (_) => de_DataSourceIntrospectionModels(_),
        nextToken: smithyClient.expectString,
    });
};
const de_SourceApiAssociation = (output, context) => {
    return smithyClient.take(output, {
        associationArn: smithyClient.expectString,
        associationId: smithyClient.expectString,
        description: smithyClient.expectString,
        lastSuccessfulMergeDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        mergedApiArn: smithyClient.expectString,
        mergedApiId: smithyClient.expectString,
        sourceApiArn: smithyClient.expectString,
        sourceApiAssociationConfig: smithyClient._json,
        sourceApiAssociationStatus: smithyClient.expectString,
        sourceApiAssociationStatusDetail: smithyClient.expectString,
        sourceApiId: smithyClient.expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const _aT = "apiType";
const _f = "format";
const _iD = "includeDirectives";
const _iMSDL = "includeModelsSDL";
const _mR = "maxResults";
const _nT = "nextToken";
const _o = "owner";
const _tK = "tagKeys";

class AssociateApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "AssociateApi", {})
    .n("AppSyncClient", "AssociateApiCommand")
    .f(void 0, void 0)
    .ser(se_AssociateApiCommand)
    .de(de_AssociateApiCommand)
    .build() {
}

class AssociateMergedGraphqlApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "AssociateMergedGraphqlApi", {})
    .n("AppSyncClient", "AssociateMergedGraphqlApiCommand")
    .f(void 0, void 0)
    .ser(se_AssociateMergedGraphqlApiCommand)
    .de(de_AssociateMergedGraphqlApiCommand)
    .build() {
}

class AssociateSourceGraphqlApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "AssociateSourceGraphqlApi", {})
    .n("AppSyncClient", "AssociateSourceGraphqlApiCommand")
    .f(void 0, void 0)
    .ser(se_AssociateSourceGraphqlApiCommand)
    .de(de_AssociateSourceGraphqlApiCommand)
    .build() {
}

class CreateApiCacheCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "CreateApiCache", {})
    .n("AppSyncClient", "CreateApiCacheCommand")
    .f(void 0, void 0)
    .ser(se_CreateApiCacheCommand)
    .de(de_CreateApiCacheCommand)
    .build() {
}

class CreateApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "CreateApi", {})
    .n("AppSyncClient", "CreateApiCommand")
    .f(void 0, void 0)
    .ser(se_CreateApiCommand)
    .de(de_CreateApiCommand)
    .build() {
}

class CreateApiKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "CreateApiKey", {})
    .n("AppSyncClient", "CreateApiKeyCommand")
    .f(void 0, void 0)
    .ser(se_CreateApiKeyCommand)
    .de(de_CreateApiKeyCommand)
    .build() {
}

class CreateChannelNamespaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "CreateChannelNamespace", {})
    .n("AppSyncClient", "CreateChannelNamespaceCommand")
    .f(void 0, void 0)
    .ser(se_CreateChannelNamespaceCommand)
    .de(de_CreateChannelNamespaceCommand)
    .build() {
}

class CreateDataSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "CreateDataSource", {})
    .n("AppSyncClient", "CreateDataSourceCommand")
    .f(void 0, void 0)
    .ser(se_CreateDataSourceCommand)
    .de(de_CreateDataSourceCommand)
    .build() {
}

class CreateDomainNameCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "CreateDomainName", {})
    .n("AppSyncClient", "CreateDomainNameCommand")
    .f(void 0, void 0)
    .ser(se_CreateDomainNameCommand)
    .de(de_CreateDomainNameCommand)
    .build() {
}

class CreateFunctionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "CreateFunction", {})
    .n("AppSyncClient", "CreateFunctionCommand")
    .f(void 0, void 0)
    .ser(se_CreateFunctionCommand)
    .de(de_CreateFunctionCommand)
    .build() {
}

class CreateGraphqlApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "CreateGraphqlApi", {})
    .n("AppSyncClient", "CreateGraphqlApiCommand")
    .f(void 0, void 0)
    .ser(se_CreateGraphqlApiCommand)
    .de(de_CreateGraphqlApiCommand)
    .build() {
}

class CreateResolverCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "CreateResolver", {})
    .n("AppSyncClient", "CreateResolverCommand")
    .f(void 0, void 0)
    .ser(se_CreateResolverCommand)
    .de(de_CreateResolverCommand)
    .build() {
}

class CreateTypeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "CreateType", {})
    .n("AppSyncClient", "CreateTypeCommand")
    .f(void 0, void 0)
    .ser(se_CreateTypeCommand)
    .de(de_CreateTypeCommand)
    .build() {
}

class DeleteApiCacheCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DeleteApiCache", {})
    .n("AppSyncClient", "DeleteApiCacheCommand")
    .f(void 0, void 0)
    .ser(se_DeleteApiCacheCommand)
    .de(de_DeleteApiCacheCommand)
    .build() {
}

class DeleteApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DeleteApi", {})
    .n("AppSyncClient", "DeleteApiCommand")
    .f(void 0, void 0)
    .ser(se_DeleteApiCommand)
    .de(de_DeleteApiCommand)
    .build() {
}

class DeleteApiKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DeleteApiKey", {})
    .n("AppSyncClient", "DeleteApiKeyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteApiKeyCommand)
    .de(de_DeleteApiKeyCommand)
    .build() {
}

class DeleteChannelNamespaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DeleteChannelNamespace", {})
    .n("AppSyncClient", "DeleteChannelNamespaceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteChannelNamespaceCommand)
    .de(de_DeleteChannelNamespaceCommand)
    .build() {
}

class DeleteDataSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DeleteDataSource", {})
    .n("AppSyncClient", "DeleteDataSourceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDataSourceCommand)
    .de(de_DeleteDataSourceCommand)
    .build() {
}

class DeleteDomainNameCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DeleteDomainName", {})
    .n("AppSyncClient", "DeleteDomainNameCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDomainNameCommand)
    .de(de_DeleteDomainNameCommand)
    .build() {
}

class DeleteFunctionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DeleteFunction", {})
    .n("AppSyncClient", "DeleteFunctionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteFunctionCommand)
    .de(de_DeleteFunctionCommand)
    .build() {
}

class DeleteGraphqlApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DeleteGraphqlApi", {})
    .n("AppSyncClient", "DeleteGraphqlApiCommand")
    .f(void 0, void 0)
    .ser(se_DeleteGraphqlApiCommand)
    .de(de_DeleteGraphqlApiCommand)
    .build() {
}

class DeleteResolverCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DeleteResolver", {})
    .n("AppSyncClient", "DeleteResolverCommand")
    .f(void 0, void 0)
    .ser(se_DeleteResolverCommand)
    .de(de_DeleteResolverCommand)
    .build() {
}

class DeleteTypeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DeleteType", {})
    .n("AppSyncClient", "DeleteTypeCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTypeCommand)
    .de(de_DeleteTypeCommand)
    .build() {
}

class DisassociateApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DisassociateApi", {})
    .n("AppSyncClient", "DisassociateApiCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateApiCommand)
    .de(de_DisassociateApiCommand)
    .build() {
}

class DisassociateMergedGraphqlApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DisassociateMergedGraphqlApi", {})
    .n("AppSyncClient", "DisassociateMergedGraphqlApiCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateMergedGraphqlApiCommand)
    .de(de_DisassociateMergedGraphqlApiCommand)
    .build() {
}

class DisassociateSourceGraphqlApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "DisassociateSourceGraphqlApi", {})
    .n("AppSyncClient", "DisassociateSourceGraphqlApiCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateSourceGraphqlApiCommand)
    .de(de_DisassociateSourceGraphqlApiCommand)
    .build() {
}

class EvaluateCodeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "EvaluateCode", {})
    .n("AppSyncClient", "EvaluateCodeCommand")
    .f(void 0, void 0)
    .ser(se_EvaluateCodeCommand)
    .de(de_EvaluateCodeCommand)
    .build() {
}

class EvaluateMappingTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "EvaluateMappingTemplate", {})
    .n("AppSyncClient", "EvaluateMappingTemplateCommand")
    .f(void 0, void 0)
    .ser(se_EvaluateMappingTemplateCommand)
    .de(de_EvaluateMappingTemplateCommand)
    .build() {
}

class FlushApiCacheCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "FlushApiCache", {})
    .n("AppSyncClient", "FlushApiCacheCommand")
    .f(void 0, void 0)
    .ser(se_FlushApiCacheCommand)
    .de(de_FlushApiCacheCommand)
    .build() {
}

class GetApiAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetApiAssociation", {})
    .n("AppSyncClient", "GetApiAssociationCommand")
    .f(void 0, void 0)
    .ser(se_GetApiAssociationCommand)
    .de(de_GetApiAssociationCommand)
    .build() {
}

class GetApiCacheCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetApiCache", {})
    .n("AppSyncClient", "GetApiCacheCommand")
    .f(void 0, void 0)
    .ser(se_GetApiCacheCommand)
    .de(de_GetApiCacheCommand)
    .build() {
}

class GetApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetApi", {})
    .n("AppSyncClient", "GetApiCommand")
    .f(void 0, void 0)
    .ser(se_GetApiCommand)
    .de(de_GetApiCommand)
    .build() {
}

class GetChannelNamespaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetChannelNamespace", {})
    .n("AppSyncClient", "GetChannelNamespaceCommand")
    .f(void 0, void 0)
    .ser(se_GetChannelNamespaceCommand)
    .de(de_GetChannelNamespaceCommand)
    .build() {
}

class GetDataSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetDataSource", {})
    .n("AppSyncClient", "GetDataSourceCommand")
    .f(void 0, void 0)
    .ser(se_GetDataSourceCommand)
    .de(de_GetDataSourceCommand)
    .build() {
}

class GetDataSourceIntrospectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetDataSourceIntrospection", {})
    .n("AppSyncClient", "GetDataSourceIntrospectionCommand")
    .f(void 0, void 0)
    .ser(se_GetDataSourceIntrospectionCommand)
    .de(de_GetDataSourceIntrospectionCommand)
    .build() {
}

class GetDomainNameCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetDomainName", {})
    .n("AppSyncClient", "GetDomainNameCommand")
    .f(void 0, void 0)
    .ser(se_GetDomainNameCommand)
    .de(de_GetDomainNameCommand)
    .build() {
}

class GetFunctionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetFunction", {})
    .n("AppSyncClient", "GetFunctionCommand")
    .f(void 0, void 0)
    .ser(se_GetFunctionCommand)
    .de(de_GetFunctionCommand)
    .build() {
}

class GetGraphqlApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetGraphqlApi", {})
    .n("AppSyncClient", "GetGraphqlApiCommand")
    .f(void 0, void 0)
    .ser(se_GetGraphqlApiCommand)
    .de(de_GetGraphqlApiCommand)
    .build() {
}

class GetGraphqlApiEnvironmentVariablesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetGraphqlApiEnvironmentVariables", {})
    .n("AppSyncClient", "GetGraphqlApiEnvironmentVariablesCommand")
    .f(void 0, void 0)
    .ser(se_GetGraphqlApiEnvironmentVariablesCommand)
    .de(de_GetGraphqlApiEnvironmentVariablesCommand)
    .build() {
}

class GetIntrospectionSchemaCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetIntrospectionSchema", {})
    .n("AppSyncClient", "GetIntrospectionSchemaCommand")
    .f(void 0, void 0)
    .ser(se_GetIntrospectionSchemaCommand)
    .de(de_GetIntrospectionSchemaCommand)
    .build() {
}

class GetResolverCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetResolver", {})
    .n("AppSyncClient", "GetResolverCommand")
    .f(void 0, void 0)
    .ser(se_GetResolverCommand)
    .de(de_GetResolverCommand)
    .build() {
}

class GetSchemaCreationStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetSchemaCreationStatus", {})
    .n("AppSyncClient", "GetSchemaCreationStatusCommand")
    .f(void 0, void 0)
    .ser(se_GetSchemaCreationStatusCommand)
    .de(de_GetSchemaCreationStatusCommand)
    .build() {
}

class GetSourceApiAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetSourceApiAssociation", {})
    .n("AppSyncClient", "GetSourceApiAssociationCommand")
    .f(void 0, void 0)
    .ser(se_GetSourceApiAssociationCommand)
    .de(de_GetSourceApiAssociationCommand)
    .build() {
}

class GetTypeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "GetType", {})
    .n("AppSyncClient", "GetTypeCommand")
    .f(void 0, void 0)
    .ser(se_GetTypeCommand)
    .de(de_GetTypeCommand)
    .build() {
}

class ListApiKeysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListApiKeys", {})
    .n("AppSyncClient", "ListApiKeysCommand")
    .f(void 0, void 0)
    .ser(se_ListApiKeysCommand)
    .de(de_ListApiKeysCommand)
    .build() {
}

class ListApisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListApis", {})
    .n("AppSyncClient", "ListApisCommand")
    .f(void 0, void 0)
    .ser(se_ListApisCommand)
    .de(de_ListApisCommand)
    .build() {
}

class ListChannelNamespacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListChannelNamespaces", {})
    .n("AppSyncClient", "ListChannelNamespacesCommand")
    .f(void 0, void 0)
    .ser(se_ListChannelNamespacesCommand)
    .de(de_ListChannelNamespacesCommand)
    .build() {
}

class ListDataSourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListDataSources", {})
    .n("AppSyncClient", "ListDataSourcesCommand")
    .f(void 0, void 0)
    .ser(se_ListDataSourcesCommand)
    .de(de_ListDataSourcesCommand)
    .build() {
}

class ListDomainNamesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListDomainNames", {})
    .n("AppSyncClient", "ListDomainNamesCommand")
    .f(void 0, void 0)
    .ser(se_ListDomainNamesCommand)
    .de(de_ListDomainNamesCommand)
    .build() {
}

class ListFunctionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListFunctions", {})
    .n("AppSyncClient", "ListFunctionsCommand")
    .f(void 0, void 0)
    .ser(se_ListFunctionsCommand)
    .de(de_ListFunctionsCommand)
    .build() {
}

class ListGraphqlApisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListGraphqlApis", {})
    .n("AppSyncClient", "ListGraphqlApisCommand")
    .f(void 0, void 0)
    .ser(se_ListGraphqlApisCommand)
    .de(de_ListGraphqlApisCommand)
    .build() {
}

class ListResolversByFunctionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListResolversByFunction", {})
    .n("AppSyncClient", "ListResolversByFunctionCommand")
    .f(void 0, void 0)
    .ser(se_ListResolversByFunctionCommand)
    .de(de_ListResolversByFunctionCommand)
    .build() {
}

class ListResolversCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListResolvers", {})
    .n("AppSyncClient", "ListResolversCommand")
    .f(void 0, void 0)
    .ser(se_ListResolversCommand)
    .de(de_ListResolversCommand)
    .build() {
}

class ListSourceApiAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListSourceApiAssociations", {})
    .n("AppSyncClient", "ListSourceApiAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_ListSourceApiAssociationsCommand)
    .de(de_ListSourceApiAssociationsCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListTagsForResource", {})
    .n("AppSyncClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListTypesByAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListTypesByAssociation", {})
    .n("AppSyncClient", "ListTypesByAssociationCommand")
    .f(void 0, void 0)
    .ser(se_ListTypesByAssociationCommand)
    .de(de_ListTypesByAssociationCommand)
    .build() {
}

class ListTypesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "ListTypes", {})
    .n("AppSyncClient", "ListTypesCommand")
    .f(void 0, void 0)
    .ser(se_ListTypesCommand)
    .de(de_ListTypesCommand)
    .build() {
}

class PutGraphqlApiEnvironmentVariablesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "PutGraphqlApiEnvironmentVariables", {})
    .n("AppSyncClient", "PutGraphqlApiEnvironmentVariablesCommand")
    .f(void 0, void 0)
    .ser(se_PutGraphqlApiEnvironmentVariablesCommand)
    .de(de_PutGraphqlApiEnvironmentVariablesCommand)
    .build() {
}

class StartDataSourceIntrospectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "StartDataSourceIntrospection", {})
    .n("AppSyncClient", "StartDataSourceIntrospectionCommand")
    .f(void 0, void 0)
    .ser(se_StartDataSourceIntrospectionCommand)
    .de(de_StartDataSourceIntrospectionCommand)
    .build() {
}

class StartSchemaCreationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "StartSchemaCreation", {})
    .n("AppSyncClient", "StartSchemaCreationCommand")
    .f(void 0, void 0)
    .ser(se_StartSchemaCreationCommand)
    .de(de_StartSchemaCreationCommand)
    .build() {
}

class StartSchemaMergeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "StartSchemaMerge", {})
    .n("AppSyncClient", "StartSchemaMergeCommand")
    .f(void 0, void 0)
    .ser(se_StartSchemaMergeCommand)
    .de(de_StartSchemaMergeCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "TagResource", {})
    .n("AppSyncClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "UntagResource", {})
    .n("AppSyncClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateApiCacheCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "UpdateApiCache", {})
    .n("AppSyncClient", "UpdateApiCacheCommand")
    .f(void 0, void 0)
    .ser(se_UpdateApiCacheCommand)
    .de(de_UpdateApiCacheCommand)
    .build() {
}

class UpdateApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "UpdateApi", {})
    .n("AppSyncClient", "UpdateApiCommand")
    .f(void 0, void 0)
    .ser(se_UpdateApiCommand)
    .de(de_UpdateApiCommand)
    .build() {
}

class UpdateApiKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "UpdateApiKey", {})
    .n("AppSyncClient", "UpdateApiKeyCommand")
    .f(void 0, void 0)
    .ser(se_UpdateApiKeyCommand)
    .de(de_UpdateApiKeyCommand)
    .build() {
}

class UpdateChannelNamespaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "UpdateChannelNamespace", {})
    .n("AppSyncClient", "UpdateChannelNamespaceCommand")
    .f(void 0, void 0)
    .ser(se_UpdateChannelNamespaceCommand)
    .de(de_UpdateChannelNamespaceCommand)
    .build() {
}

class UpdateDataSourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "UpdateDataSource", {})
    .n("AppSyncClient", "UpdateDataSourceCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDataSourceCommand)
    .de(de_UpdateDataSourceCommand)
    .build() {
}

class UpdateDomainNameCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "UpdateDomainName", {})
    .n("AppSyncClient", "UpdateDomainNameCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDomainNameCommand)
    .de(de_UpdateDomainNameCommand)
    .build() {
}

class UpdateFunctionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "UpdateFunction", {})
    .n("AppSyncClient", "UpdateFunctionCommand")
    .f(void 0, void 0)
    .ser(se_UpdateFunctionCommand)
    .de(de_UpdateFunctionCommand)
    .build() {
}

class UpdateGraphqlApiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "UpdateGraphqlApi", {})
    .n("AppSyncClient", "UpdateGraphqlApiCommand")
    .f(void 0, void 0)
    .ser(se_UpdateGraphqlApiCommand)
    .de(de_UpdateGraphqlApiCommand)
    .build() {
}

class UpdateResolverCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "UpdateResolver", {})
    .n("AppSyncClient", "UpdateResolverCommand")
    .f(void 0, void 0)
    .ser(se_UpdateResolverCommand)
    .de(de_UpdateResolverCommand)
    .build() {
}

class UpdateSourceApiAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "UpdateSourceApiAssociation", {})
    .n("AppSyncClient", "UpdateSourceApiAssociationCommand")
    .f(void 0, void 0)
    .ser(se_UpdateSourceApiAssociationCommand)
    .de(de_UpdateSourceApiAssociationCommand)
    .build() {
}

class UpdateTypeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDeepdishControlPlaneService", "UpdateType", {})
    .n("AppSyncClient", "UpdateTypeCommand")
    .f(void 0, void 0)
    .ser(se_UpdateTypeCommand)
    .de(de_UpdateTypeCommand)
    .build() {
}

const commands = {
    AssociateApiCommand,
    AssociateMergedGraphqlApiCommand,
    AssociateSourceGraphqlApiCommand,
    CreateApiCommand,
    CreateApiCacheCommand,
    CreateApiKeyCommand,
    CreateChannelNamespaceCommand,
    CreateDataSourceCommand,
    CreateDomainNameCommand,
    CreateFunctionCommand,
    CreateGraphqlApiCommand,
    CreateResolverCommand,
    CreateTypeCommand,
    DeleteApiCommand,
    DeleteApiCacheCommand,
    DeleteApiKeyCommand,
    DeleteChannelNamespaceCommand,
    DeleteDataSourceCommand,
    DeleteDomainNameCommand,
    DeleteFunctionCommand,
    DeleteGraphqlApiCommand,
    DeleteResolverCommand,
    DeleteTypeCommand,
    DisassociateApiCommand,
    DisassociateMergedGraphqlApiCommand,
    DisassociateSourceGraphqlApiCommand,
    EvaluateCodeCommand,
    EvaluateMappingTemplateCommand,
    FlushApiCacheCommand,
    GetApiCommand,
    GetApiAssociationCommand,
    GetApiCacheCommand,
    GetChannelNamespaceCommand,
    GetDataSourceCommand,
    GetDataSourceIntrospectionCommand,
    GetDomainNameCommand,
    GetFunctionCommand,
    GetGraphqlApiCommand,
    GetGraphqlApiEnvironmentVariablesCommand,
    GetIntrospectionSchemaCommand,
    GetResolverCommand,
    GetSchemaCreationStatusCommand,
    GetSourceApiAssociationCommand,
    GetTypeCommand,
    ListApiKeysCommand,
    ListApisCommand,
    ListChannelNamespacesCommand,
    ListDataSourcesCommand,
    ListDomainNamesCommand,
    ListFunctionsCommand,
    ListGraphqlApisCommand,
    ListResolversCommand,
    ListResolversByFunctionCommand,
    ListSourceApiAssociationsCommand,
    ListTagsForResourceCommand,
    ListTypesCommand,
    ListTypesByAssociationCommand,
    PutGraphqlApiEnvironmentVariablesCommand,
    StartDataSourceIntrospectionCommand,
    StartSchemaCreationCommand,
    StartSchemaMergeCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateApiCommand,
    UpdateApiCacheCommand,
    UpdateApiKeyCommand,
    UpdateChannelNamespaceCommand,
    UpdateDataSourceCommand,
    UpdateDomainNameCommand,
    UpdateFunctionCommand,
    UpdateGraphqlApiCommand,
    UpdateResolverCommand,
    UpdateSourceApiAssociationCommand,
    UpdateTypeCommand,
};
class AppSync extends AppSyncClient {
}
smithyClient.createAggregatedClient(commands, AppSync);

const paginateListApiKeys = core.createPaginator(AppSyncClient, ListApiKeysCommand, "nextToken", "nextToken", "maxResults");

const paginateListApis = core.createPaginator(AppSyncClient, ListApisCommand, "nextToken", "nextToken", "maxResults");

const paginateListChannelNamespaces = core.createPaginator(AppSyncClient, ListChannelNamespacesCommand, "nextToken", "nextToken", "maxResults");

const paginateListDataSources = core.createPaginator(AppSyncClient, ListDataSourcesCommand, "nextToken", "nextToken", "maxResults");

const paginateListDomainNames = core.createPaginator(AppSyncClient, ListDomainNamesCommand, "nextToken", "nextToken", "maxResults");

const paginateListFunctions = core.createPaginator(AppSyncClient, ListFunctionsCommand, "nextToken", "nextToken", "maxResults");

const paginateListGraphqlApis = core.createPaginator(AppSyncClient, ListGraphqlApisCommand, "nextToken", "nextToken", "maxResults");

const paginateListResolversByFunction = core.createPaginator(AppSyncClient, ListResolversByFunctionCommand, "nextToken", "nextToken", "maxResults");

const paginateListResolvers = core.createPaginator(AppSyncClient, ListResolversCommand, "nextToken", "nextToken", "maxResults");

const paginateListSourceApiAssociations = core.createPaginator(AppSyncClient, ListSourceApiAssociationsCommand, "nextToken", "nextToken", "maxResults");

const paginateListTypesByAssociation = core.createPaginator(AppSyncClient, ListTypesByAssociationCommand, "nextToken", "nextToken", "maxResults");

const paginateListTypes = core.createPaginator(AppSyncClient, ListTypesCommand, "nextToken", "nextToken", "maxResults");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AccessDeniedException = AccessDeniedException;
exports.ApiCacheStatus = ApiCacheStatus;
exports.ApiCacheType = ApiCacheType;
exports.ApiCachingBehavior = ApiCachingBehavior;
exports.ApiKeyLimitExceededException = ApiKeyLimitExceededException;
exports.ApiKeyValidityOutOfBoundsException = ApiKeyValidityOutOfBoundsException;
exports.ApiLimitExceededException = ApiLimitExceededException;
exports.AppSync = AppSync;
exports.AppSyncClient = AppSyncClient;
exports.AppSyncServiceException = AppSyncServiceException;
exports.AssociateApiCommand = AssociateApiCommand;
exports.AssociateMergedGraphqlApiCommand = AssociateMergedGraphqlApiCommand;
exports.AssociateSourceGraphqlApiCommand = AssociateSourceGraphqlApiCommand;
exports.AssociationStatus = AssociationStatus;
exports.AuthenticationType = AuthenticationType;
exports.AuthorizationType = AuthorizationType;
exports.BadRequestException = BadRequestException;
exports.BadRequestReason = BadRequestReason;
exports.CacheHealthMetricsConfig = CacheHealthMetricsConfig;
exports.ConcurrentModificationException = ConcurrentModificationException;
exports.ConflictDetectionType = ConflictDetectionType;
exports.ConflictException = ConflictException;
exports.ConflictHandlerType = ConflictHandlerType;
exports.CreateApiCacheCommand = CreateApiCacheCommand;
exports.CreateApiCommand = CreateApiCommand;
exports.CreateApiKeyCommand = CreateApiKeyCommand;
exports.CreateChannelNamespaceCommand = CreateChannelNamespaceCommand;
exports.CreateDataSourceCommand = CreateDataSourceCommand;
exports.CreateDomainNameCommand = CreateDomainNameCommand;
exports.CreateFunctionCommand = CreateFunctionCommand;
exports.CreateGraphqlApiCommand = CreateGraphqlApiCommand;
exports.CreateResolverCommand = CreateResolverCommand;
exports.CreateTypeCommand = CreateTypeCommand;
exports.DataSourceIntrospectionStatus = DataSourceIntrospectionStatus;
exports.DataSourceLevelMetricsBehavior = DataSourceLevelMetricsBehavior;
exports.DataSourceLevelMetricsConfig = DataSourceLevelMetricsConfig;
exports.DataSourceType = DataSourceType;
exports.DefaultAction = DefaultAction;
exports.DeleteApiCacheCommand = DeleteApiCacheCommand;
exports.DeleteApiCommand = DeleteApiCommand;
exports.DeleteApiKeyCommand = DeleteApiKeyCommand;
exports.DeleteChannelNamespaceCommand = DeleteChannelNamespaceCommand;
exports.DeleteDataSourceCommand = DeleteDataSourceCommand;
exports.DeleteDomainNameCommand = DeleteDomainNameCommand;
exports.DeleteFunctionCommand = DeleteFunctionCommand;
exports.DeleteGraphqlApiCommand = DeleteGraphqlApiCommand;
exports.DeleteResolverCommand = DeleteResolverCommand;
exports.DeleteTypeCommand = DeleteTypeCommand;
exports.DisassociateApiCommand = DisassociateApiCommand;
exports.DisassociateMergedGraphqlApiCommand = DisassociateMergedGraphqlApiCommand;
exports.DisassociateSourceGraphqlApiCommand = DisassociateSourceGraphqlApiCommand;
exports.EvaluateCodeCommand = EvaluateCodeCommand;
exports.EvaluateMappingTemplateCommand = EvaluateMappingTemplateCommand;
exports.EventLogLevel = EventLogLevel;
exports.FieldLogLevel = FieldLogLevel;
exports.FlushApiCacheCommand = FlushApiCacheCommand;
exports.GetApiAssociationCommand = GetApiAssociationCommand;
exports.GetApiCacheCommand = GetApiCacheCommand;
exports.GetApiCommand = GetApiCommand;
exports.GetChannelNamespaceCommand = GetChannelNamespaceCommand;
exports.GetDataSourceCommand = GetDataSourceCommand;
exports.GetDataSourceIntrospectionCommand = GetDataSourceIntrospectionCommand;
exports.GetDomainNameCommand = GetDomainNameCommand;
exports.GetFunctionCommand = GetFunctionCommand;
exports.GetGraphqlApiCommand = GetGraphqlApiCommand;
exports.GetGraphqlApiEnvironmentVariablesCommand = GetGraphqlApiEnvironmentVariablesCommand;
exports.GetIntrospectionSchemaCommand = GetIntrospectionSchemaCommand;
exports.GetResolverCommand = GetResolverCommand;
exports.GetSchemaCreationStatusCommand = GetSchemaCreationStatusCommand;
exports.GetSourceApiAssociationCommand = GetSourceApiAssociationCommand;
exports.GetTypeCommand = GetTypeCommand;
exports.GraphQLApiIntrospectionConfig = GraphQLApiIntrospectionConfig;
exports.GraphQLApiType = GraphQLApiType;
exports.GraphQLApiVisibility = GraphQLApiVisibility;
exports.GraphQLSchemaException = GraphQLSchemaException;
exports.HandlerBehavior = HandlerBehavior;
exports.InternalFailureException = InternalFailureException;
exports.InvokeType = InvokeType;
exports.LimitExceededException = LimitExceededException;
exports.ListApiKeysCommand = ListApiKeysCommand;
exports.ListApisCommand = ListApisCommand;
exports.ListChannelNamespacesCommand = ListChannelNamespacesCommand;
exports.ListDataSourcesCommand = ListDataSourcesCommand;
exports.ListDomainNamesCommand = ListDomainNamesCommand;
exports.ListFunctionsCommand = ListFunctionsCommand;
exports.ListGraphqlApisCommand = ListGraphqlApisCommand;
exports.ListResolversByFunctionCommand = ListResolversByFunctionCommand;
exports.ListResolversCommand = ListResolversCommand;
exports.ListSourceApiAssociationsCommand = ListSourceApiAssociationsCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListTypesByAssociationCommand = ListTypesByAssociationCommand;
exports.ListTypesCommand = ListTypesCommand;
exports.MergeType = MergeType;
exports.NotFoundException = NotFoundException;
exports.OperationLevelMetricsConfig = OperationLevelMetricsConfig;
exports.OutputType = OutputType;
exports.Ownership = Ownership;
exports.PutGraphqlApiEnvironmentVariablesCommand = PutGraphqlApiEnvironmentVariablesCommand;
exports.RelationalDatabaseSourceType = RelationalDatabaseSourceType;
exports.ResolverKind = ResolverKind;
exports.ResolverLevelMetricsBehavior = ResolverLevelMetricsBehavior;
exports.ResolverLevelMetricsConfig = ResolverLevelMetricsConfig;
exports.RuntimeName = RuntimeName;
exports.SchemaStatus = SchemaStatus;
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
exports.SourceApiAssociationStatus = SourceApiAssociationStatus;
exports.StartDataSourceIntrospectionCommand = StartDataSourceIntrospectionCommand;
exports.StartSchemaCreationCommand = StartSchemaCreationCommand;
exports.StartSchemaMergeCommand = StartSchemaMergeCommand;
exports.TagResourceCommand = TagResourceCommand;
exports.TypeDefinitionFormat = TypeDefinitionFormat;
exports.UnauthorizedException = UnauthorizedException;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateApiCacheCommand = UpdateApiCacheCommand;
exports.UpdateApiCommand = UpdateApiCommand;
exports.UpdateApiKeyCommand = UpdateApiKeyCommand;
exports.UpdateChannelNamespaceCommand = UpdateChannelNamespaceCommand;
exports.UpdateDataSourceCommand = UpdateDataSourceCommand;
exports.UpdateDomainNameCommand = UpdateDomainNameCommand;
exports.UpdateFunctionCommand = UpdateFunctionCommand;
exports.UpdateGraphqlApiCommand = UpdateGraphqlApiCommand;
exports.UpdateResolverCommand = UpdateResolverCommand;
exports.UpdateSourceApiAssociationCommand = UpdateSourceApiAssociationCommand;
exports.UpdateTypeCommand = UpdateTypeCommand;
exports.paginateListApiKeys = paginateListApiKeys;
exports.paginateListApis = paginateListApis;
exports.paginateListChannelNamespaces = paginateListChannelNamespaces;
exports.paginateListDataSources = paginateListDataSources;
exports.paginateListDomainNames = paginateListDomainNames;
exports.paginateListFunctions = paginateListFunctions;
exports.paginateListGraphqlApis = paginateListGraphqlApis;
exports.paginateListResolvers = paginateListResolvers;
exports.paginateListResolversByFunction = paginateListResolversByFunction;
exports.paginateListSourceApiAssociations = paginateListSourceApiAssociations;
exports.paginateListTypes = paginateListTypes;
exports.paginateListTypesByAssociation = paginateListTypesByAssociation;
