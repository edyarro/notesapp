'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "codebuild",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class CodeBuildClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultCodeBuildHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class CodeBuildServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, CodeBuildServiceException.prototype);
    }
}

class AccountLimitExceededException extends CodeBuildServiceException {
    name = "AccountLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccountLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccountLimitExceededException.prototype);
    }
}
class AccountSuspendedException extends CodeBuildServiceException {
    name = "AccountSuspendedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccountSuspendedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccountSuspendedException.prototype);
    }
}
const ArtifactNamespace = {
    BUILD_ID: "BUILD_ID",
    NONE: "NONE",
};
const ArtifactPackaging = {
    NONE: "NONE",
    ZIP: "ZIP",
};
const ArtifactsType = {
    CODEPIPELINE: "CODEPIPELINE",
    NO_ARTIFACTS: "NO_ARTIFACTS",
    S3: "S3",
};
const AuthType = {
    BASIC_AUTH: "BASIC_AUTH",
    CODECONNECTIONS: "CODECONNECTIONS",
    OAUTH: "OAUTH",
    PERSONAL_ACCESS_TOKEN: "PERSONAL_ACCESS_TOKEN",
    SECRETS_MANAGER: "SECRETS_MANAGER",
};
class InvalidInputException extends CodeBuildServiceException {
    name = "InvalidInputException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidInputException.prototype);
    }
}
const BucketOwnerAccess = {
    FULL: "FULL",
    NONE: "NONE",
    READ_ONLY: "READ_ONLY",
};
const BatchReportModeType = {
    REPORT_AGGREGATED_BATCH: "REPORT_AGGREGATED_BATCH",
    REPORT_INDIVIDUAL_BUILDS: "REPORT_INDIVIDUAL_BUILDS",
};
const StatusType = {
    FAILED: "FAILED",
    FAULT: "FAULT",
    IN_PROGRESS: "IN_PROGRESS",
    STOPPED: "STOPPED",
    SUCCEEDED: "SUCCEEDED",
    TIMED_OUT: "TIMED_OUT",
};
const CacheMode = {
    LOCAL_CUSTOM_CACHE: "LOCAL_CUSTOM_CACHE",
    LOCAL_DOCKER_LAYER_CACHE: "LOCAL_DOCKER_LAYER_CACHE",
    LOCAL_SOURCE_CACHE: "LOCAL_SOURCE_CACHE",
};
const CacheType = {
    LOCAL: "LOCAL",
    NO_CACHE: "NO_CACHE",
    S3: "S3",
};
const MachineType = {
    GENERAL: "GENERAL",
    NVME: "NVME",
};
const ComputeType = {
    ATTRIBUTE_BASED_COMPUTE: "ATTRIBUTE_BASED_COMPUTE",
    BUILD_GENERAL1_2XLARGE: "BUILD_GENERAL1_2XLARGE",
    BUILD_GENERAL1_LARGE: "BUILD_GENERAL1_LARGE",
    BUILD_GENERAL1_MEDIUM: "BUILD_GENERAL1_MEDIUM",
    BUILD_GENERAL1_SMALL: "BUILD_GENERAL1_SMALL",
    BUILD_GENERAL1_XLARGE: "BUILD_GENERAL1_XLARGE",
    BUILD_LAMBDA_10GB: "BUILD_LAMBDA_10GB",
    BUILD_LAMBDA_1GB: "BUILD_LAMBDA_1GB",
    BUILD_LAMBDA_2GB: "BUILD_LAMBDA_2GB",
    BUILD_LAMBDA_4GB: "BUILD_LAMBDA_4GB",
    BUILD_LAMBDA_8GB: "BUILD_LAMBDA_8GB",
    CUSTOM_INSTANCE_TYPE: "CUSTOM_INSTANCE_TYPE",
};
const EnvironmentVariableType = {
    PARAMETER_STORE: "PARAMETER_STORE",
    PLAINTEXT: "PLAINTEXT",
    SECRETS_MANAGER: "SECRETS_MANAGER",
};
const ImagePullCredentialsType = {
    CODEBUILD: "CODEBUILD",
    SERVICE_ROLE: "SERVICE_ROLE",
};
const CredentialProviderType = {
    SECRETS_MANAGER: "SECRETS_MANAGER",
};
const EnvironmentType = {
    ARM_CONTAINER: "ARM_CONTAINER",
    ARM_EC2: "ARM_EC2",
    ARM_LAMBDA_CONTAINER: "ARM_LAMBDA_CONTAINER",
    LINUX_CONTAINER: "LINUX_CONTAINER",
    LINUX_EC2: "LINUX_EC2",
    LINUX_GPU_CONTAINER: "LINUX_GPU_CONTAINER",
    LINUX_LAMBDA_CONTAINER: "LINUX_LAMBDA_CONTAINER",
    MAC_ARM: "MAC_ARM",
    WINDOWS_CONTAINER: "WINDOWS_CONTAINER",
    WINDOWS_EC2: "WINDOWS_EC2",
    WINDOWS_SERVER_2019_CONTAINER: "WINDOWS_SERVER_2019_CONTAINER",
    WINDOWS_SERVER_2022_CONTAINER: "WINDOWS_SERVER_2022_CONTAINER",
};
const FileSystemType = {
    EFS: "EFS",
};
const LogsConfigStatusType = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const BuildBatchPhaseType = {
    COMBINE_ARTIFACTS: "COMBINE_ARTIFACTS",
    DOWNLOAD_BATCHSPEC: "DOWNLOAD_BATCHSPEC",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    STOPPED: "STOPPED",
    SUBMITTED: "SUBMITTED",
    SUCCEEDED: "SUCCEEDED",
};
const SourceAuthType = {
    CODECONNECTIONS: "CODECONNECTIONS",
    OAUTH: "OAUTH",
    SECRETS_MANAGER: "SECRETS_MANAGER",
};
const SourceType = {
    BITBUCKET: "BITBUCKET",
    CODECOMMIT: "CODECOMMIT",
    CODEPIPELINE: "CODEPIPELINE",
    GITHUB: "GITHUB",
    GITHUB_ENTERPRISE: "GITHUB_ENTERPRISE",
    GITLAB: "GITLAB",
    GITLAB_SELF_MANAGED: "GITLAB_SELF_MANAGED",
    NO_SOURCE: "NO_SOURCE",
    S3: "S3",
};
const BuildPhaseType = {
    BUILD: "BUILD",
    COMPLETED: "COMPLETED",
    DOWNLOAD_SOURCE: "DOWNLOAD_SOURCE",
    FINALIZING: "FINALIZING",
    INSTALL: "INSTALL",
    POST_BUILD: "POST_BUILD",
    PRE_BUILD: "PRE_BUILD",
    PROVISIONING: "PROVISIONING",
    QUEUED: "QUEUED",
    SUBMITTED: "SUBMITTED",
    UPLOAD_ARTIFACTS: "UPLOAD_ARTIFACTS",
};
const CommandType = {
    SHELL: "SHELL",
};
const FleetOverflowBehavior = {
    ON_DEMAND: "ON_DEMAND",
    QUEUE: "QUEUE",
};
const FleetProxyRuleBehavior = {
    ALLOW_ALL: "ALLOW_ALL",
    DENY_ALL: "DENY_ALL",
};
const FleetProxyRuleEffectType = {
    ALLOW: "ALLOW",
    DENY: "DENY",
};
const FleetProxyRuleType = {
    DOMAIN: "DOMAIN",
    IP: "IP",
};
const FleetScalingType = {
    TARGET_TRACKING_SCALING: "TARGET_TRACKING_SCALING",
};
const FleetScalingMetricType = {
    FLEET_UTILIZATION_RATE: "FLEET_UTILIZATION_RATE",
};
const FleetContextCode = {
    ACTION_REQUIRED: "ACTION_REQUIRED",
    CREATE_FAILED: "CREATE_FAILED",
    INSUFFICIENT_CAPACITY: "INSUFFICIENT_CAPACITY",
    PENDING_DELETION: "PENDING_DELETION",
    UPDATE_FAILED: "UPDATE_FAILED",
};
const FleetStatusCode = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETING: "DELETING",
    PENDING_DELETION: "PENDING_DELETION",
    ROTATING: "ROTATING",
    UPDATE_ROLLBACK_FAILED: "UPDATE_ROLLBACK_FAILED",
    UPDATING: "UPDATING",
};
const ProjectVisibilityType = {
    PRIVATE: "PRIVATE",
    PUBLIC_READ: "PUBLIC_READ",
};
const WebhookBuildType = {
    BUILD: "BUILD",
    BUILD_BATCH: "BUILD_BATCH",
    RUNNER_BUILDKITE_BUILD: "RUNNER_BUILDKITE_BUILD",
};
const WebhookFilterType = {
    ACTOR_ACCOUNT_ID: "ACTOR_ACCOUNT_ID",
    BASE_REF: "BASE_REF",
    COMMIT_MESSAGE: "COMMIT_MESSAGE",
    EVENT: "EVENT",
    FILE_PATH: "FILE_PATH",
    HEAD_REF: "HEAD_REF",
    ORGANIZATION_NAME: "ORGANIZATION_NAME",
    RELEASE_NAME: "RELEASE_NAME",
    REPOSITORY_NAME: "REPOSITORY_NAME",
    TAG_NAME: "TAG_NAME",
    WORKFLOW_NAME: "WORKFLOW_NAME",
};
const PullRequestBuildApproverRole = {
    BITBUCKET_ADMIN: "BITBUCKET_ADMIN",
    BITBUCKET_READ: "BITBUCKET_READ",
    BITBUCKET_WRITE: "BITBUCKET_WRITE",
    GITHUB_ADMIN: "GITHUB_ADMIN",
    GITHUB_MAINTAIN: "GITHUB_MAINTAIN",
    GITHUB_READ: "GITHUB_READ",
    GITHUB_TRIAGE: "GITHUB_TRIAGE",
    GITHUB_WRITE: "GITHUB_WRITE",
    GITLAB_DEVELOPER: "GITLAB_DEVELOPER",
    GITLAB_GUEST: "GITLAB_GUEST",
    GITLAB_MAINTAINER: "GITLAB_MAINTAINER",
    GITLAB_OWNER: "GITLAB_OWNER",
    GITLAB_PLANNER: "GITLAB_PLANNER",
    GITLAB_REPORTER: "GITLAB_REPORTER",
};
const PullRequestBuildCommentApproval = {
    ALL_PULL_REQUESTS: "ALL_PULL_REQUESTS",
    DISABLED: "DISABLED",
    FORK_PULL_REQUESTS: "FORK_PULL_REQUESTS",
};
const WebhookScopeType = {
    GITHUB_GLOBAL: "GITHUB_GLOBAL",
    GITHUB_ORGANIZATION: "GITHUB_ORGANIZATION",
    GITLAB_GROUP: "GITLAB_GROUP",
};
const WebhookStatus = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETING: "DELETING",
};
const ReportExportConfigType = {
    NO_EXPORT: "NO_EXPORT",
    S3: "S3",
};
const ReportPackagingType = {
    NONE: "NONE",
    ZIP: "ZIP",
};
const ReportGroupStatusType = {
    ACTIVE: "ACTIVE",
    DELETING: "DELETING",
};
const ReportType = {
    CODE_COVERAGE: "CODE_COVERAGE",
    TEST: "TEST",
};
const ReportStatusType = {
    DELETING: "DELETING",
    FAILED: "FAILED",
    GENERATING: "GENERATING",
    INCOMPLETE: "INCOMPLETE",
    SUCCEEDED: "SUCCEEDED",
};
class ResourceAlreadyExistsException extends CodeBuildServiceException {
    name = "ResourceAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
    }
}
class OAuthProviderException extends CodeBuildServiceException {
    name = "OAuthProviderException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "OAuthProviderException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OAuthProviderException.prototype);
    }
}
class ResourceNotFoundException extends CodeBuildServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
const ReportCodeCoverageSortByType = {
    FILE_PATH: "FILE_PATH",
    LINE_COVERAGE_PERCENTAGE: "LINE_COVERAGE_PERCENTAGE",
};
const SortOrderType = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
const ReportGroupTrendFieldType = {
    BRANCHES_COVERED: "BRANCHES_COVERED",
    BRANCHES_MISSED: "BRANCHES_MISSED",
    BRANCH_COVERAGE: "BRANCH_COVERAGE",
    DURATION: "DURATION",
    LINES_COVERED: "LINES_COVERED",
    LINES_MISSED: "LINES_MISSED",
    LINE_COVERAGE: "LINE_COVERAGE",
    PASS_RATE: "PASS_RATE",
    TOTAL: "TOTAL",
};
const ServerType = {
    BITBUCKET: "BITBUCKET",
    GITHUB: "GITHUB",
    GITHUB_ENTERPRISE: "GITHUB_ENTERPRISE",
    GITLAB: "GITLAB",
    GITLAB_SELF_MANAGED: "GITLAB_SELF_MANAGED",
};
const LanguageType = {
    ANDROID: "ANDROID",
    BASE: "BASE",
    DOCKER: "DOCKER",
    DOTNET: "DOTNET",
    GOLANG: "GOLANG",
    JAVA: "JAVA",
    NODE_JS: "NODE_JS",
    PHP: "PHP",
    PYTHON: "PYTHON",
    RUBY: "RUBY",
};
const PlatformType = {
    AMAZON_LINUX: "AMAZON_LINUX",
    DEBIAN: "DEBIAN",
    UBUNTU: "UBUNTU",
    WINDOWS_SERVER: "WINDOWS_SERVER",
};
const FleetSortByType = {
    CREATED_TIME: "CREATED_TIME",
    LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME",
    NAME: "NAME",
};
const ProjectSortByType = {
    CREATED_TIME: "CREATED_TIME",
    LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME",
    NAME: "NAME",
};
const ReportGroupSortByType = {
    CREATED_TIME: "CREATED_TIME",
    LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME",
    NAME: "NAME",
};
const SharedResourceSortByType = {
    ARN: "ARN",
    MODIFIED_TIME: "MODIFIED_TIME",
};
const RetryBuildBatchType = {
    RETRY_ALL_BUILDS: "RETRY_ALL_BUILDS",
    RETRY_FAILED_BUILDS: "RETRY_FAILED_BUILDS",
};
const CommandExecutionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.command && { command: smithyClient.SENSITIVE_STRING }),
    ...(obj.standardOutputContent && { standardOutputContent: smithyClient.SENSITIVE_STRING }),
    ...(obj.standardErrContent && { standardErrContent: smithyClient.SENSITIVE_STRING }),
});
const BatchGetCommandExecutionsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.commandExecutions && {
        commandExecutions: obj.commandExecutions.map((item) => CommandExecutionFilterSensitiveLog(item)),
    }),
});
const ImportSourceCredentialsInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.token && { token: smithyClient.SENSITIVE_STRING }),
});
const ListCommandExecutionsForSandboxInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.nextToken && { nextToken: smithyClient.SENSITIVE_STRING }),
});
const ListCommandExecutionsForSandboxOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.commandExecutions && {
        commandExecutions: obj.commandExecutions.map((item) => CommandExecutionFilterSensitiveLog(item)),
    }),
});
const ListFleetsInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.nextToken && { nextToken: smithyClient.SENSITIVE_STRING }),
});
const ListSandboxesForProjectInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.nextToken && { nextToken: smithyClient.SENSITIVE_STRING }),
});
const StartCommandExecutionInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.command && { command: smithyClient.SENSITIVE_STRING }),
});
const StartCommandExecutionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.commandExecution && { commandExecution: CommandExecutionFilterSensitiveLog(obj.commandExecution) }),
});
const StartSandboxInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.idempotencyToken && { idempotencyToken: smithyClient.SENSITIVE_STRING }),
});

const se_BatchDeleteBuildsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteBuilds");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchGetBuildBatchesCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetBuildBatches");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchGetBuildsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetBuilds");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchGetCommandExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetCommandExecutions");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchGetFleetsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetFleets");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchGetProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetProjects");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchGetReportGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetReportGroups");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchGetReportsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetReports");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchGetSandboxesCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetSandboxes");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateFleetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFleet");
    let body;
    body = JSON.stringify(se_CreateFleetInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateReportGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateReportGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateWebhookCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWebhook");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteBuildBatchCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBuildBatch");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteFleetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFleet");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteProjectCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteReportCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteReport");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteReportGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteReportGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteSourceCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSourceCredentials");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteWebhookCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWebhook");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCodeCoveragesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCodeCoverages");
    let body;
    body = JSON.stringify(se_DescribeCodeCoveragesInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTestCasesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTestCases");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetReportGroupTrendCommand = async (input, context) => {
    const headers = sharedHeaders("GetReportGroupTrend");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcePolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ImportSourceCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("ImportSourceCredentials");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_InvalidateProjectCacheCommand = async (input, context) => {
    const headers = sharedHeaders("InvalidateProjectCache");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListBuildBatchesCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuildBatches");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListBuildBatchesForProjectCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuildBatchesForProject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListBuildsCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuilds");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListBuildsForProjectCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuildsForProject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListCommandExecutionsForSandboxCommand = async (input, context) => {
    const headers = sharedHeaders("ListCommandExecutionsForSandbox");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListCuratedEnvironmentImagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCuratedEnvironmentImages");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListFleetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFleets");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("ListProjects");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListReportGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListReportGroups");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListReportsCommand = async (input, context) => {
    const headers = sharedHeaders("ListReports");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListReportsForReportGroupCommand = async (input, context) => {
    const headers = sharedHeaders("ListReportsForReportGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSandboxesCommand = async (input, context) => {
    const headers = sharedHeaders("ListSandboxes");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSandboxesForProjectCommand = async (input, context) => {
    const headers = sharedHeaders("ListSandboxesForProject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSharedProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSharedProjects");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSharedReportGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSharedReportGroups");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSourceCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSourceCredentials");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RetryBuildCommand = async (input, context) => {
    const headers = sharedHeaders("RetryBuild");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RetryBuildBatchCommand = async (input, context) => {
    const headers = sharedHeaders("RetryBuildBatch");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartBuildCommand = async (input, context) => {
    const headers = sharedHeaders("StartBuild");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartBuildBatchCommand = async (input, context) => {
    const headers = sharedHeaders("StartBuildBatch");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartCommandExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StartCommandExecution");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartSandboxCommand = async (input, context) => {
    const headers = sharedHeaders("StartSandbox");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartSandboxConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("StartSandboxConnection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopBuildCommand = async (input, context) => {
    const headers = sharedHeaders("StopBuild");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopBuildBatchCommand = async (input, context) => {
    const headers = sharedHeaders("StopBuildBatch");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopSandboxCommand = async (input, context) => {
    const headers = sharedHeaders("StopSandbox");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateFleetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFleet");
    let body;
    body = JSON.stringify(se_UpdateFleetInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateProject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateProjectVisibilityCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateProjectVisibility");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateReportGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateReportGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateWebhookCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWebhook");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_BatchDeleteBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchGetBuildBatchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_BatchGetBuildBatchesOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchGetBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_BatchGetBuildsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchGetCommandExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_BatchGetCommandExecutionsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchGetFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_BatchGetFleetsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchGetProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_BatchGetProjectsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchGetReportGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_BatchGetReportGroupsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchGetReportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_BatchGetReportsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchGetSandboxesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_BatchGetSandboxesOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateFleetOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateProjectOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateReportGroupOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateWebhookOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteSourceCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCodeCoveragesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeCodeCoveragesOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTestCasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeTestCasesOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetReportGroupTrendCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportSourceCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_InvalidateProjectCacheCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListBuildBatchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListBuildBatchesForProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListBuildsForProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListCommandExecutionsForSandboxCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListCommandExecutionsForSandboxOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListCuratedEnvironmentImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListReportGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListReportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListReportsForReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSandboxesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSandboxesForProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSharedProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSharedReportGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSourceCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RetryBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_RetryBuildOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RetryBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_RetryBuildBatchOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartBuildOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartBuildBatchOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartCommandExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartCommandExecutionOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartSandboxCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartSandboxOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartSandboxConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StopBuildOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StopBuildBatchOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopSandboxCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StopSandboxOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateFleetOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateProjectOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateProjectVisibilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateReportGroupOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateWebhookOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput);
        case "AccountLimitExceededException":
        case "com.amazonaws.codebuild#AccountLimitExceededException":
            throw await de_AccountLimitExceededExceptionRes(parsedOutput);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.codebuild#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput);
        case "OAuthProviderException":
        case "com.amazonaws.codebuild#OAuthProviderException":
            throw await de_OAuthProviderExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "AccountSuspendedException":
        case "com.amazonaws.codebuild#AccountSuspendedException":
            throw await de_AccountSuspendedExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccountLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new AccountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_AccountSuspendedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new AccountSuspendedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_OAuthProviderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new OAuthProviderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_CreateFleetInput = (input, context) => {
    return smithyClient.take(input, {
        baseCapacity: [],
        computeConfiguration: smithyClient._json,
        computeType: [],
        environmentType: [],
        fleetServiceRole: [],
        imageId: [],
        name: [],
        overflowBehavior: [],
        proxyConfiguration: smithyClient._json,
        scalingConfiguration: (_) => se_ScalingConfigurationInput(_),
        tags: smithyClient._json,
        vpcConfig: smithyClient._json,
    });
};
const se_DescribeCodeCoveragesInput = (input, context) => {
    return smithyClient.take(input, {
        maxLineCoveragePercentage: smithyClient.serializeFloat,
        maxResults: [],
        minLineCoveragePercentage: smithyClient.serializeFloat,
        nextToken: [],
        reportArn: [],
        sortBy: [],
        sortOrder: [],
    });
};
const se_ScalingConfigurationInput = (input, context) => {
    return smithyClient.take(input, {
        maxCapacity: [],
        scalingType: [],
        targetTrackingScalingConfigs: (_) => se_TargetTrackingScalingConfigurations(_),
    });
};
const se_TargetTrackingScalingConfiguration = (input, context) => {
    return smithyClient.take(input, {
        metricType: [],
        targetValue: smithyClient.serializeFloat,
    });
};
const se_TargetTrackingScalingConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TargetTrackingScalingConfiguration(entry);
    });
};
const se_UpdateFleetInput = (input, context) => {
    return smithyClient.take(input, {
        arn: [],
        baseCapacity: [],
        computeConfiguration: smithyClient._json,
        computeType: [],
        environmentType: [],
        fleetServiceRole: [],
        imageId: [],
        overflowBehavior: [],
        proxyConfiguration: smithyClient._json,
        scalingConfiguration: (_) => se_ScalingConfigurationInput(_),
        tags: smithyClient._json,
        vpcConfig: smithyClient._json,
    });
};
const de_BatchGetBuildBatchesOutput = (output, context) => {
    return smithyClient.take(output, {
        buildBatches: (_) => de_BuildBatches(_),
        buildBatchesNotFound: smithyClient._json,
    });
};
const de_BatchGetBuildsOutput = (output, context) => {
    return smithyClient.take(output, {
        builds: (_) => de_Builds(_),
        buildsNotFound: smithyClient._json,
    });
};
const de_BatchGetCommandExecutionsOutput = (output, context) => {
    return smithyClient.take(output, {
        commandExecutions: (_) => de_CommandExecutions(_),
        commandExecutionsNotFound: smithyClient._json,
    });
};
const de_BatchGetFleetsOutput = (output, context) => {
    return smithyClient.take(output, {
        fleets: (_) => de_Fleets(_),
        fleetsNotFound: smithyClient._json,
    });
};
const de_BatchGetProjectsOutput = (output, context) => {
    return smithyClient.take(output, {
        projects: (_) => de_Projects(_),
        projectsNotFound: smithyClient._json,
    });
};
const de_BatchGetReportGroupsOutput = (output, context) => {
    return smithyClient.take(output, {
        reportGroups: (_) => de_ReportGroups(_),
        reportGroupsNotFound: smithyClient._json,
    });
};
const de_BatchGetReportsOutput = (output, context) => {
    return smithyClient.take(output, {
        reports: (_) => de_Reports(_),
        reportsNotFound: smithyClient._json,
    });
};
const de_BatchGetSandboxesOutput = (output, context) => {
    return smithyClient.take(output, {
        sandboxes: (_) => de_Sandboxes(_),
        sandboxesNotFound: smithyClient._json,
    });
};
const de_Build = (output, context) => {
    return smithyClient.take(output, {
        arn: smithyClient.expectString,
        artifacts: smithyClient._json,
        autoRetryConfig: smithyClient._json,
        buildBatchArn: smithyClient.expectString,
        buildComplete: smithyClient.expectBoolean,
        buildNumber: smithyClient.expectLong,
        buildStatus: smithyClient.expectString,
        cache: smithyClient._json,
        currentPhase: smithyClient.expectString,
        debugSession: smithyClient._json,
        encryptionKey: smithyClient.expectString,
        endTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        environment: smithyClient._json,
        exportedEnvironmentVariables: smithyClient._json,
        fileSystemLocations: smithyClient._json,
        id: smithyClient.expectString,
        initiator: smithyClient.expectString,
        logs: smithyClient._json,
        networkInterface: smithyClient._json,
        phases: (_) => de_BuildPhases(_),
        projectName: smithyClient.expectString,
        queuedTimeoutInMinutes: smithyClient.expectInt32,
        reportArns: smithyClient._json,
        resolvedSourceVersion: smithyClient.expectString,
        secondaryArtifacts: smithyClient._json,
        secondarySourceVersions: smithyClient._json,
        secondarySources: smithyClient._json,
        serviceRole: smithyClient.expectString,
        source: smithyClient._json,
        sourceVersion: smithyClient.expectString,
        startTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        timeoutInMinutes: smithyClient.expectInt32,
        vpcConfig: smithyClient._json,
    });
};
const de_BuildBatch = (output, context) => {
    return smithyClient.take(output, {
        arn: smithyClient.expectString,
        artifacts: smithyClient._json,
        buildBatchConfig: smithyClient._json,
        buildBatchNumber: smithyClient.expectLong,
        buildBatchStatus: smithyClient.expectString,
        buildGroups: (_) => de_BuildGroups(_),
        buildTimeoutInMinutes: smithyClient.expectInt32,
        cache: smithyClient._json,
        complete: smithyClient.expectBoolean,
        currentPhase: smithyClient.expectString,
        debugSessionEnabled: smithyClient.expectBoolean,
        encryptionKey: smithyClient.expectString,
        endTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        environment: smithyClient._json,
        fileSystemLocations: smithyClient._json,
        id: smithyClient.expectString,
        initiator: smithyClient.expectString,
        logConfig: smithyClient._json,
        phases: (_) => de_BuildBatchPhases(_),
        projectName: smithyClient.expectString,
        queuedTimeoutInMinutes: smithyClient.expectInt32,
        reportArns: smithyClient._json,
        resolvedSourceVersion: smithyClient.expectString,
        secondaryArtifacts: smithyClient._json,
        secondarySourceVersions: smithyClient._json,
        secondarySources: smithyClient._json,
        serviceRole: smithyClient.expectString,
        source: smithyClient._json,
        sourceVersion: smithyClient.expectString,
        startTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        vpcConfig: smithyClient._json,
    });
};
const de_BuildBatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildBatch(entry);
    });
    return retVal;
};
const de_BuildBatchPhase = (output, context) => {
    return smithyClient.take(output, {
        contexts: smithyClient._json,
        durationInSeconds: smithyClient.expectLong,
        endTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        phaseStatus: smithyClient.expectString,
        phaseType: smithyClient.expectString,
        startTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_BuildBatchPhases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildBatchPhase(entry);
    });
    return retVal;
};
const de_BuildGroup = (output, context) => {
    return smithyClient.take(output, {
        currentBuildSummary: (_) => de_BuildSummary(_),
        dependsOn: smithyClient._json,
        identifier: smithyClient.expectString,
        ignoreFailure: smithyClient.expectBoolean,
        priorBuildSummaryList: (_) => de_BuildSummaries(_),
    });
};
const de_BuildGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildGroup(entry);
    });
    return retVal;
};
const de_BuildPhase = (output, context) => {
    return smithyClient.take(output, {
        contexts: smithyClient._json,
        durationInSeconds: smithyClient.expectLong,
        endTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        phaseStatus: smithyClient.expectString,
        phaseType: smithyClient.expectString,
        startTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_BuildPhases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildPhase(entry);
    });
    return retVal;
};
const de_Builds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Build(entry);
    });
    return retVal;
};
const de_BuildSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildSummary(entry);
    });
    return retVal;
};
const de_BuildSummary = (output, context) => {
    return smithyClient.take(output, {
        arn: smithyClient.expectString,
        buildStatus: smithyClient.expectString,
        primaryArtifact: smithyClient._json,
        requestedOn: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        secondaryArtifacts: smithyClient._json,
    });
};
const de_CodeCoverage = (output, context) => {
    return smithyClient.take(output, {
        branchCoveragePercentage: smithyClient.limitedParseDouble,
        branchesCovered: smithyClient.expectInt32,
        branchesMissed: smithyClient.expectInt32,
        expired: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        filePath: smithyClient.expectString,
        id: smithyClient.expectString,
        lineCoveragePercentage: smithyClient.limitedParseDouble,
        linesCovered: smithyClient.expectInt32,
        linesMissed: smithyClient.expectInt32,
        reportARN: smithyClient.expectString,
    });
};
const de_CodeCoverageReportSummary = (output, context) => {
    return smithyClient.take(output, {
        branchCoveragePercentage: smithyClient.limitedParseDouble,
        branchesCovered: smithyClient.expectInt32,
        branchesMissed: smithyClient.expectInt32,
        lineCoveragePercentage: smithyClient.limitedParseDouble,
        linesCovered: smithyClient.expectInt32,
        linesMissed: smithyClient.expectInt32,
    });
};
const de_CodeCoverages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CodeCoverage(entry);
    });
    return retVal;
};
const de_CommandExecution = (output, context) => {
    return smithyClient.take(output, {
        command: smithyClient.expectString,
        endTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        exitCode: smithyClient.expectString,
        id: smithyClient.expectString,
        logs: smithyClient._json,
        sandboxArn: smithyClient.expectString,
        sandboxId: smithyClient.expectString,
        standardErrContent: smithyClient.expectString,
        standardOutputContent: smithyClient.expectString,
        startTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        status: smithyClient.expectString,
        submitTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        type: smithyClient.expectString,
    });
};
const de_CommandExecutions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CommandExecution(entry);
    });
    return retVal;
};
const de_CreateFleetOutput = (output, context) => {
    return smithyClient.take(output, {
        fleet: (_) => de_Fleet(_),
    });
};
const de_CreateProjectOutput = (output, context) => {
    return smithyClient.take(output, {
        project: (_) => de_Project(_),
    });
};
const de_CreateReportGroupOutput = (output, context) => {
    return smithyClient.take(output, {
        reportGroup: (_) => de_ReportGroup(_),
    });
};
const de_CreateWebhookOutput = (output, context) => {
    return smithyClient.take(output, {
        webhook: (_) => de_Webhook(_),
    });
};
const de_DescribeCodeCoveragesOutput = (output, context) => {
    return smithyClient.take(output, {
        codeCoverages: (_) => de_CodeCoverages(_),
        nextToken: smithyClient.expectString,
    });
};
const de_DescribeTestCasesOutput = (output, context) => {
    return smithyClient.take(output, {
        nextToken: smithyClient.expectString,
        testCases: (_) => de_TestCases(_),
    });
};
const de_Fleet = (output, context) => {
    return smithyClient.take(output, {
        arn: smithyClient.expectString,
        baseCapacity: smithyClient.expectInt32,
        computeConfiguration: smithyClient._json,
        computeType: smithyClient.expectString,
        created: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        environmentType: smithyClient.expectString,
        fleetServiceRole: smithyClient.expectString,
        id: smithyClient.expectString,
        imageId: smithyClient.expectString,
        lastModified: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        name: smithyClient.expectString,
        overflowBehavior: smithyClient.expectString,
        proxyConfiguration: smithyClient._json,
        scalingConfiguration: (_) => de_ScalingConfigurationOutput(_),
        status: smithyClient._json,
        tags: smithyClient._json,
        vpcConfig: smithyClient._json,
    });
};
const de_Fleets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Fleet(entry);
    });
    return retVal;
};
const de_ListCommandExecutionsForSandboxOutput = (output, context) => {
    return smithyClient.take(output, {
        commandExecutions: (_) => de_CommandExecutions(_),
        nextToken: smithyClient.expectString,
    });
};
const de_Project = (output, context) => {
    return smithyClient.take(output, {
        arn: smithyClient.expectString,
        artifacts: smithyClient._json,
        autoRetryLimit: smithyClient.expectInt32,
        badge: smithyClient._json,
        buildBatchConfig: smithyClient._json,
        cache: smithyClient._json,
        concurrentBuildLimit: smithyClient.expectInt32,
        created: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        encryptionKey: smithyClient.expectString,
        environment: smithyClient._json,
        fileSystemLocations: smithyClient._json,
        lastModified: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        logsConfig: smithyClient._json,
        name: smithyClient.expectString,
        projectVisibility: smithyClient.expectString,
        publicProjectAlias: smithyClient.expectString,
        queuedTimeoutInMinutes: smithyClient.expectInt32,
        resourceAccessRole: smithyClient.expectString,
        secondaryArtifacts: smithyClient._json,
        secondarySourceVersions: smithyClient._json,
        secondarySources: smithyClient._json,
        serviceRole: smithyClient.expectString,
        source: smithyClient._json,
        sourceVersion: smithyClient.expectString,
        tags: smithyClient._json,
        timeoutInMinutes: smithyClient.expectInt32,
        vpcConfig: smithyClient._json,
        webhook: (_) => de_Webhook(_),
    });
};
const de_Projects = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Project(entry);
    });
    return retVal;
};
const de_Report = (output, context) => {
    return smithyClient.take(output, {
        arn: smithyClient.expectString,
        codeCoverageSummary: (_) => de_CodeCoverageReportSummary(_),
        created: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        executionId: smithyClient.expectString,
        expired: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        exportConfig: smithyClient._json,
        name: smithyClient.expectString,
        reportGroupArn: smithyClient.expectString,
        status: smithyClient.expectString,
        testSummary: smithyClient._json,
        truncated: smithyClient.expectBoolean,
        type: smithyClient.expectString,
    });
};
const de_ReportGroup = (output, context) => {
    return smithyClient.take(output, {
        arn: smithyClient.expectString,
        created: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        exportConfig: smithyClient._json,
        lastModified: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        name: smithyClient.expectString,
        status: smithyClient.expectString,
        tags: smithyClient._json,
        type: smithyClient.expectString,
    });
};
const de_ReportGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReportGroup(entry);
    });
    return retVal;
};
const de_Reports = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Report(entry);
    });
    return retVal;
};
const de_RetryBuildBatchOutput = (output, context) => {
    return smithyClient.take(output, {
        buildBatch: (_) => de_BuildBatch(_),
    });
};
const de_RetryBuildOutput = (output, context) => {
    return smithyClient.take(output, {
        build: (_) => de_Build(_),
    });
};
const de_Sandbox = (output, context) => {
    return smithyClient.take(output, {
        arn: smithyClient.expectString,
        currentSession: (_) => de_SandboxSession(_),
        encryptionKey: smithyClient.expectString,
        endTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        environment: smithyClient._json,
        fileSystemLocations: smithyClient._json,
        id: smithyClient.expectString,
        logConfig: smithyClient._json,
        projectName: smithyClient.expectString,
        queuedTimeoutInMinutes: smithyClient.expectInt32,
        requestTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        secondarySourceVersions: smithyClient._json,
        secondarySources: smithyClient._json,
        serviceRole: smithyClient.expectString,
        source: smithyClient._json,
        sourceVersion: smithyClient.expectString,
        startTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        status: smithyClient.expectString,
        timeoutInMinutes: smithyClient.expectInt32,
        vpcConfig: smithyClient._json,
    });
};
const de_Sandboxes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Sandbox(entry);
    });
    return retVal;
};
const de_SandboxSession = (output, context) => {
    return smithyClient.take(output, {
        currentPhase: smithyClient.expectString,
        endTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        id: smithyClient.expectString,
        logs: smithyClient._json,
        networkInterface: smithyClient._json,
        phases: (_) => de_SandboxSessionPhases(_),
        resolvedSourceVersion: smithyClient.expectString,
        startTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        status: smithyClient.expectString,
    });
};
const de_SandboxSessionPhase = (output, context) => {
    return smithyClient.take(output, {
        contexts: smithyClient._json,
        durationInSeconds: smithyClient.expectLong,
        endTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        phaseStatus: smithyClient.expectString,
        phaseType: smithyClient.expectString,
        startTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_SandboxSessionPhases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SandboxSessionPhase(entry);
    });
    return retVal;
};
const de_ScalingConfigurationOutput = (output, context) => {
    return smithyClient.take(output, {
        desiredCapacity: smithyClient.expectInt32,
        maxCapacity: smithyClient.expectInt32,
        scalingType: smithyClient.expectString,
        targetTrackingScalingConfigs: (_) => de_TargetTrackingScalingConfigurations(_),
    });
};
const de_StartBuildBatchOutput = (output, context) => {
    return smithyClient.take(output, {
        buildBatch: (_) => de_BuildBatch(_),
    });
};
const de_StartBuildOutput = (output, context) => {
    return smithyClient.take(output, {
        build: (_) => de_Build(_),
    });
};
const de_StartCommandExecutionOutput = (output, context) => {
    return smithyClient.take(output, {
        commandExecution: (_) => de_CommandExecution(_),
    });
};
const de_StartSandboxOutput = (output, context) => {
    return smithyClient.take(output, {
        sandbox: (_) => de_Sandbox(_),
    });
};
const de_StopBuildBatchOutput = (output, context) => {
    return smithyClient.take(output, {
        buildBatch: (_) => de_BuildBatch(_),
    });
};
const de_StopBuildOutput = (output, context) => {
    return smithyClient.take(output, {
        build: (_) => de_Build(_),
    });
};
const de_StopSandboxOutput = (output, context) => {
    return smithyClient.take(output, {
        sandbox: (_) => de_Sandbox(_),
    });
};
const de_TargetTrackingScalingConfiguration = (output, context) => {
    return smithyClient.take(output, {
        metricType: smithyClient.expectString,
        targetValue: smithyClient.limitedParseDouble,
    });
};
const de_TargetTrackingScalingConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TargetTrackingScalingConfiguration(entry);
    });
    return retVal;
};
const de_TestCase = (output, context) => {
    return smithyClient.take(output, {
        durationInNanoSeconds: smithyClient.expectLong,
        expired: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        message: smithyClient.expectString,
        name: smithyClient.expectString,
        prefix: smithyClient.expectString,
        reportArn: smithyClient.expectString,
        status: smithyClient.expectString,
        testRawDataPath: smithyClient.expectString,
        testSuiteName: smithyClient.expectString,
    });
};
const de_TestCases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TestCase(entry);
    });
    return retVal;
};
const de_UpdateFleetOutput = (output, context) => {
    return smithyClient.take(output, {
        fleet: (_) => de_Fleet(_),
    });
};
const de_UpdateProjectOutput = (output, context) => {
    return smithyClient.take(output, {
        project: (_) => de_Project(_),
    });
};
const de_UpdateReportGroupOutput = (output, context) => {
    return smithyClient.take(output, {
        reportGroup: (_) => de_ReportGroup(_),
    });
};
const de_UpdateWebhookOutput = (output, context) => {
    return smithyClient.take(output, {
        webhook: (_) => de_Webhook(_),
    });
};
const de_Webhook = (output, context) => {
    return smithyClient.take(output, {
        branchFilter: smithyClient.expectString,
        buildType: smithyClient.expectString,
        filterGroups: smithyClient._json,
        lastModifiedSecret: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        manualCreation: smithyClient.expectBoolean,
        payloadUrl: smithyClient.expectString,
        pullRequestBuildPolicy: smithyClient._json,
        scopeConfiguration: smithyClient._json,
        secret: smithyClient.expectString,
        status: smithyClient.expectString,
        statusMessage: smithyClient.expectString,
        url: smithyClient.expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(CodeBuildServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `CodeBuild_20161006.${operation}`,
    };
}

class BatchDeleteBuildsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "BatchDeleteBuilds", {})
    .n("CodeBuildClient", "BatchDeleteBuildsCommand")
    .f(void 0, void 0)
    .ser(se_BatchDeleteBuildsCommand)
    .de(de_BatchDeleteBuildsCommand)
    .build() {
}

class BatchGetBuildBatchesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "BatchGetBuildBatches", {})
    .n("CodeBuildClient", "BatchGetBuildBatchesCommand")
    .f(void 0, void 0)
    .ser(se_BatchGetBuildBatchesCommand)
    .de(de_BatchGetBuildBatchesCommand)
    .build() {
}

class BatchGetBuildsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "BatchGetBuilds", {})
    .n("CodeBuildClient", "BatchGetBuildsCommand")
    .f(void 0, void 0)
    .ser(se_BatchGetBuildsCommand)
    .de(de_BatchGetBuildsCommand)
    .build() {
}

class BatchGetCommandExecutionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "BatchGetCommandExecutions", {})
    .n("CodeBuildClient", "BatchGetCommandExecutionsCommand")
    .f(void 0, BatchGetCommandExecutionsOutputFilterSensitiveLog)
    .ser(se_BatchGetCommandExecutionsCommand)
    .de(de_BatchGetCommandExecutionsCommand)
    .build() {
}

class BatchGetFleetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "BatchGetFleets", {})
    .n("CodeBuildClient", "BatchGetFleetsCommand")
    .f(void 0, void 0)
    .ser(se_BatchGetFleetsCommand)
    .de(de_BatchGetFleetsCommand)
    .build() {
}

class BatchGetProjectsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "BatchGetProjects", {})
    .n("CodeBuildClient", "BatchGetProjectsCommand")
    .f(void 0, void 0)
    .ser(se_BatchGetProjectsCommand)
    .de(de_BatchGetProjectsCommand)
    .build() {
}

class BatchGetReportGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "BatchGetReportGroups", {})
    .n("CodeBuildClient", "BatchGetReportGroupsCommand")
    .f(void 0, void 0)
    .ser(se_BatchGetReportGroupsCommand)
    .de(de_BatchGetReportGroupsCommand)
    .build() {
}

class BatchGetReportsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "BatchGetReports", {})
    .n("CodeBuildClient", "BatchGetReportsCommand")
    .f(void 0, void 0)
    .ser(se_BatchGetReportsCommand)
    .de(de_BatchGetReportsCommand)
    .build() {
}

class BatchGetSandboxesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "BatchGetSandboxes", {})
    .n("CodeBuildClient", "BatchGetSandboxesCommand")
    .f(void 0, void 0)
    .ser(se_BatchGetSandboxesCommand)
    .de(de_BatchGetSandboxesCommand)
    .build() {
}

class CreateFleetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "CreateFleet", {})
    .n("CodeBuildClient", "CreateFleetCommand")
    .f(void 0, void 0)
    .ser(se_CreateFleetCommand)
    .de(de_CreateFleetCommand)
    .build() {
}

class CreateProjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "CreateProject", {})
    .n("CodeBuildClient", "CreateProjectCommand")
    .f(void 0, void 0)
    .ser(se_CreateProjectCommand)
    .de(de_CreateProjectCommand)
    .build() {
}

class CreateReportGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "CreateReportGroup", {})
    .n("CodeBuildClient", "CreateReportGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreateReportGroupCommand)
    .de(de_CreateReportGroupCommand)
    .build() {
}

class CreateWebhookCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "CreateWebhook", {})
    .n("CodeBuildClient", "CreateWebhookCommand")
    .f(void 0, void 0)
    .ser(se_CreateWebhookCommand)
    .de(de_CreateWebhookCommand)
    .build() {
}

class DeleteBuildBatchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "DeleteBuildBatch", {})
    .n("CodeBuildClient", "DeleteBuildBatchCommand")
    .f(void 0, void 0)
    .ser(se_DeleteBuildBatchCommand)
    .de(de_DeleteBuildBatchCommand)
    .build() {
}

class DeleteFleetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "DeleteFleet", {})
    .n("CodeBuildClient", "DeleteFleetCommand")
    .f(void 0, void 0)
    .ser(se_DeleteFleetCommand)
    .de(de_DeleteFleetCommand)
    .build() {
}

class DeleteProjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "DeleteProject", {})
    .n("CodeBuildClient", "DeleteProjectCommand")
    .f(void 0, void 0)
    .ser(se_DeleteProjectCommand)
    .de(de_DeleteProjectCommand)
    .build() {
}

class DeleteReportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "DeleteReport", {})
    .n("CodeBuildClient", "DeleteReportCommand")
    .f(void 0, void 0)
    .ser(se_DeleteReportCommand)
    .de(de_DeleteReportCommand)
    .build() {
}

class DeleteReportGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "DeleteReportGroup", {})
    .n("CodeBuildClient", "DeleteReportGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeleteReportGroupCommand)
    .de(de_DeleteReportGroupCommand)
    .build() {
}

class DeleteResourcePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "DeleteResourcePolicy", {})
    .n("CodeBuildClient", "DeleteResourcePolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteResourcePolicyCommand)
    .de(de_DeleteResourcePolicyCommand)
    .build() {
}

class DeleteSourceCredentialsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "DeleteSourceCredentials", {})
    .n("CodeBuildClient", "DeleteSourceCredentialsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSourceCredentialsCommand)
    .de(de_DeleteSourceCredentialsCommand)
    .build() {
}

class DeleteWebhookCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "DeleteWebhook", {})
    .n("CodeBuildClient", "DeleteWebhookCommand")
    .f(void 0, void 0)
    .ser(se_DeleteWebhookCommand)
    .de(de_DeleteWebhookCommand)
    .build() {
}

class DescribeCodeCoveragesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "DescribeCodeCoverages", {})
    .n("CodeBuildClient", "DescribeCodeCoveragesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCodeCoveragesCommand)
    .de(de_DescribeCodeCoveragesCommand)
    .build() {
}

class DescribeTestCasesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "DescribeTestCases", {})
    .n("CodeBuildClient", "DescribeTestCasesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTestCasesCommand)
    .de(de_DescribeTestCasesCommand)
    .build() {
}

class GetReportGroupTrendCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "GetReportGroupTrend", {})
    .n("CodeBuildClient", "GetReportGroupTrendCommand")
    .f(void 0, void 0)
    .ser(se_GetReportGroupTrendCommand)
    .de(de_GetReportGroupTrendCommand)
    .build() {
}

class GetResourcePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "GetResourcePolicy", {})
    .n("CodeBuildClient", "GetResourcePolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetResourcePolicyCommand)
    .de(de_GetResourcePolicyCommand)
    .build() {
}

class ImportSourceCredentialsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ImportSourceCredentials", {})
    .n("CodeBuildClient", "ImportSourceCredentialsCommand")
    .f(ImportSourceCredentialsInputFilterSensitiveLog, void 0)
    .ser(se_ImportSourceCredentialsCommand)
    .de(de_ImportSourceCredentialsCommand)
    .build() {
}

class InvalidateProjectCacheCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "InvalidateProjectCache", {})
    .n("CodeBuildClient", "InvalidateProjectCacheCommand")
    .f(void 0, void 0)
    .ser(se_InvalidateProjectCacheCommand)
    .de(de_InvalidateProjectCacheCommand)
    .build() {
}

class ListBuildBatchesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListBuildBatches", {})
    .n("CodeBuildClient", "ListBuildBatchesCommand")
    .f(void 0, void 0)
    .ser(se_ListBuildBatchesCommand)
    .de(de_ListBuildBatchesCommand)
    .build() {
}

class ListBuildBatchesForProjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListBuildBatchesForProject", {})
    .n("CodeBuildClient", "ListBuildBatchesForProjectCommand")
    .f(void 0, void 0)
    .ser(se_ListBuildBatchesForProjectCommand)
    .de(de_ListBuildBatchesForProjectCommand)
    .build() {
}

class ListBuildsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListBuilds", {})
    .n("CodeBuildClient", "ListBuildsCommand")
    .f(void 0, void 0)
    .ser(se_ListBuildsCommand)
    .de(de_ListBuildsCommand)
    .build() {
}

class ListBuildsForProjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListBuildsForProject", {})
    .n("CodeBuildClient", "ListBuildsForProjectCommand")
    .f(void 0, void 0)
    .ser(se_ListBuildsForProjectCommand)
    .de(de_ListBuildsForProjectCommand)
    .build() {
}

class ListCommandExecutionsForSandboxCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListCommandExecutionsForSandbox", {})
    .n("CodeBuildClient", "ListCommandExecutionsForSandboxCommand")
    .f(ListCommandExecutionsForSandboxInputFilterSensitiveLog, ListCommandExecutionsForSandboxOutputFilterSensitiveLog)
    .ser(se_ListCommandExecutionsForSandboxCommand)
    .de(de_ListCommandExecutionsForSandboxCommand)
    .build() {
}

class ListCuratedEnvironmentImagesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListCuratedEnvironmentImages", {})
    .n("CodeBuildClient", "ListCuratedEnvironmentImagesCommand")
    .f(void 0, void 0)
    .ser(se_ListCuratedEnvironmentImagesCommand)
    .de(de_ListCuratedEnvironmentImagesCommand)
    .build() {
}

class ListFleetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListFleets", {})
    .n("CodeBuildClient", "ListFleetsCommand")
    .f(ListFleetsInputFilterSensitiveLog, void 0)
    .ser(se_ListFleetsCommand)
    .de(de_ListFleetsCommand)
    .build() {
}

class ListProjectsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListProjects", {})
    .n("CodeBuildClient", "ListProjectsCommand")
    .f(void 0, void 0)
    .ser(se_ListProjectsCommand)
    .de(de_ListProjectsCommand)
    .build() {
}

class ListReportGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListReportGroups", {})
    .n("CodeBuildClient", "ListReportGroupsCommand")
    .f(void 0, void 0)
    .ser(se_ListReportGroupsCommand)
    .de(de_ListReportGroupsCommand)
    .build() {
}

class ListReportsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListReports", {})
    .n("CodeBuildClient", "ListReportsCommand")
    .f(void 0, void 0)
    .ser(se_ListReportsCommand)
    .de(de_ListReportsCommand)
    .build() {
}

class ListReportsForReportGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListReportsForReportGroup", {})
    .n("CodeBuildClient", "ListReportsForReportGroupCommand")
    .f(void 0, void 0)
    .ser(se_ListReportsForReportGroupCommand)
    .de(de_ListReportsForReportGroupCommand)
    .build() {
}

class ListSandboxesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListSandboxes", {})
    .n("CodeBuildClient", "ListSandboxesCommand")
    .f(void 0, void 0)
    .ser(se_ListSandboxesCommand)
    .de(de_ListSandboxesCommand)
    .build() {
}

class ListSandboxesForProjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListSandboxesForProject", {})
    .n("CodeBuildClient", "ListSandboxesForProjectCommand")
    .f(ListSandboxesForProjectInputFilterSensitiveLog, void 0)
    .ser(se_ListSandboxesForProjectCommand)
    .de(de_ListSandboxesForProjectCommand)
    .build() {
}

class ListSharedProjectsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListSharedProjects", {})
    .n("CodeBuildClient", "ListSharedProjectsCommand")
    .f(void 0, void 0)
    .ser(se_ListSharedProjectsCommand)
    .de(de_ListSharedProjectsCommand)
    .build() {
}

class ListSharedReportGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListSharedReportGroups", {})
    .n("CodeBuildClient", "ListSharedReportGroupsCommand")
    .f(void 0, void 0)
    .ser(se_ListSharedReportGroupsCommand)
    .de(de_ListSharedReportGroupsCommand)
    .build() {
}

class ListSourceCredentialsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "ListSourceCredentials", {})
    .n("CodeBuildClient", "ListSourceCredentialsCommand")
    .f(void 0, void 0)
    .ser(se_ListSourceCredentialsCommand)
    .de(de_ListSourceCredentialsCommand)
    .build() {
}

class PutResourcePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "PutResourcePolicy", {})
    .n("CodeBuildClient", "PutResourcePolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutResourcePolicyCommand)
    .de(de_PutResourcePolicyCommand)
    .build() {
}

class RetryBuildBatchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "RetryBuildBatch", {})
    .n("CodeBuildClient", "RetryBuildBatchCommand")
    .f(void 0, void 0)
    .ser(se_RetryBuildBatchCommand)
    .de(de_RetryBuildBatchCommand)
    .build() {
}

class RetryBuildCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "RetryBuild", {})
    .n("CodeBuildClient", "RetryBuildCommand")
    .f(void 0, void 0)
    .ser(se_RetryBuildCommand)
    .de(de_RetryBuildCommand)
    .build() {
}

class StartBuildBatchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "StartBuildBatch", {})
    .n("CodeBuildClient", "StartBuildBatchCommand")
    .f(void 0, void 0)
    .ser(se_StartBuildBatchCommand)
    .de(de_StartBuildBatchCommand)
    .build() {
}

class StartBuildCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "StartBuild", {})
    .n("CodeBuildClient", "StartBuildCommand")
    .f(void 0, void 0)
    .ser(se_StartBuildCommand)
    .de(de_StartBuildCommand)
    .build() {
}

class StartCommandExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "StartCommandExecution", {})
    .n("CodeBuildClient", "StartCommandExecutionCommand")
    .f(StartCommandExecutionInputFilterSensitiveLog, StartCommandExecutionOutputFilterSensitiveLog)
    .ser(se_StartCommandExecutionCommand)
    .de(de_StartCommandExecutionCommand)
    .build() {
}

class StartSandboxCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "StartSandbox", {})
    .n("CodeBuildClient", "StartSandboxCommand")
    .f(StartSandboxInputFilterSensitiveLog, void 0)
    .ser(se_StartSandboxCommand)
    .de(de_StartSandboxCommand)
    .build() {
}

class StartSandboxConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "StartSandboxConnection", {})
    .n("CodeBuildClient", "StartSandboxConnectionCommand")
    .f(void 0, void 0)
    .ser(se_StartSandboxConnectionCommand)
    .de(de_StartSandboxConnectionCommand)
    .build() {
}

class StopBuildBatchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "StopBuildBatch", {})
    .n("CodeBuildClient", "StopBuildBatchCommand")
    .f(void 0, void 0)
    .ser(se_StopBuildBatchCommand)
    .de(de_StopBuildBatchCommand)
    .build() {
}

class StopBuildCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "StopBuild", {})
    .n("CodeBuildClient", "StopBuildCommand")
    .f(void 0, void 0)
    .ser(se_StopBuildCommand)
    .de(de_StopBuildCommand)
    .build() {
}

class StopSandboxCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "StopSandbox", {})
    .n("CodeBuildClient", "StopSandboxCommand")
    .f(void 0, void 0)
    .ser(se_StopSandboxCommand)
    .de(de_StopSandboxCommand)
    .build() {
}

class UpdateFleetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "UpdateFleet", {})
    .n("CodeBuildClient", "UpdateFleetCommand")
    .f(void 0, void 0)
    .ser(se_UpdateFleetCommand)
    .de(de_UpdateFleetCommand)
    .build() {
}

class UpdateProjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "UpdateProject", {})
    .n("CodeBuildClient", "UpdateProjectCommand")
    .f(void 0, void 0)
    .ser(se_UpdateProjectCommand)
    .de(de_UpdateProjectCommand)
    .build() {
}

class UpdateProjectVisibilityCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "UpdateProjectVisibility", {})
    .n("CodeBuildClient", "UpdateProjectVisibilityCommand")
    .f(void 0, void 0)
    .ser(se_UpdateProjectVisibilityCommand)
    .de(de_UpdateProjectVisibilityCommand)
    .build() {
}

class UpdateReportGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "UpdateReportGroup", {})
    .n("CodeBuildClient", "UpdateReportGroupCommand")
    .f(void 0, void 0)
    .ser(se_UpdateReportGroupCommand)
    .de(de_UpdateReportGroupCommand)
    .build() {
}

class UpdateWebhookCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CodeBuild_20161006", "UpdateWebhook", {})
    .n("CodeBuildClient", "UpdateWebhookCommand")
    .f(void 0, void 0)
    .ser(se_UpdateWebhookCommand)
    .de(de_UpdateWebhookCommand)
    .build() {
}

const commands = {
    BatchDeleteBuildsCommand,
    BatchGetBuildBatchesCommand,
    BatchGetBuildsCommand,
    BatchGetCommandExecutionsCommand,
    BatchGetFleetsCommand,
    BatchGetProjectsCommand,
    BatchGetReportGroupsCommand,
    BatchGetReportsCommand,
    BatchGetSandboxesCommand,
    CreateFleetCommand,
    CreateProjectCommand,
    CreateReportGroupCommand,
    CreateWebhookCommand,
    DeleteBuildBatchCommand,
    DeleteFleetCommand,
    DeleteProjectCommand,
    DeleteReportCommand,
    DeleteReportGroupCommand,
    DeleteResourcePolicyCommand,
    DeleteSourceCredentialsCommand,
    DeleteWebhookCommand,
    DescribeCodeCoveragesCommand,
    DescribeTestCasesCommand,
    GetReportGroupTrendCommand,
    GetResourcePolicyCommand,
    ImportSourceCredentialsCommand,
    InvalidateProjectCacheCommand,
    ListBuildBatchesCommand,
    ListBuildBatchesForProjectCommand,
    ListBuildsCommand,
    ListBuildsForProjectCommand,
    ListCommandExecutionsForSandboxCommand,
    ListCuratedEnvironmentImagesCommand,
    ListFleetsCommand,
    ListProjectsCommand,
    ListReportGroupsCommand,
    ListReportsCommand,
    ListReportsForReportGroupCommand,
    ListSandboxesCommand,
    ListSandboxesForProjectCommand,
    ListSharedProjectsCommand,
    ListSharedReportGroupsCommand,
    ListSourceCredentialsCommand,
    PutResourcePolicyCommand,
    RetryBuildCommand,
    RetryBuildBatchCommand,
    StartBuildCommand,
    StartBuildBatchCommand,
    StartCommandExecutionCommand,
    StartSandboxCommand,
    StartSandboxConnectionCommand,
    StopBuildCommand,
    StopBuildBatchCommand,
    StopSandboxCommand,
    UpdateFleetCommand,
    UpdateProjectCommand,
    UpdateProjectVisibilityCommand,
    UpdateReportGroupCommand,
    UpdateWebhookCommand,
};
class CodeBuild extends CodeBuildClient {
}
smithyClient.createAggregatedClient(commands, CodeBuild);

const paginateDescribeCodeCoverages = core.createPaginator(CodeBuildClient, DescribeCodeCoveragesCommand, "nextToken", "nextToken", "maxResults");

const paginateDescribeTestCases = core.createPaginator(CodeBuildClient, DescribeTestCasesCommand, "nextToken", "nextToken", "maxResults");

const paginateListBuildBatchesForProject = core.createPaginator(CodeBuildClient, ListBuildBatchesForProjectCommand, "nextToken", "nextToken", "maxResults");

const paginateListBuildBatches = core.createPaginator(CodeBuildClient, ListBuildBatchesCommand, "nextToken", "nextToken", "maxResults");

const paginateListBuildsForProject = core.createPaginator(CodeBuildClient, ListBuildsForProjectCommand, "nextToken", "nextToken", "");

const paginateListBuilds = core.createPaginator(CodeBuildClient, ListBuildsCommand, "nextToken", "nextToken", "");

const paginateListCommandExecutionsForSandbox = core.createPaginator(CodeBuildClient, ListCommandExecutionsForSandboxCommand, "nextToken", "nextToken", "maxResults");

const paginateListFleets = core.createPaginator(CodeBuildClient, ListFleetsCommand, "nextToken", "nextToken", "maxResults");

const paginateListProjects = core.createPaginator(CodeBuildClient, ListProjectsCommand, "nextToken", "nextToken", "");

const paginateListReportGroups = core.createPaginator(CodeBuildClient, ListReportGroupsCommand, "nextToken", "nextToken", "maxResults");

const paginateListReportsForReportGroup = core.createPaginator(CodeBuildClient, ListReportsForReportGroupCommand, "nextToken", "nextToken", "maxResults");

const paginateListReports = core.createPaginator(CodeBuildClient, ListReportsCommand, "nextToken", "nextToken", "maxResults");

const paginateListSandboxesForProject = core.createPaginator(CodeBuildClient, ListSandboxesForProjectCommand, "nextToken", "nextToken", "maxResults");

const paginateListSandboxes = core.createPaginator(CodeBuildClient, ListSandboxesCommand, "nextToken", "nextToken", "maxResults");

const paginateListSharedProjects = core.createPaginator(CodeBuildClient, ListSharedProjectsCommand, "nextToken", "nextToken", "maxResults");

const paginateListSharedReportGroups = core.createPaginator(CodeBuildClient, ListSharedReportGroupsCommand, "nextToken", "nextToken", "maxResults");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AccountLimitExceededException = AccountLimitExceededException;
exports.AccountSuspendedException = AccountSuspendedException;
exports.ArtifactNamespace = ArtifactNamespace;
exports.ArtifactPackaging = ArtifactPackaging;
exports.ArtifactsType = ArtifactsType;
exports.AuthType = AuthType;
exports.BatchDeleteBuildsCommand = BatchDeleteBuildsCommand;
exports.BatchGetBuildBatchesCommand = BatchGetBuildBatchesCommand;
exports.BatchGetBuildsCommand = BatchGetBuildsCommand;
exports.BatchGetCommandExecutionsCommand = BatchGetCommandExecutionsCommand;
exports.BatchGetCommandExecutionsOutputFilterSensitiveLog = BatchGetCommandExecutionsOutputFilterSensitiveLog;
exports.BatchGetFleetsCommand = BatchGetFleetsCommand;
exports.BatchGetProjectsCommand = BatchGetProjectsCommand;
exports.BatchGetReportGroupsCommand = BatchGetReportGroupsCommand;
exports.BatchGetReportsCommand = BatchGetReportsCommand;
exports.BatchGetSandboxesCommand = BatchGetSandboxesCommand;
exports.BatchReportModeType = BatchReportModeType;
exports.BucketOwnerAccess = BucketOwnerAccess;
exports.BuildBatchPhaseType = BuildBatchPhaseType;
exports.BuildPhaseType = BuildPhaseType;
exports.CacheMode = CacheMode;
exports.CacheType = CacheType;
exports.CodeBuild = CodeBuild;
exports.CodeBuildClient = CodeBuildClient;
exports.CodeBuildServiceException = CodeBuildServiceException;
exports.CommandExecutionFilterSensitiveLog = CommandExecutionFilterSensitiveLog;
exports.CommandType = CommandType;
exports.ComputeType = ComputeType;
exports.CreateFleetCommand = CreateFleetCommand;
exports.CreateProjectCommand = CreateProjectCommand;
exports.CreateReportGroupCommand = CreateReportGroupCommand;
exports.CreateWebhookCommand = CreateWebhookCommand;
exports.CredentialProviderType = CredentialProviderType;
exports.DeleteBuildBatchCommand = DeleteBuildBatchCommand;
exports.DeleteFleetCommand = DeleteFleetCommand;
exports.DeleteProjectCommand = DeleteProjectCommand;
exports.DeleteReportCommand = DeleteReportCommand;
exports.DeleteReportGroupCommand = DeleteReportGroupCommand;
exports.DeleteResourcePolicyCommand = DeleteResourcePolicyCommand;
exports.DeleteSourceCredentialsCommand = DeleteSourceCredentialsCommand;
exports.DeleteWebhookCommand = DeleteWebhookCommand;
exports.DescribeCodeCoveragesCommand = DescribeCodeCoveragesCommand;
exports.DescribeTestCasesCommand = DescribeTestCasesCommand;
exports.EnvironmentType = EnvironmentType;
exports.EnvironmentVariableType = EnvironmentVariableType;
exports.FileSystemType = FileSystemType;
exports.FleetContextCode = FleetContextCode;
exports.FleetOverflowBehavior = FleetOverflowBehavior;
exports.FleetProxyRuleBehavior = FleetProxyRuleBehavior;
exports.FleetProxyRuleEffectType = FleetProxyRuleEffectType;
exports.FleetProxyRuleType = FleetProxyRuleType;
exports.FleetScalingMetricType = FleetScalingMetricType;
exports.FleetScalingType = FleetScalingType;
exports.FleetSortByType = FleetSortByType;
exports.FleetStatusCode = FleetStatusCode;
exports.GetReportGroupTrendCommand = GetReportGroupTrendCommand;
exports.GetResourcePolicyCommand = GetResourcePolicyCommand;
exports.ImagePullCredentialsType = ImagePullCredentialsType;
exports.ImportSourceCredentialsCommand = ImportSourceCredentialsCommand;
exports.ImportSourceCredentialsInputFilterSensitiveLog = ImportSourceCredentialsInputFilterSensitiveLog;
exports.InvalidInputException = InvalidInputException;
exports.InvalidateProjectCacheCommand = InvalidateProjectCacheCommand;
exports.LanguageType = LanguageType;
exports.ListBuildBatchesCommand = ListBuildBatchesCommand;
exports.ListBuildBatchesForProjectCommand = ListBuildBatchesForProjectCommand;
exports.ListBuildsCommand = ListBuildsCommand;
exports.ListBuildsForProjectCommand = ListBuildsForProjectCommand;
exports.ListCommandExecutionsForSandboxCommand = ListCommandExecutionsForSandboxCommand;
exports.ListCommandExecutionsForSandboxInputFilterSensitiveLog = ListCommandExecutionsForSandboxInputFilterSensitiveLog;
exports.ListCommandExecutionsForSandboxOutputFilterSensitiveLog = ListCommandExecutionsForSandboxOutputFilterSensitiveLog;
exports.ListCuratedEnvironmentImagesCommand = ListCuratedEnvironmentImagesCommand;
exports.ListFleetsCommand = ListFleetsCommand;
exports.ListFleetsInputFilterSensitiveLog = ListFleetsInputFilterSensitiveLog;
exports.ListProjectsCommand = ListProjectsCommand;
exports.ListReportGroupsCommand = ListReportGroupsCommand;
exports.ListReportsCommand = ListReportsCommand;
exports.ListReportsForReportGroupCommand = ListReportsForReportGroupCommand;
exports.ListSandboxesCommand = ListSandboxesCommand;
exports.ListSandboxesForProjectCommand = ListSandboxesForProjectCommand;
exports.ListSandboxesForProjectInputFilterSensitiveLog = ListSandboxesForProjectInputFilterSensitiveLog;
exports.ListSharedProjectsCommand = ListSharedProjectsCommand;
exports.ListSharedReportGroupsCommand = ListSharedReportGroupsCommand;
exports.ListSourceCredentialsCommand = ListSourceCredentialsCommand;
exports.LogsConfigStatusType = LogsConfigStatusType;
exports.MachineType = MachineType;
exports.OAuthProviderException = OAuthProviderException;
exports.PlatformType = PlatformType;
exports.ProjectSortByType = ProjectSortByType;
exports.ProjectVisibilityType = ProjectVisibilityType;
exports.PullRequestBuildApproverRole = PullRequestBuildApproverRole;
exports.PullRequestBuildCommentApproval = PullRequestBuildCommentApproval;
exports.PutResourcePolicyCommand = PutResourcePolicyCommand;
exports.ReportCodeCoverageSortByType = ReportCodeCoverageSortByType;
exports.ReportExportConfigType = ReportExportConfigType;
exports.ReportGroupSortByType = ReportGroupSortByType;
exports.ReportGroupStatusType = ReportGroupStatusType;
exports.ReportGroupTrendFieldType = ReportGroupTrendFieldType;
exports.ReportPackagingType = ReportPackagingType;
exports.ReportStatusType = ReportStatusType;
exports.ReportType = ReportType;
exports.ResourceAlreadyExistsException = ResourceAlreadyExistsException;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.RetryBuildBatchCommand = RetryBuildBatchCommand;
exports.RetryBuildBatchType = RetryBuildBatchType;
exports.RetryBuildCommand = RetryBuildCommand;
exports.ServerType = ServerType;
exports.SharedResourceSortByType = SharedResourceSortByType;
exports.SortOrderType = SortOrderType;
exports.SourceAuthType = SourceAuthType;
exports.SourceType = SourceType;
exports.StartBuildBatchCommand = StartBuildBatchCommand;
exports.StartBuildCommand = StartBuildCommand;
exports.StartCommandExecutionCommand = StartCommandExecutionCommand;
exports.StartCommandExecutionInputFilterSensitiveLog = StartCommandExecutionInputFilterSensitiveLog;
exports.StartCommandExecutionOutputFilterSensitiveLog = StartCommandExecutionOutputFilterSensitiveLog;
exports.StartSandboxCommand = StartSandboxCommand;
exports.StartSandboxConnectionCommand = StartSandboxConnectionCommand;
exports.StartSandboxInputFilterSensitiveLog = StartSandboxInputFilterSensitiveLog;
exports.StatusType = StatusType;
exports.StopBuildBatchCommand = StopBuildBatchCommand;
exports.StopBuildCommand = StopBuildCommand;
exports.StopSandboxCommand = StopSandboxCommand;
exports.UpdateFleetCommand = UpdateFleetCommand;
exports.UpdateProjectCommand = UpdateProjectCommand;
exports.UpdateProjectVisibilityCommand = UpdateProjectVisibilityCommand;
exports.UpdateReportGroupCommand = UpdateReportGroupCommand;
exports.UpdateWebhookCommand = UpdateWebhookCommand;
exports.WebhookBuildType = WebhookBuildType;
exports.WebhookFilterType = WebhookFilterType;
exports.WebhookScopeType = WebhookScopeType;
exports.WebhookStatus = WebhookStatus;
exports.paginateDescribeCodeCoverages = paginateDescribeCodeCoverages;
exports.paginateDescribeTestCases = paginateDescribeTestCases;
exports.paginateListBuildBatches = paginateListBuildBatches;
exports.paginateListBuildBatchesForProject = paginateListBuildBatchesForProject;
exports.paginateListBuilds = paginateListBuilds;
exports.paginateListBuildsForProject = paginateListBuildsForProject;
exports.paginateListCommandExecutionsForSandbox = paginateListCommandExecutionsForSandbox;
exports.paginateListFleets = paginateListFleets;
exports.paginateListProjects = paginateListProjects;
exports.paginateListReportGroups = paginateListReportGroups;
exports.paginateListReports = paginateListReports;
exports.paginateListReportsForReportGroup = paginateListReportsForReportGroup;
exports.paginateListSandboxes = paginateListSandboxes;
exports.paginateListSandboxesForProject = paginateListSandboxesForProject;
exports.paginateListSharedProjects = paginateListSharedProjects;
exports.paginateListSharedReportGroups = paginateListSharedReportGroups;
