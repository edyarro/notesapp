'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "amplify",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class AmplifyClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultAmplifyHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class AmplifyServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, AmplifyServiceException.prototype);
    }
}

class BadRequestException extends AmplifyServiceException {
    name = "BadRequestException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BadRequestException.prototype);
    }
}
const Stage = {
    BETA: "BETA",
    DEVELOPMENT: "DEVELOPMENT",
    EXPERIMENTAL: "EXPERIMENTAL",
    PRODUCTION: "PRODUCTION",
    PULL_REQUEST: "PULL_REQUEST",
};
const CacheConfigType = {
    AMPLIFY_MANAGED: "AMPLIFY_MANAGED",
    AMPLIFY_MANAGED_NO_COOKIES: "AMPLIFY_MANAGED_NO_COOKIES",
};
const BuildComputeType = {
    LARGE_16GB: "LARGE_16GB",
    STANDARD_8GB: "STANDARD_8GB",
    XLARGE_72GB: "XLARGE_72GB",
};
const Platform = {
    WEB: "WEB",
    WEB_COMPUTE: "WEB_COMPUTE",
    WEB_DYNAMIC: "WEB_DYNAMIC",
};
const RepositoryCloneMethod = {
    SIGV4: "SIGV4",
    SSH: "SSH",
    TOKEN: "TOKEN",
};
const WafStatus = {
    ASSOCIATING: "ASSOCIATING",
    ASSOCIATION_FAILED: "ASSOCIATION_FAILED",
    ASSOCIATION_SUCCESS: "ASSOCIATION_SUCCESS",
    DISASSOCIATING: "DISASSOCIATING",
    DISASSOCIATION_FAILED: "DISASSOCIATION_FAILED",
};
class DependentServiceFailureException extends AmplifyServiceException {
    name = "DependentServiceFailureException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "DependentServiceFailureException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, DependentServiceFailureException.prototype);
    }
}
class InternalFailureException extends AmplifyServiceException {
    name = "InternalFailureException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalFailureException.prototype);
    }
}
class LimitExceededException extends AmplifyServiceException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class UnauthorizedException extends AmplifyServiceException {
    name = "UnauthorizedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
    }
}
class NotFoundException extends AmplifyServiceException {
    name = "NotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
const CertificateType = {
    AMPLIFY_MANAGED: "AMPLIFY_MANAGED",
    CUSTOM: "CUSTOM",
};
const DomainStatus = {
    AVAILABLE: "AVAILABLE",
    AWAITING_APP_CNAME: "AWAITING_APP_CNAME",
    CREATING: "CREATING",
    FAILED: "FAILED",
    IMPORTING_CUSTOM_CERTIFICATE: "IMPORTING_CUSTOM_CERTIFICATE",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING_DEPLOYMENT: "PENDING_DEPLOYMENT",
    PENDING_VERIFICATION: "PENDING_VERIFICATION",
    REQUESTING_CERTIFICATE: "REQUESTING_CERTIFICATE",
    UPDATING: "UPDATING",
};
const UpdateStatus = {
    AWAITING_APP_CNAME: "AWAITING_APP_CNAME",
    IMPORTING_CUSTOM_CERTIFICATE: "IMPORTING_CUSTOM_CERTIFICATE",
    PENDING_DEPLOYMENT: "PENDING_DEPLOYMENT",
    PENDING_VERIFICATION: "PENDING_VERIFICATION",
    REQUESTING_CERTIFICATE: "REQUESTING_CERTIFICATE",
    UPDATE_COMPLETE: "UPDATE_COMPLETE",
    UPDATE_FAILED: "UPDATE_FAILED",
};
const JobType = {
    MANUAL: "MANUAL",
    RELEASE: "RELEASE",
    RETRY: "RETRY",
    WEB_HOOK: "WEB_HOOK",
};
const SourceUrlType = {
    BUCKET_PREFIX: "BUCKET_PREFIX",
    ZIP: "ZIP",
};
const JobStatus = {
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
    CREATED: "CREATED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    PROVISIONING: "PROVISIONING",
    RUNNING: "RUNNING",
    SUCCEED: "SUCCEED",
};
class ResourceNotFoundException extends AmplifyServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    code;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.code = opts.code;
    }
}
const AutoBranchCreationConfigFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.basicAuthCredentials && { basicAuthCredentials: smithyClient.SENSITIVE_STRING }),
    ...(obj.buildSpec && { buildSpec: smithyClient.SENSITIVE_STRING }),
});
const CreateAppRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.oauthToken && { oauthToken: smithyClient.SENSITIVE_STRING }),
    ...(obj.accessToken && { accessToken: smithyClient.SENSITIVE_STRING }),
    ...(obj.basicAuthCredentials && { basicAuthCredentials: smithyClient.SENSITIVE_STRING }),
    ...(obj.buildSpec && { buildSpec: smithyClient.SENSITIVE_STRING }),
    ...(obj.autoBranchCreationConfig && {
        autoBranchCreationConfig: AutoBranchCreationConfigFilterSensitiveLog(obj.autoBranchCreationConfig),
    }),
});
const AppFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.basicAuthCredentials && { basicAuthCredentials: smithyClient.SENSITIVE_STRING }),
    ...(obj.buildSpec && { buildSpec: smithyClient.SENSITIVE_STRING }),
    ...(obj.autoBranchCreationConfig && {
        autoBranchCreationConfig: AutoBranchCreationConfigFilterSensitiveLog(obj.autoBranchCreationConfig),
    }),
});
const CreateAppResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.app && { app: AppFilterSensitiveLog(obj.app) }),
});
const CreateBranchRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.basicAuthCredentials && { basicAuthCredentials: smithyClient.SENSITIVE_STRING }),
    ...(obj.buildSpec && { buildSpec: smithyClient.SENSITIVE_STRING }),
});
const BranchFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.basicAuthCredentials && { basicAuthCredentials: smithyClient.SENSITIVE_STRING }),
    ...(obj.buildSpec && { buildSpec: smithyClient.SENSITIVE_STRING }),
});
const CreateBranchResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.branch && { branch: BranchFilterSensitiveLog(obj.branch) }),
});
const DeleteAppResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.app && { app: AppFilterSensitiveLog(obj.app) }),
});
const DeleteBranchResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.branch && { branch: BranchFilterSensitiveLog(obj.branch) }),
});
const GetAppResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.app && { app: AppFilterSensitiveLog(obj.app) }),
});
const GetBranchResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.branch && { branch: BranchFilterSensitiveLog(obj.branch) }),
});
const ListAppsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.apps && { apps: obj.apps.map((item) => AppFilterSensitiveLog(item)) }),
});
const ListBranchesResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.branches && { branches: obj.branches.map((item) => BranchFilterSensitiveLog(item)) }),
});
const UpdateAppRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.basicAuthCredentials && { basicAuthCredentials: smithyClient.SENSITIVE_STRING }),
    ...(obj.buildSpec && { buildSpec: smithyClient.SENSITIVE_STRING }),
    ...(obj.autoBranchCreationConfig && {
        autoBranchCreationConfig: AutoBranchCreationConfigFilterSensitiveLog(obj.autoBranchCreationConfig),
    }),
    ...(obj.oauthToken && { oauthToken: smithyClient.SENSITIVE_STRING }),
    ...(obj.accessToken && { accessToken: smithyClient.SENSITIVE_STRING }),
});
const UpdateAppResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.app && { app: AppFilterSensitiveLog(obj.app) }),
});
const UpdateBranchRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.basicAuthCredentials && { basicAuthCredentials: smithyClient.SENSITIVE_STRING }),
    ...(obj.buildSpec && { buildSpec: smithyClient.SENSITIVE_STRING }),
});
const UpdateBranchResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.branch && { branch: BranchFilterSensitiveLog(obj.branch) }),
});

const se_CreateAppCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        accessToken: [],
        autoBranchCreationConfig: (_) => smithyClient._json(_),
        autoBranchCreationPatterns: (_) => smithyClient._json(_),
        basicAuthCredentials: [],
        buildSpec: [],
        cacheConfig: (_) => smithyClient._json(_),
        computeRoleArn: [],
        customHeaders: [],
        customRules: (_) => smithyClient._json(_),
        description: [],
        enableAutoBranchCreation: [],
        enableBasicAuth: [],
        enableBranchAutoBuild: [],
        enableBranchAutoDeletion: [],
        environmentVariables: (_) => smithyClient._json(_),
        iamServiceRoleArn: [],
        jobConfig: (_) => smithyClient._json(_),
        name: [],
        oauthToken: [],
        platform: [],
        repository: [],
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateBackendEnvironmentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/backendenvironments");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        deploymentArtifacts: [],
        environmentName: [],
        stackName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateBranchCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/branches");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        backend: (_) => smithyClient._json(_),
        backendEnvironmentArn: [],
        basicAuthCredentials: [],
        branchName: [],
        buildSpec: [],
        computeRoleArn: [],
        description: [],
        displayName: [],
        enableAutoBuild: [],
        enableBasicAuth: [],
        enableNotification: [],
        enablePerformanceMode: [],
        enablePullRequestPreview: [],
        enableSkewProtection: [],
        environmentVariables: (_) => smithyClient._json(_),
        framework: [],
        pullRequestEnvironmentName: [],
        stage: [],
        tags: (_) => smithyClient._json(_),
        ttl: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateDeploymentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/branches/{branchName}/deployments");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        fileMap: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateDomainAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/domains");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        autoSubDomainCreationPatterns: (_) => smithyClient._json(_),
        autoSubDomainIAMRole: [],
        certificateSettings: (_) => smithyClient._json(_),
        domainName: [],
        enableAutoSubDomain: [],
        subDomainSettings: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateWebhookCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/webhooks");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        branchName: [],
        description: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DeleteAppCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteBackendEnvironmentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/backendenvironments/{environmentName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteBranchCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteDomainAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/domains/{domainName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteJobCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}/jobs/{jobId}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    b.p("jobId", () => input.jobId, "{jobId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteWebhookCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/webhooks/{webhookId}");
    b.p("webhookId", () => input.webhookId, "{webhookId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_GenerateAccessLogsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/accesslogs");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        domainName: [],
        endTime: (_) => _.getTime() / 1_000,
        startTime: (_) => _.getTime() / 1_000,
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_GetAppCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetArtifactUrlCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/artifacts/{artifactId}");
    b.p("artifactId", () => input.artifactId, "{artifactId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetBackendEnvironmentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/backendenvironments/{environmentName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetBranchCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetDomainAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/domains/{domainName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetJobCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}/jobs/{jobId}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    b.p("jobId", () => input.jobId, "{jobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetWebhookCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/webhooks/{webhookId}");
    b.p("webhookId", () => input.webhookId, "{webhookId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListAppsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps");
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListArtifactsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}/jobs/{jobId}/artifacts");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    b.p("jobId", () => input.jobId, "{jobId}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListBackendEnvironmentsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/backendenvironments");
    b.p("appId", () => input.appId, "{appId}", false);
    const query = smithyClient.map({
        [_eN]: [, input[_eN]],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListBranchesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches");
    b.p("appId", () => input.appId, "{appId}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListDomainAssociationsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/domains");
    b.p("appId", () => input.appId, "{appId}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListJobsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}/jobs");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListWebhooksCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/webhooks");
    b.p("appId", () => input.appId, "{appId}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_StartDeploymentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/branches/{branchName}/deployments/start");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        jobId: [],
        sourceUrl: [],
        sourceUrlType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StartJobCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/branches/{branchName}/jobs");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        commitId: [],
        commitMessage: [],
        commitTime: (_) => _.getTime() / 1_000,
        jobId: [],
        jobReason: [],
        jobType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StopJobCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/apps/{appId}/branches/{branchName}/jobs/{jobId}/stop");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    b.p("jobId", () => input.jobId, "{jobId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_TagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UntagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = smithyClient.map({
        [_tK]: [smithyClient.expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateAppCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}");
    b.p("appId", () => input.appId, "{appId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        accessToken: [],
        autoBranchCreationConfig: (_) => smithyClient._json(_),
        autoBranchCreationPatterns: (_) => smithyClient._json(_),
        basicAuthCredentials: [],
        buildSpec: [],
        cacheConfig: (_) => smithyClient._json(_),
        computeRoleArn: [],
        customHeaders: [],
        customRules: (_) => smithyClient._json(_),
        description: [],
        enableAutoBranchCreation: [],
        enableBasicAuth: [],
        enableBranchAutoBuild: [],
        enableBranchAutoDeletion: [],
        environmentVariables: (_) => smithyClient._json(_),
        iamServiceRoleArn: [],
        jobConfig: (_) => smithyClient._json(_),
        name: [],
        oauthToken: [],
        platform: [],
        repository: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateBranchCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/branches/{branchName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("branchName", () => input.branchName, "{branchName}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        backend: (_) => smithyClient._json(_),
        backendEnvironmentArn: [],
        basicAuthCredentials: [],
        buildSpec: [],
        computeRoleArn: [],
        description: [],
        displayName: [],
        enableAutoBuild: [],
        enableBasicAuth: [],
        enableNotification: [],
        enablePerformanceMode: [],
        enablePullRequestPreview: [],
        enableSkewProtection: [],
        environmentVariables: (_) => smithyClient._json(_),
        framework: [],
        pullRequestEnvironmentName: [],
        stage: [],
        ttl: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateDomainAssociationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/apps/{appId}/domains/{domainName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("domainName", () => input.domainName, "{domainName}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        autoSubDomainCreationPatterns: (_) => smithyClient._json(_),
        autoSubDomainIAMRole: [],
        certificateSettings: (_) => smithyClient._json(_),
        enableAutoSubDomain: [],
        subDomainSettings: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateWebhookCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/webhooks/{webhookId}");
    b.p("webhookId", () => input.webhookId, "{webhookId}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        branchName: [],
        description: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const de_CreateAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        app: (_) => de_App(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateBackendEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        backendEnvironment: (_) => de_BackendEnvironment(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateBranchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        branch: (_) => de_Branch(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        fileUploadUrls: smithyClient._json,
        jobId: smithyClient.expectString,
        zipUploadUrl: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateDomainAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        domainAssociation: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateWebhookCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        webhook: (_) => de_Webhook(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeleteAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        app: (_) => de_App(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeleteBackendEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        backendEnvironment: (_) => de_BackendEnvironment(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeleteBranchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        branch: (_) => de_Branch(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeleteDomainAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        domainAssociation: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeleteJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        jobSummary: (_) => de_JobSummary(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeleteWebhookCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        webhook: (_) => de_Webhook(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GenerateAccessLogsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        logUrl: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        app: (_) => de_App(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetArtifactUrlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        artifactId: smithyClient.expectString,
        artifactUrl: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetBackendEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        backendEnvironment: (_) => de_BackendEnvironment(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetBranchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        branch: (_) => de_Branch(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetDomainAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        domainAssociation: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        job: (_) => de_Job(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetWebhookCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        webhook: (_) => de_Webhook(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListAppsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        apps: (_) => de_Apps(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListArtifactsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        artifacts: smithyClient._json,
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListBackendEnvironmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        backendEnvironments: (_) => de_BackendEnvironments(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListBranchesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        branches: (_) => de_Branches(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListDomainAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        domainAssociations: smithyClient._json,
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        jobSummaries: (_) => de_JobSummaries(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListWebhooksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        nextToken: smithyClient.expectString,
        webhooks: (_) => de_Webhooks(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        jobSummary: (_) => de_JobSummary(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        jobSummary: (_) => de_JobSummary(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StopJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        jobSummary: (_) => de_JobSummary(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UpdateAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        app: (_) => de_App(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateBranchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        branch: (_) => de_Branch(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateDomainAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        domainAssociation: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateWebhookCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        webhook: (_) => de_Webhook(_),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.amplify#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput);
        case "DependentServiceFailureException":
        case "com.amazonaws.amplify#DependentServiceFailureException":
            throw await de_DependentServiceFailureExceptionRes(parsedOutput);
        case "InternalFailureException":
        case "com.amazonaws.amplify#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.amplify#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "UnauthorizedException":
        case "com.amazonaws.amplify#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput);
        case "NotFoundException":
        case "com.amazonaws.amplify#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.amplify#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = smithyClient.withBaseException(AmplifyServiceException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_DependentServiceFailureExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new DependentServiceFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_InternalFailureExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        code: smithyClient.expectString,
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_App = (output, context) => {
    return smithyClient.take(output, {
        appArn: smithyClient.expectString,
        appId: smithyClient.expectString,
        autoBranchCreationConfig: smithyClient._json,
        autoBranchCreationPatterns: smithyClient._json,
        basicAuthCredentials: smithyClient.expectString,
        buildSpec: smithyClient.expectString,
        cacheConfig: smithyClient._json,
        computeRoleArn: smithyClient.expectString,
        createTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        customHeaders: smithyClient.expectString,
        customRules: smithyClient._json,
        defaultDomain: smithyClient.expectString,
        description: smithyClient.expectString,
        enableAutoBranchCreation: smithyClient.expectBoolean,
        enableBasicAuth: smithyClient.expectBoolean,
        enableBranchAutoBuild: smithyClient.expectBoolean,
        enableBranchAutoDeletion: smithyClient.expectBoolean,
        environmentVariables: smithyClient._json,
        iamServiceRoleArn: smithyClient.expectString,
        jobConfig: smithyClient._json,
        name: smithyClient.expectString,
        platform: smithyClient.expectString,
        productionBranch: (_) => de_ProductionBranch(_),
        repository: smithyClient.expectString,
        repositoryCloneMethod: smithyClient.expectString,
        tags: smithyClient._json,
        updateTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        wafConfiguration: smithyClient._json,
        webhookCreateTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_Apps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_App(entry);
    });
    return retVal;
};
const de_BackendEnvironment = (output, context) => {
    return smithyClient.take(output, {
        backendEnvironmentArn: smithyClient.expectString,
        createTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        deploymentArtifacts: smithyClient.expectString,
        environmentName: smithyClient.expectString,
        stackName: smithyClient.expectString,
        updateTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_BackendEnvironments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BackendEnvironment(entry);
    });
    return retVal;
};
const de_Branch = (output, context) => {
    return smithyClient.take(output, {
        activeJobId: smithyClient.expectString,
        associatedResources: smithyClient._json,
        backend: smithyClient._json,
        backendEnvironmentArn: smithyClient.expectString,
        basicAuthCredentials: smithyClient.expectString,
        branchArn: smithyClient.expectString,
        branchName: smithyClient.expectString,
        buildSpec: smithyClient.expectString,
        computeRoleArn: smithyClient.expectString,
        createTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        customDomains: smithyClient._json,
        description: smithyClient.expectString,
        destinationBranch: smithyClient.expectString,
        displayName: smithyClient.expectString,
        enableAutoBuild: smithyClient.expectBoolean,
        enableBasicAuth: smithyClient.expectBoolean,
        enableNotification: smithyClient.expectBoolean,
        enablePerformanceMode: smithyClient.expectBoolean,
        enablePullRequestPreview: smithyClient.expectBoolean,
        enableSkewProtection: smithyClient.expectBoolean,
        environmentVariables: smithyClient._json,
        framework: smithyClient.expectString,
        pullRequestEnvironmentName: smithyClient.expectString,
        sourceBranch: smithyClient.expectString,
        stage: smithyClient.expectString,
        tags: smithyClient._json,
        thumbnailUrl: smithyClient.expectString,
        totalNumberOfJobs: smithyClient.expectString,
        ttl: smithyClient.expectString,
        updateTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_Branches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Branch(entry);
    });
    return retVal;
};
const de_Job = (output, context) => {
    return smithyClient.take(output, {
        steps: (_) => de_Steps(_),
        summary: (_) => de_JobSummary(_),
    });
};
const de_JobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobSummary(entry);
    });
    return retVal;
};
const de_JobSummary = (output, context) => {
    return smithyClient.take(output, {
        commitId: smithyClient.expectString,
        commitMessage: smithyClient.expectString,
        commitTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        endTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        jobArn: smithyClient.expectString,
        jobId: smithyClient.expectString,
        jobType: smithyClient.expectString,
        sourceUrl: smithyClient.expectString,
        sourceUrlType: smithyClient.expectString,
        startTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        status: smithyClient.expectString,
    });
};
const de_ProductionBranch = (output, context) => {
    return smithyClient.take(output, {
        branchName: smithyClient.expectString,
        lastDeployTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        status: smithyClient.expectString,
        thumbnailUrl: smithyClient.expectString,
    });
};
const de_Step = (output, context) => {
    return smithyClient.take(output, {
        artifactsUrl: smithyClient.expectString,
        context: smithyClient.expectString,
        endTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        logUrl: smithyClient.expectString,
        screenshots: smithyClient._json,
        startTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        status: smithyClient.expectString,
        statusReason: smithyClient.expectString,
        stepName: smithyClient.expectString,
        testArtifactsUrl: smithyClient.expectString,
        testConfigUrl: smithyClient.expectString,
    });
};
const de_Steps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Step(entry);
    });
    return retVal;
};
const de_Webhook = (output, context) => {
    return smithyClient.take(output, {
        appId: smithyClient.expectString,
        branchName: smithyClient.expectString,
        createTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        updateTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        webhookArn: smithyClient.expectString,
        webhookId: smithyClient.expectString,
        webhookUrl: smithyClient.expectString,
    });
};
const de_Webhooks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Webhook(entry);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const _eN = "environmentName";
const _mR = "maxResults";
const _nT = "nextToken";
const _tK = "tagKeys";

class CreateAppCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "CreateApp", {})
    .n("AmplifyClient", "CreateAppCommand")
    .f(CreateAppRequestFilterSensitiveLog, CreateAppResultFilterSensitiveLog)
    .ser(se_CreateAppCommand)
    .de(de_CreateAppCommand)
    .build() {
}

class CreateBackendEnvironmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "CreateBackendEnvironment", {})
    .n("AmplifyClient", "CreateBackendEnvironmentCommand")
    .f(void 0, void 0)
    .ser(se_CreateBackendEnvironmentCommand)
    .de(de_CreateBackendEnvironmentCommand)
    .build() {
}

class CreateBranchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "CreateBranch", {})
    .n("AmplifyClient", "CreateBranchCommand")
    .f(CreateBranchRequestFilterSensitiveLog, CreateBranchResultFilterSensitiveLog)
    .ser(se_CreateBranchCommand)
    .de(de_CreateBranchCommand)
    .build() {
}

class CreateDeploymentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "CreateDeployment", {})
    .n("AmplifyClient", "CreateDeploymentCommand")
    .f(void 0, void 0)
    .ser(se_CreateDeploymentCommand)
    .de(de_CreateDeploymentCommand)
    .build() {
}

class CreateDomainAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "CreateDomainAssociation", {})
    .n("AmplifyClient", "CreateDomainAssociationCommand")
    .f(void 0, void 0)
    .ser(se_CreateDomainAssociationCommand)
    .de(de_CreateDomainAssociationCommand)
    .build() {
}

class CreateWebhookCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "CreateWebhook", {})
    .n("AmplifyClient", "CreateWebhookCommand")
    .f(void 0, void 0)
    .ser(se_CreateWebhookCommand)
    .de(de_CreateWebhookCommand)
    .build() {
}

class DeleteAppCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "DeleteApp", {})
    .n("AmplifyClient", "DeleteAppCommand")
    .f(void 0, DeleteAppResultFilterSensitiveLog)
    .ser(se_DeleteAppCommand)
    .de(de_DeleteAppCommand)
    .build() {
}

class DeleteBackendEnvironmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "DeleteBackendEnvironment", {})
    .n("AmplifyClient", "DeleteBackendEnvironmentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteBackendEnvironmentCommand)
    .de(de_DeleteBackendEnvironmentCommand)
    .build() {
}

class DeleteBranchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "DeleteBranch", {})
    .n("AmplifyClient", "DeleteBranchCommand")
    .f(void 0, DeleteBranchResultFilterSensitiveLog)
    .ser(se_DeleteBranchCommand)
    .de(de_DeleteBranchCommand)
    .build() {
}

class DeleteDomainAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "DeleteDomainAssociation", {})
    .n("AmplifyClient", "DeleteDomainAssociationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDomainAssociationCommand)
    .de(de_DeleteDomainAssociationCommand)
    .build() {
}

class DeleteJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "DeleteJob", {})
    .n("AmplifyClient", "DeleteJobCommand")
    .f(void 0, void 0)
    .ser(se_DeleteJobCommand)
    .de(de_DeleteJobCommand)
    .build() {
}

class DeleteWebhookCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "DeleteWebhook", {})
    .n("AmplifyClient", "DeleteWebhookCommand")
    .f(void 0, void 0)
    .ser(se_DeleteWebhookCommand)
    .de(de_DeleteWebhookCommand)
    .build() {
}

class GenerateAccessLogsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "GenerateAccessLogs", {})
    .n("AmplifyClient", "GenerateAccessLogsCommand")
    .f(void 0, void 0)
    .ser(se_GenerateAccessLogsCommand)
    .de(de_GenerateAccessLogsCommand)
    .build() {
}

class GetAppCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "GetApp", {})
    .n("AmplifyClient", "GetAppCommand")
    .f(void 0, GetAppResultFilterSensitiveLog)
    .ser(se_GetAppCommand)
    .de(de_GetAppCommand)
    .build() {
}

class GetArtifactUrlCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "GetArtifactUrl", {})
    .n("AmplifyClient", "GetArtifactUrlCommand")
    .f(void 0, void 0)
    .ser(se_GetArtifactUrlCommand)
    .de(de_GetArtifactUrlCommand)
    .build() {
}

class GetBackendEnvironmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "GetBackendEnvironment", {})
    .n("AmplifyClient", "GetBackendEnvironmentCommand")
    .f(void 0, void 0)
    .ser(se_GetBackendEnvironmentCommand)
    .de(de_GetBackendEnvironmentCommand)
    .build() {
}

class GetBranchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "GetBranch", {})
    .n("AmplifyClient", "GetBranchCommand")
    .f(void 0, GetBranchResultFilterSensitiveLog)
    .ser(se_GetBranchCommand)
    .de(de_GetBranchCommand)
    .build() {
}

class GetDomainAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "GetDomainAssociation", {})
    .n("AmplifyClient", "GetDomainAssociationCommand")
    .f(void 0, void 0)
    .ser(se_GetDomainAssociationCommand)
    .de(de_GetDomainAssociationCommand)
    .build() {
}

class GetJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "GetJob", {})
    .n("AmplifyClient", "GetJobCommand")
    .f(void 0, void 0)
    .ser(se_GetJobCommand)
    .de(de_GetJobCommand)
    .build() {
}

class GetWebhookCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "GetWebhook", {})
    .n("AmplifyClient", "GetWebhookCommand")
    .f(void 0, void 0)
    .ser(se_GetWebhookCommand)
    .de(de_GetWebhookCommand)
    .build() {
}

class ListAppsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "ListApps", {})
    .n("AmplifyClient", "ListAppsCommand")
    .f(void 0, ListAppsResultFilterSensitiveLog)
    .ser(se_ListAppsCommand)
    .de(de_ListAppsCommand)
    .build() {
}

class ListArtifactsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "ListArtifacts", {})
    .n("AmplifyClient", "ListArtifactsCommand")
    .f(void 0, void 0)
    .ser(se_ListArtifactsCommand)
    .de(de_ListArtifactsCommand)
    .build() {
}

class ListBackendEnvironmentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "ListBackendEnvironments", {})
    .n("AmplifyClient", "ListBackendEnvironmentsCommand")
    .f(void 0, void 0)
    .ser(se_ListBackendEnvironmentsCommand)
    .de(de_ListBackendEnvironmentsCommand)
    .build() {
}

class ListBranchesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "ListBranches", {})
    .n("AmplifyClient", "ListBranchesCommand")
    .f(void 0, ListBranchesResultFilterSensitiveLog)
    .ser(se_ListBranchesCommand)
    .de(de_ListBranchesCommand)
    .build() {
}

class ListDomainAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "ListDomainAssociations", {})
    .n("AmplifyClient", "ListDomainAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_ListDomainAssociationsCommand)
    .de(de_ListDomainAssociationsCommand)
    .build() {
}

class ListJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "ListJobs", {})
    .n("AmplifyClient", "ListJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListJobsCommand)
    .de(de_ListJobsCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "ListTagsForResource", {})
    .n("AmplifyClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListWebhooksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "ListWebhooks", {})
    .n("AmplifyClient", "ListWebhooksCommand")
    .f(void 0, void 0)
    .ser(se_ListWebhooksCommand)
    .de(de_ListWebhooksCommand)
    .build() {
}

class StartDeploymentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "StartDeployment", {})
    .n("AmplifyClient", "StartDeploymentCommand")
    .f(void 0, void 0)
    .ser(se_StartDeploymentCommand)
    .de(de_StartDeploymentCommand)
    .build() {
}

class StartJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "StartJob", {})
    .n("AmplifyClient", "StartJobCommand")
    .f(void 0, void 0)
    .ser(se_StartJobCommand)
    .de(de_StartJobCommand)
    .build() {
}

class StopJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "StopJob", {})
    .n("AmplifyClient", "StopJobCommand")
    .f(void 0, void 0)
    .ser(se_StopJobCommand)
    .de(de_StopJobCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "TagResource", {})
    .n("AmplifyClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "UntagResource", {})
    .n("AmplifyClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateAppCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "UpdateApp", {})
    .n("AmplifyClient", "UpdateAppCommand")
    .f(UpdateAppRequestFilterSensitiveLog, UpdateAppResultFilterSensitiveLog)
    .ser(se_UpdateAppCommand)
    .de(de_UpdateAppCommand)
    .build() {
}

class UpdateBranchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "UpdateBranch", {})
    .n("AmplifyClient", "UpdateBranchCommand")
    .f(UpdateBranchRequestFilterSensitiveLog, UpdateBranchResultFilterSensitiveLog)
    .ser(se_UpdateBranchCommand)
    .de(de_UpdateBranchCommand)
    .build() {
}

class UpdateDomainAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "UpdateDomainAssociation", {})
    .n("AmplifyClient", "UpdateDomainAssociationCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDomainAssociationCommand)
    .de(de_UpdateDomainAssociationCommand)
    .build() {
}

class UpdateWebhookCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("Amplify", "UpdateWebhook", {})
    .n("AmplifyClient", "UpdateWebhookCommand")
    .f(void 0, void 0)
    .ser(se_UpdateWebhookCommand)
    .de(de_UpdateWebhookCommand)
    .build() {
}

const commands = {
    CreateAppCommand,
    CreateBackendEnvironmentCommand,
    CreateBranchCommand,
    CreateDeploymentCommand,
    CreateDomainAssociationCommand,
    CreateWebhookCommand,
    DeleteAppCommand,
    DeleteBackendEnvironmentCommand,
    DeleteBranchCommand,
    DeleteDomainAssociationCommand,
    DeleteJobCommand,
    DeleteWebhookCommand,
    GenerateAccessLogsCommand,
    GetAppCommand,
    GetArtifactUrlCommand,
    GetBackendEnvironmentCommand,
    GetBranchCommand,
    GetDomainAssociationCommand,
    GetJobCommand,
    GetWebhookCommand,
    ListAppsCommand,
    ListArtifactsCommand,
    ListBackendEnvironmentsCommand,
    ListBranchesCommand,
    ListDomainAssociationsCommand,
    ListJobsCommand,
    ListTagsForResourceCommand,
    ListWebhooksCommand,
    StartDeploymentCommand,
    StartJobCommand,
    StopJobCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateAppCommand,
    UpdateBranchCommand,
    UpdateDomainAssociationCommand,
    UpdateWebhookCommand,
};
class Amplify extends AmplifyClient {
}
smithyClient.createAggregatedClient(commands, Amplify);

const paginateListApps = core.createPaginator(AmplifyClient, ListAppsCommand, "nextToken", "nextToken", "maxResults");

const paginateListBranches = core.createPaginator(AmplifyClient, ListBranchesCommand, "nextToken", "nextToken", "maxResults");

const paginateListDomainAssociations = core.createPaginator(AmplifyClient, ListDomainAssociationsCommand, "nextToken", "nextToken", "maxResults");

const paginateListJobs = core.createPaginator(AmplifyClient, ListJobsCommand, "nextToken", "nextToken", "maxResults");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.Amplify = Amplify;
exports.AmplifyClient = AmplifyClient;
exports.AmplifyServiceException = AmplifyServiceException;
exports.AppFilterSensitiveLog = AppFilterSensitiveLog;
exports.AutoBranchCreationConfigFilterSensitiveLog = AutoBranchCreationConfigFilterSensitiveLog;
exports.BadRequestException = BadRequestException;
exports.BranchFilterSensitiveLog = BranchFilterSensitiveLog;
exports.BuildComputeType = BuildComputeType;
exports.CacheConfigType = CacheConfigType;
exports.CertificateType = CertificateType;
exports.CreateAppCommand = CreateAppCommand;
exports.CreateAppRequestFilterSensitiveLog = CreateAppRequestFilterSensitiveLog;
exports.CreateAppResultFilterSensitiveLog = CreateAppResultFilterSensitiveLog;
exports.CreateBackendEnvironmentCommand = CreateBackendEnvironmentCommand;
exports.CreateBranchCommand = CreateBranchCommand;
exports.CreateBranchRequestFilterSensitiveLog = CreateBranchRequestFilterSensitiveLog;
exports.CreateBranchResultFilterSensitiveLog = CreateBranchResultFilterSensitiveLog;
exports.CreateDeploymentCommand = CreateDeploymentCommand;
exports.CreateDomainAssociationCommand = CreateDomainAssociationCommand;
exports.CreateWebhookCommand = CreateWebhookCommand;
exports.DeleteAppCommand = DeleteAppCommand;
exports.DeleteAppResultFilterSensitiveLog = DeleteAppResultFilterSensitiveLog;
exports.DeleteBackendEnvironmentCommand = DeleteBackendEnvironmentCommand;
exports.DeleteBranchCommand = DeleteBranchCommand;
exports.DeleteBranchResultFilterSensitiveLog = DeleteBranchResultFilterSensitiveLog;
exports.DeleteDomainAssociationCommand = DeleteDomainAssociationCommand;
exports.DeleteJobCommand = DeleteJobCommand;
exports.DeleteWebhookCommand = DeleteWebhookCommand;
exports.DependentServiceFailureException = DependentServiceFailureException;
exports.DomainStatus = DomainStatus;
exports.GenerateAccessLogsCommand = GenerateAccessLogsCommand;
exports.GetAppCommand = GetAppCommand;
exports.GetAppResultFilterSensitiveLog = GetAppResultFilterSensitiveLog;
exports.GetArtifactUrlCommand = GetArtifactUrlCommand;
exports.GetBackendEnvironmentCommand = GetBackendEnvironmentCommand;
exports.GetBranchCommand = GetBranchCommand;
exports.GetBranchResultFilterSensitiveLog = GetBranchResultFilterSensitiveLog;
exports.GetDomainAssociationCommand = GetDomainAssociationCommand;
exports.GetJobCommand = GetJobCommand;
exports.GetWebhookCommand = GetWebhookCommand;
exports.InternalFailureException = InternalFailureException;
exports.JobStatus = JobStatus;
exports.JobType = JobType;
exports.LimitExceededException = LimitExceededException;
exports.ListAppsCommand = ListAppsCommand;
exports.ListAppsResultFilterSensitiveLog = ListAppsResultFilterSensitiveLog;
exports.ListArtifactsCommand = ListArtifactsCommand;
exports.ListBackendEnvironmentsCommand = ListBackendEnvironmentsCommand;
exports.ListBranchesCommand = ListBranchesCommand;
exports.ListBranchesResultFilterSensitiveLog = ListBranchesResultFilterSensitiveLog;
exports.ListDomainAssociationsCommand = ListDomainAssociationsCommand;
exports.ListJobsCommand = ListJobsCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListWebhooksCommand = ListWebhooksCommand;
exports.NotFoundException = NotFoundException;
exports.Platform = Platform;
exports.RepositoryCloneMethod = RepositoryCloneMethod;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.SourceUrlType = SourceUrlType;
exports.Stage = Stage;
exports.StartDeploymentCommand = StartDeploymentCommand;
exports.StartJobCommand = StartJobCommand;
exports.StopJobCommand = StopJobCommand;
exports.TagResourceCommand = TagResourceCommand;
exports.UnauthorizedException = UnauthorizedException;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateAppCommand = UpdateAppCommand;
exports.UpdateAppRequestFilterSensitiveLog = UpdateAppRequestFilterSensitiveLog;
exports.UpdateAppResultFilterSensitiveLog = UpdateAppResultFilterSensitiveLog;
exports.UpdateBranchCommand = UpdateBranchCommand;
exports.UpdateBranchRequestFilterSensitiveLog = UpdateBranchRequestFilterSensitiveLog;
exports.UpdateBranchResultFilterSensitiveLog = UpdateBranchResultFilterSensitiveLog;
exports.UpdateDomainAssociationCommand = UpdateDomainAssociationCommand;
exports.UpdateStatus = UpdateStatus;
exports.UpdateWebhookCommand = UpdateWebhookCommand;
exports.WafStatus = WafStatus;
exports.paginateListApps = paginateListApps;
exports.paginateListBranches = paginateListBranches;
exports.paginateListDomainAssociations = paginateListDomainAssociations;
exports.paginateListJobs = paginateListJobs;
