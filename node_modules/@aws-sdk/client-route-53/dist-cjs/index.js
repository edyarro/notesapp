'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSdkRoute53 = require('@aws-sdk/middleware-sdk-route53');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var xmlBuilder = require('@aws-sdk/xml-builder');
var utilWaiter = require('@smithy/util-waiter');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "route53",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class Route53Client extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultRoute53HttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class Route53ServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, Route53ServiceException.prototype);
    }
}

const AccountLimitType = {
    MAX_HEALTH_CHECKS_BY_OWNER: "MAX_HEALTH_CHECKS_BY_OWNER",
    MAX_HOSTED_ZONES_BY_OWNER: "MAX_HOSTED_ZONES_BY_OWNER",
    MAX_REUSABLE_DELEGATION_SETS_BY_OWNER: "MAX_REUSABLE_DELEGATION_SETS_BY_OWNER",
    MAX_TRAFFIC_POLICIES_BY_OWNER: "MAX_TRAFFIC_POLICIES_BY_OWNER",
    MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER: "MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER",
};
const ChangeStatus = {
    INSYNC: "INSYNC",
    PENDING: "PENDING",
};
class ConcurrentModification extends Route53ServiceException {
    name = "ConcurrentModification";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConcurrentModification",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentModification.prototype);
    }
}
class InvalidInput extends Route53ServiceException {
    name = "InvalidInput";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidInput",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidInput.prototype);
    }
}
class InvalidKeySigningKeyStatus extends Route53ServiceException {
    name = "InvalidKeySigningKeyStatus";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidKeySigningKeyStatus",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidKeySigningKeyStatus.prototype);
    }
}
class InvalidKMSArn extends Route53ServiceException {
    name = "InvalidKMSArn";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidKMSArn",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidKMSArn.prototype);
    }
}
class InvalidSigningStatus extends Route53ServiceException {
    name = "InvalidSigningStatus";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidSigningStatus",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidSigningStatus.prototype);
    }
}
class NoSuchKeySigningKey extends Route53ServiceException {
    name = "NoSuchKeySigningKey";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchKeySigningKey",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchKeySigningKey.prototype);
    }
}
const CloudWatchRegion = {
    af_south_1: "af-south-1",
    ap_east_1: "ap-east-1",
    ap_east_2: "ap-east-2",
    ap_northeast_1: "ap-northeast-1",
    ap_northeast_2: "ap-northeast-2",
    ap_northeast_3: "ap-northeast-3",
    ap_south_1: "ap-south-1",
    ap_south_2: "ap-south-2",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    ap_southeast_3: "ap-southeast-3",
    ap_southeast_4: "ap-southeast-4",
    ap_southeast_5: "ap-southeast-5",
    ap_southeast_6: "ap-southeast-6",
    ap_southeast_7: "ap-southeast-7",
    ca_central_1: "ca-central-1",
    ca_west_1: "ca-west-1",
    cn_north_1: "cn-north-1",
    cn_northwest_1: "cn-northwest-1",
    eu_central_1: "eu-central-1",
    eu_central_2: "eu-central-2",
    eu_isoe_west_1: "eu-isoe-west-1",
    eu_north_1: "eu-north-1",
    eu_south_1: "eu-south-1",
    eu_south_2: "eu-south-2",
    eu_west_1: "eu-west-1",
    eu_west_2: "eu-west-2",
    eu_west_3: "eu-west-3",
    il_central_1: "il-central-1",
    me_central_1: "me-central-1",
    me_south_1: "me-south-1",
    mx_central_1: "mx-central-1",
    sa_east_1: "sa-east-1",
    us_east_1: "us-east-1",
    us_east_2: "us-east-2",
    us_gov_east_1: "us-gov-east-1",
    us_gov_west_1: "us-gov-west-1",
    us_iso_east_1: "us-iso-east-1",
    us_iso_west_1: "us-iso-west-1",
    us_isob_east_1: "us-isob-east-1",
    us_isob_west_1: "us-isob-west-1",
    us_isof_east_1: "us-isof-east-1",
    us_isof_south_1: "us-isof-south-1",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2",
};
const VPCRegion = {
    af_south_1: "af-south-1",
    ap_east_1: "ap-east-1",
    ap_east_2: "ap-east-2",
    ap_northeast_1: "ap-northeast-1",
    ap_northeast_2: "ap-northeast-2",
    ap_northeast_3: "ap-northeast-3",
    ap_south_1: "ap-south-1",
    ap_south_2: "ap-south-2",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    ap_southeast_3: "ap-southeast-3",
    ap_southeast_4: "ap-southeast-4",
    ap_southeast_5: "ap-southeast-5",
    ap_southeast_6: "ap-southeast-6",
    ap_southeast_7: "ap-southeast-7",
    ca_central_1: "ca-central-1",
    ca_west_1: "ca-west-1",
    cn_north_1: "cn-north-1",
    cn_northwest_1: "cn-northwest-1",
    eu_central_1: "eu-central-1",
    eu_central_2: "eu-central-2",
    eu_isoe_west_1: "eu-isoe-west-1",
    eu_north_1: "eu-north-1",
    eu_south_1: "eu-south-1",
    eu_south_2: "eu-south-2",
    eu_west_1: "eu-west-1",
    eu_west_2: "eu-west-2",
    eu_west_3: "eu-west-3",
    il_central_1: "il-central-1",
    me_central_1: "me-central-1",
    me_south_1: "me-south-1",
    mx_central_1: "mx-central-1",
    sa_east_1: "sa-east-1",
    us_east_1: "us-east-1",
    us_east_2: "us-east-2",
    us_gov_east_1: "us-gov-east-1",
    us_gov_west_1: "us-gov-west-1",
    us_iso_east_1: "us-iso-east-1",
    us_iso_west_1: "us-iso-west-1",
    us_isob_east_1: "us-isob-east-1",
    us_isob_west_1: "us-isob-west-1",
    us_isof_east_1: "us-isof-east-1",
    us_isof_south_1: "us-isof-south-1",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2",
};
class ConflictingDomainExists extends Route53ServiceException {
    name = "ConflictingDomainExists";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictingDomainExists",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictingDomainExists.prototype);
    }
}
class InvalidVPCId extends Route53ServiceException {
    name = "InvalidVPCId";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidVPCId",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidVPCId.prototype);
    }
}
class LimitsExceeded extends Route53ServiceException {
    name = "LimitsExceeded";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitsExceeded",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitsExceeded.prototype);
    }
}
class NoSuchHostedZone extends Route53ServiceException {
    name = "NoSuchHostedZone";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchHostedZone",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchHostedZone.prototype);
    }
}
class NotAuthorizedException extends Route53ServiceException {
    name = "NotAuthorizedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NotAuthorizedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotAuthorizedException.prototype);
    }
}
class PriorRequestNotComplete extends Route53ServiceException {
    name = "PriorRequestNotComplete";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PriorRequestNotComplete",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PriorRequestNotComplete.prototype);
    }
}
class PublicZoneVPCAssociation extends Route53ServiceException {
    name = "PublicZoneVPCAssociation";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PublicZoneVPCAssociation",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PublicZoneVPCAssociation.prototype);
    }
}
const CidrCollectionChangeAction = {
    DELETE_IF_EXISTS: "DELETE_IF_EXISTS",
    PUT: "PUT",
};
class CidrBlockInUseException extends Route53ServiceException {
    name = "CidrBlockInUseException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "CidrBlockInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CidrBlockInUseException.prototype);
        this.Message = opts.Message;
    }
}
class CidrCollectionVersionMismatchException extends Route53ServiceException {
    name = "CidrCollectionVersionMismatchException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "CidrCollectionVersionMismatchException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CidrCollectionVersionMismatchException.prototype);
        this.Message = opts.Message;
    }
}
class NoSuchCidrCollectionException extends Route53ServiceException {
    name = "NoSuchCidrCollectionException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "NoSuchCidrCollectionException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchCidrCollectionException.prototype);
        this.Message = opts.Message;
    }
}
const ChangeAction = {
    CREATE: "CREATE",
    DELETE: "DELETE",
    UPSERT: "UPSERT",
};
const ResourceRecordSetFailover = {
    PRIMARY: "PRIMARY",
    SECONDARY: "SECONDARY",
};
const ResourceRecordSetRegion = {
    af_south_1: "af-south-1",
    ap_east_1: "ap-east-1",
    ap_east_2: "ap-east-2",
    ap_northeast_1: "ap-northeast-1",
    ap_northeast_2: "ap-northeast-2",
    ap_northeast_3: "ap-northeast-3",
    ap_south_1: "ap-south-1",
    ap_south_2: "ap-south-2",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    ap_southeast_3: "ap-southeast-3",
    ap_southeast_4: "ap-southeast-4",
    ap_southeast_5: "ap-southeast-5",
    ap_southeast_6: "ap-southeast-6",
    ap_southeast_7: "ap-southeast-7",
    ca_central_1: "ca-central-1",
    ca_west_1: "ca-west-1",
    cn_north_1: "cn-north-1",
    cn_northwest_1: "cn-northwest-1",
    eu_central_1: "eu-central-1",
    eu_central_2: "eu-central-2",
    eu_north_1: "eu-north-1",
    eu_south_1: "eu-south-1",
    eu_south_2: "eu-south-2",
    eu_west_1: "eu-west-1",
    eu_west_2: "eu-west-2",
    eu_west_3: "eu-west-3",
    il_central_1: "il-central-1",
    me_central_1: "me-central-1",
    me_south_1: "me-south-1",
    mx_central_1: "mx-central-1",
    sa_east_1: "sa-east-1",
    us_east_1: "us-east-1",
    us_east_2: "us-east-2",
    us_gov_east_1: "us-gov-east-1",
    us_gov_west_1: "us-gov-west-1",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2",
};
const RRType = {
    A: "A",
    AAAA: "AAAA",
    CAA: "CAA",
    CNAME: "CNAME",
    DS: "DS",
    HTTPS: "HTTPS",
    MX: "MX",
    NAPTR: "NAPTR",
    NS: "NS",
    PTR: "PTR",
    SOA: "SOA",
    SPF: "SPF",
    SRV: "SRV",
    SSHFP: "SSHFP",
    SVCB: "SVCB",
    TLSA: "TLSA",
    TXT: "TXT",
};
class InvalidChangeBatch extends Route53ServiceException {
    name = "InvalidChangeBatch";
    $fault = "client";
    messages;
    constructor(opts) {
        super({
            name: "InvalidChangeBatch",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidChangeBatch.prototype);
        this.messages = opts.messages;
    }
}
class NoSuchHealthCheck extends Route53ServiceException {
    name = "NoSuchHealthCheck";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchHealthCheck",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchHealthCheck.prototype);
    }
}
const TagResourceType = {
    healthcheck: "healthcheck",
    hostedzone: "hostedzone",
};
class ThrottlingException extends Route53ServiceException {
    name = "ThrottlingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
class CidrCollectionAlreadyExistsException extends Route53ServiceException {
    name = "CidrCollectionAlreadyExistsException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "CidrCollectionAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CidrCollectionAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
const InsufficientDataHealthStatus = {
    Healthy: "Healthy",
    LastKnownStatus: "LastKnownStatus",
    Unhealthy: "Unhealthy",
};
const HealthCheckRegion = {
    ap_northeast_1: "ap-northeast-1",
    ap_southeast_1: "ap-southeast-1",
    ap_southeast_2: "ap-southeast-2",
    eu_west_1: "eu-west-1",
    sa_east_1: "sa-east-1",
    us_east_1: "us-east-1",
    us_west_1: "us-west-1",
    us_west_2: "us-west-2",
};
const HealthCheckType = {
    CALCULATED: "CALCULATED",
    CLOUDWATCH_METRIC: "CLOUDWATCH_METRIC",
    HTTP: "HTTP",
    HTTPS: "HTTPS",
    HTTPS_STR_MATCH: "HTTPS_STR_MATCH",
    HTTP_STR_MATCH: "HTTP_STR_MATCH",
    RECOVERY_CONTROL: "RECOVERY_CONTROL",
    TCP: "TCP",
};
const ComparisonOperator = {
    GreaterThanOrEqualToThreshold: "GreaterThanOrEqualToThreshold",
    GreaterThanThreshold: "GreaterThanThreshold",
    LessThanOrEqualToThreshold: "LessThanOrEqualToThreshold",
    LessThanThreshold: "LessThanThreshold",
};
const Statistic = {
    Average: "Average",
    Maximum: "Maximum",
    Minimum: "Minimum",
    SampleCount: "SampleCount",
    Sum: "Sum",
};
class HealthCheckAlreadyExists extends Route53ServiceException {
    name = "HealthCheckAlreadyExists";
    $fault = "client";
    constructor(opts) {
        super({
            name: "HealthCheckAlreadyExists",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, HealthCheckAlreadyExists.prototype);
    }
}
class TooManyHealthChecks extends Route53ServiceException {
    name = "TooManyHealthChecks";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyHealthChecks",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyHealthChecks.prototype);
    }
}
class DelegationSetNotAvailable extends Route53ServiceException {
    name = "DelegationSetNotAvailable";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DelegationSetNotAvailable",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DelegationSetNotAvailable.prototype);
    }
}
class DelegationSetNotReusable extends Route53ServiceException {
    name = "DelegationSetNotReusable";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DelegationSetNotReusable",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DelegationSetNotReusable.prototype);
    }
}
class HostedZoneAlreadyExists extends Route53ServiceException {
    name = "HostedZoneAlreadyExists";
    $fault = "client";
    constructor(opts) {
        super({
            name: "HostedZoneAlreadyExists",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, HostedZoneAlreadyExists.prototype);
    }
}
class InvalidDomainName extends Route53ServiceException {
    name = "InvalidDomainName";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidDomainName",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidDomainName.prototype);
    }
}
class NoSuchDelegationSet extends Route53ServiceException {
    name = "NoSuchDelegationSet";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchDelegationSet",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchDelegationSet.prototype);
    }
}
class TooManyHostedZones extends Route53ServiceException {
    name = "TooManyHostedZones";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyHostedZones",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyHostedZones.prototype);
    }
}
class InvalidArgument extends Route53ServiceException {
    name = "InvalidArgument";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidArgument",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidArgument.prototype);
    }
}
class InvalidKeySigningKeyName extends Route53ServiceException {
    name = "InvalidKeySigningKeyName";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidKeySigningKeyName",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidKeySigningKeyName.prototype);
    }
}
class KeySigningKeyAlreadyExists extends Route53ServiceException {
    name = "KeySigningKeyAlreadyExists";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KeySigningKeyAlreadyExists",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KeySigningKeyAlreadyExists.prototype);
    }
}
class TooManyKeySigningKeys extends Route53ServiceException {
    name = "TooManyKeySigningKeys";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyKeySigningKeys",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyKeySigningKeys.prototype);
    }
}
class InsufficientCloudWatchLogsResourcePolicy extends Route53ServiceException {
    name = "InsufficientCloudWatchLogsResourcePolicy";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InsufficientCloudWatchLogsResourcePolicy",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InsufficientCloudWatchLogsResourcePolicy.prototype);
    }
}
class NoSuchCloudWatchLogsLogGroup extends Route53ServiceException {
    name = "NoSuchCloudWatchLogsLogGroup";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchCloudWatchLogsLogGroup",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchCloudWatchLogsLogGroup.prototype);
    }
}
class QueryLoggingConfigAlreadyExists extends Route53ServiceException {
    name = "QueryLoggingConfigAlreadyExists";
    $fault = "client";
    constructor(opts) {
        super({
            name: "QueryLoggingConfigAlreadyExists",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, QueryLoggingConfigAlreadyExists.prototype);
    }
}
class DelegationSetAlreadyCreated extends Route53ServiceException {
    name = "DelegationSetAlreadyCreated";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DelegationSetAlreadyCreated",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DelegationSetAlreadyCreated.prototype);
    }
}
class DelegationSetAlreadyReusable extends Route53ServiceException {
    name = "DelegationSetAlreadyReusable";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DelegationSetAlreadyReusable",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DelegationSetAlreadyReusable.prototype);
    }
}
class HostedZoneNotFound extends Route53ServiceException {
    name = "HostedZoneNotFound";
    $fault = "client";
    constructor(opts) {
        super({
            name: "HostedZoneNotFound",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, HostedZoneNotFound.prototype);
    }
}
class InvalidTrafficPolicyDocument extends Route53ServiceException {
    name = "InvalidTrafficPolicyDocument";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidTrafficPolicyDocument",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidTrafficPolicyDocument.prototype);
    }
}
class TooManyTrafficPolicies extends Route53ServiceException {
    name = "TooManyTrafficPolicies";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyTrafficPolicies",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyTrafficPolicies.prototype);
    }
}
class TrafficPolicyAlreadyExists extends Route53ServiceException {
    name = "TrafficPolicyAlreadyExists";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TrafficPolicyAlreadyExists",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TrafficPolicyAlreadyExists.prototype);
    }
}
class NoSuchTrafficPolicy extends Route53ServiceException {
    name = "NoSuchTrafficPolicy";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchTrafficPolicy",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchTrafficPolicy.prototype);
    }
}
class TooManyTrafficPolicyInstances extends Route53ServiceException {
    name = "TooManyTrafficPolicyInstances";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyTrafficPolicyInstances",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyTrafficPolicyInstances.prototype);
    }
}
class TrafficPolicyInstanceAlreadyExists extends Route53ServiceException {
    name = "TrafficPolicyInstanceAlreadyExists";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TrafficPolicyInstanceAlreadyExists",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TrafficPolicyInstanceAlreadyExists.prototype);
    }
}
class TooManyTrafficPolicyVersionsForCurrentPolicy extends Route53ServiceException {
    name = "TooManyTrafficPolicyVersionsForCurrentPolicy";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyTrafficPolicyVersionsForCurrentPolicy",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyTrafficPolicyVersionsForCurrentPolicy.prototype);
    }
}
class TooManyVPCAssociationAuthorizations extends Route53ServiceException {
    name = "TooManyVPCAssociationAuthorizations";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyVPCAssociationAuthorizations",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyVPCAssociationAuthorizations.prototype);
    }
}
class KeySigningKeyInParentDSRecord extends Route53ServiceException {
    name = "KeySigningKeyInParentDSRecord";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KeySigningKeyInParentDSRecord",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KeySigningKeyInParentDSRecord.prototype);
    }
}
class KeySigningKeyInUse extends Route53ServiceException {
    name = "KeySigningKeyInUse";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KeySigningKeyInUse",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KeySigningKeyInUse.prototype);
    }
}
class CidrCollectionInUseException extends Route53ServiceException {
    name = "CidrCollectionInUseException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "CidrCollectionInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CidrCollectionInUseException.prototype);
        this.Message = opts.Message;
    }
}
class HealthCheckInUse extends Route53ServiceException {
    name = "HealthCheckInUse";
    $fault = "client";
    constructor(opts) {
        super({
            name: "HealthCheckInUse",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, HealthCheckInUse.prototype);
    }
}
class HostedZoneNotEmpty extends Route53ServiceException {
    name = "HostedZoneNotEmpty";
    $fault = "client";
    constructor(opts) {
        super({
            name: "HostedZoneNotEmpty",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, HostedZoneNotEmpty.prototype);
    }
}
class NoSuchQueryLoggingConfig extends Route53ServiceException {
    name = "NoSuchQueryLoggingConfig";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchQueryLoggingConfig",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchQueryLoggingConfig.prototype);
    }
}
class DelegationSetInUse extends Route53ServiceException {
    name = "DelegationSetInUse";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DelegationSetInUse",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DelegationSetInUse.prototype);
    }
}
class TrafficPolicyInUse extends Route53ServiceException {
    name = "TrafficPolicyInUse";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TrafficPolicyInUse",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TrafficPolicyInUse.prototype);
    }
}
class NoSuchTrafficPolicyInstance extends Route53ServiceException {
    name = "NoSuchTrafficPolicyInstance";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchTrafficPolicyInstance",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchTrafficPolicyInstance.prototype);
    }
}
class VPCAssociationAuthorizationNotFound extends Route53ServiceException {
    name = "VPCAssociationAuthorizationNotFound";
    $fault = "client";
    constructor(opts) {
        super({
            name: "VPCAssociationAuthorizationNotFound",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, VPCAssociationAuthorizationNotFound.prototype);
    }
}
class DNSSECNotFound extends Route53ServiceException {
    name = "DNSSECNotFound";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DNSSECNotFound",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DNSSECNotFound.prototype);
    }
}
class LastVPCAssociation extends Route53ServiceException {
    name = "LastVPCAssociation";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LastVPCAssociation",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LastVPCAssociation.prototype);
    }
}
class VPCAssociationNotFound extends Route53ServiceException {
    name = "VPCAssociationNotFound";
    $fault = "client";
    constructor(opts) {
        super({
            name: "VPCAssociationNotFound",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, VPCAssociationNotFound.prototype);
    }
}
class HostedZonePartiallyDelegated extends Route53ServiceException {
    name = "HostedZonePartiallyDelegated";
    $fault = "client";
    constructor(opts) {
        super({
            name: "HostedZonePartiallyDelegated",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, HostedZonePartiallyDelegated.prototype);
    }
}
class KeySigningKeyWithActiveStatusNotFound extends Route53ServiceException {
    name = "KeySigningKeyWithActiveStatusNotFound";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KeySigningKeyWithActiveStatusNotFound",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KeySigningKeyWithActiveStatusNotFound.prototype);
    }
}
class NoSuchChange extends Route53ServiceException {
    name = "NoSuchChange";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchChange",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchChange.prototype);
    }
}
class NoSuchGeoLocation extends Route53ServiceException {
    name = "NoSuchGeoLocation";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NoSuchGeoLocation",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchGeoLocation.prototype);
    }
}
class IncompatibleVersion extends Route53ServiceException {
    name = "IncompatibleVersion";
    $fault = "client";
    constructor(opts) {
        super({
            name: "IncompatibleVersion",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, IncompatibleVersion.prototype);
    }
}
const HostedZoneLimitType = {
    MAX_RRSETS_BY_ZONE: "MAX_RRSETS_BY_ZONE",
    MAX_VPCS_ASSOCIATED_BY_ZONE: "MAX_VPCS_ASSOCIATED_BY_ZONE",
};
class HostedZoneNotPrivate extends Route53ServiceException {
    name = "HostedZoneNotPrivate";
    $fault = "client";
    constructor(opts) {
        super({
            name: "HostedZoneNotPrivate",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, HostedZoneNotPrivate.prototype);
    }
}
const ReusableDelegationSetLimitType = {
    MAX_ZONES_BY_REUSABLE_DELEGATION_SET: "MAX_ZONES_BY_REUSABLE_DELEGATION_SET",
};
class NoSuchCidrLocationException extends Route53ServiceException {
    name = "NoSuchCidrLocationException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "NoSuchCidrLocationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NoSuchCidrLocationException.prototype);
        this.Message = opts.Message;
    }
}
const HostedZoneType = {
    PRIVATE_HOSTED_ZONE: "PrivateHostedZone",
};
class InvalidPaginationToken extends Route53ServiceException {
    name = "InvalidPaginationToken";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidPaginationToken",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidPaginationToken.prototype);
    }
}
class HealthCheckVersionMismatch extends Route53ServiceException {
    name = "HealthCheckVersionMismatch";
    $fault = "client";
    constructor(opts) {
        super({
            name: "HealthCheckVersionMismatch",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, HealthCheckVersionMismatch.prototype);
    }
}
const ResettableElementName = {
    ChildHealthChecks: "ChildHealthChecks",
    FullyQualifiedDomainName: "FullyQualifiedDomainName",
    Regions: "Regions",
    ResourcePath: "ResourcePath",
};
class ConflictingTypes extends Route53ServiceException {
    name = "ConflictingTypes";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictingTypes",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictingTypes.prototype);
    }
}

const se_ActivateKeySigningKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/activate");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_AssociateVPCWithHostedZoneCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/hostedzone/{HostedZoneId}/associatevpc");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_AVPCWHZR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_C] != null) {
        bn.c(xmlBuilder.XmlNode.of(_AVPCC, input[_C]).n(_C));
    }
    if (input[_VPC] != null) {
        bn.c(se_VPC(input[_VPC]).n(_VPC));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_ChangeCidrCollectionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/cidrcollection/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CCCR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    bn.lc(input, "Changes", "Changes", () => se_CidrCollectionChanges(input[_Ch]));
    if (input[_CV] != null) {
        bn.c(xmlBuilder.XmlNode.of(_CV, String(input[_CV])).n(_CV));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_ChangeResourceRecordSetsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/hostedzone/{HostedZoneId}/rrset");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CRRSR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_CB] != null) {
        bn.c(se_ChangeBatch(input[_CB]).n(_CB));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_ChangeTagsForResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/tags/{ResourceType}/{ResourceId}");
    b.p("ResourceType", () => input.ResourceType, "{ResourceType}", false);
    b.p("ResourceId", () => input.ResourceId, "{ResourceId}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CTFRR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    bn.lc(input, "AddTags", "AddTags", () => se_TagList(input[_AT]));
    bn.lc(input, "RemoveTagKeys", "RemoveTagKeys", () => se_TagKeyList(input[_RTK]));
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateCidrCollectionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/cidrcollection");
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CCCRr);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_CR] != null) {
        bn.c(xmlBuilder.XmlNode.of(_CN, input[_CR]).n(_CR));
    }
    if (input[_N] != null) {
        bn.c(xmlBuilder.XmlNode.of(_CNo, input[_N]).n(_N));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateHealthCheckCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/healthcheck");
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CHCR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_CR] != null) {
        bn.c(xmlBuilder.XmlNode.of(_HCN, input[_CR]).n(_CR));
    }
    if (input[_HCC] != null) {
        bn.c(se_HealthCheckConfig(input[_HCC]).n(_HCC));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateHostedZoneCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/hostedzone");
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CHZR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_CR] != null) {
        bn.c(xmlBuilder.XmlNode.of(_No, input[_CR]).n(_CR));
    }
    if (input[_DSI] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RI, input[_DSI]).n(_DSI));
    }
    if (input[_HZC] != null) {
        bn.c(se_HostedZoneConfig(input[_HZC]).n(_HZC));
    }
    if (input[_N] != null) {
        bn.c(xmlBuilder.XmlNode.of(_DNSN, input[_N]).n(_N));
    }
    if (input[_VPC] != null) {
        bn.c(se_VPC(input[_VPC]).n(_VPC));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateKeySigningKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/keysigningkey");
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CKSKR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_CR] != null) {
        bn.c(xmlBuilder.XmlNode.of(_No, input[_CR]).n(_CR));
    }
    if (input[_HZI] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RI, input[_HZI]).n(_HZI));
    }
    if (input[_KMSA] != null) {
        bn.c(xmlBuilder.XmlNode.of(_SKS, input[_KMSA]).n(_KMSA));
    }
    if (input[_N] != null) {
        bn.c(xmlBuilder.XmlNode.of(_SKN, input[_N]).n(_N));
    }
    if (input[_S] != null) {
        bn.c(xmlBuilder.XmlNode.of(_SKSi, input[_S]).n(_S));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateQueryLoggingConfigCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/queryloggingconfig");
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CQLCR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    bn.cc(input, _CWLLGA);
    if (input[_HZI] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RI, input[_HZI]).n(_HZI));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateReusableDelegationSetCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/delegationset");
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CRDSR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_CR] != null) {
        bn.c(xmlBuilder.XmlNode.of(_No, input[_CR]).n(_CR));
    }
    if (input[_HZI] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RI, input[_HZI]).n(_HZI));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateTrafficPolicyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/trafficpolicy");
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CTPR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_C] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TPC, input[_C]).n(_C));
    }
    if (input[_D] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TPD, input[_D]).n(_D));
    }
    if (input[_N] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TPN, input[_N]).n(_N));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateTrafficPolicyInstanceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/trafficpolicyinstance");
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CTPIR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_HZI] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RI, input[_HZI]).n(_HZI));
    }
    if (input[_N] != null) {
        bn.c(xmlBuilder.XmlNode.of(_DNSN, input[_N]).n(_N));
    }
    if (input[_TTL] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TTL, String(input[_TTL])).n(_TTL));
    }
    bn.cc(input, _TPI);
    if (input[_TPV] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TPV, String(input[_TPV])).n(_TPV));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateTrafficPolicyVersionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/trafficpolicy/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CTPVR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_C] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TPC, input[_C]).n(_C));
    }
    if (input[_D] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TPD, input[_D]).n(_D));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateVPCAssociationAuthorizationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/hostedzone/{HostedZoneId}/authorizevpcassociation");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_CVPCAAR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_VPC] != null) {
        bn.c(se_VPC(input[_VPC]).n(_VPC));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DeactivateKeySigningKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/deactivate");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DeleteCidrCollectionCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/cidrcollection/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteHealthCheckCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/healthcheck/{HealthCheckId}");
    b.p("HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteHostedZoneCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/hostedzone/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteKeySigningKeyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/keysigningkey/{HostedZoneId}/{Name}");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteQueryLoggingConfigCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/queryloggingconfig/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteReusableDelegationSetCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/delegationset/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteTrafficPolicyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/trafficpolicy/{Id}/{Version}");
    b.p("Id", () => input.Id, "{Id}", false);
    b.p("Version", () => input.Version.toString(), "{Version}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteTrafficPolicyInstanceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/trafficpolicyinstance/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteVPCAssociationAuthorizationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/hostedzone/{HostedZoneId}/deauthorizevpcassociation");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_DVPCAAR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_VPC] != null) {
        bn.c(se_VPC(input[_VPC]).n(_VPC));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DisableHostedZoneDNSSECCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/hostedzone/{HostedZoneId}/disable-dnssec");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DisassociateVPCFromHostedZoneCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/hostedzone/{HostedZoneId}/disassociatevpc");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_DVPCFHZR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_C] != null) {
        bn.c(xmlBuilder.XmlNode.of(_DVPCC, input[_C]).n(_C));
    }
    if (input[_VPC] != null) {
        bn.c(se_VPC(input[_VPC]).n(_VPC));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_EnableHostedZoneDNSSECCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/hostedzone/{HostedZoneId}/enable-dnssec");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_GetAccountLimitCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/accountlimit/{Type}");
    b.p("Type", () => input.Type, "{Type}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetChangeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/change/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetCheckerIpRangesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/checkeripranges");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetDNSSECCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/hostedzone/{HostedZoneId}/dnssec");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetGeoLocationCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/geolocation");
    const query = smithyClient.map({
        [_c]: [, input[_CC]],
        [_co]: [, input[_CCo]],
        [_s]: [, input[_SC]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetHealthCheckCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/healthcheck/{HealthCheckId}");
    b.p("HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetHealthCheckCountCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/healthcheckcount");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetHealthCheckLastFailureReasonCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason");
    b.p("HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetHealthCheckStatusCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/healthcheck/{HealthCheckId}/status");
    b.p("HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetHostedZoneCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/hostedzone/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetHostedZoneCountCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/hostedzonecount");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetHostedZoneLimitCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/hostedzonelimit/{HostedZoneId}/{Type}");
    b.p("Type", () => input.Type, "{Type}", false);
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetQueryLoggingConfigCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/queryloggingconfig/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetReusableDelegationSetCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/delegationset/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetReusableDelegationSetLimitCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/reusabledelegationsetlimit/{DelegationSetId}/{Type}");
    b.p("Type", () => input.Type, "{Type}", false);
    b.p("DelegationSetId", () => input.DelegationSetId, "{DelegationSetId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetTrafficPolicyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/trafficpolicy/{Id}/{Version}");
    b.p("Id", () => input.Id, "{Id}", false);
    b.p("Version", () => input.Version.toString(), "{Version}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetTrafficPolicyInstanceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/trafficpolicyinstance/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetTrafficPolicyInstanceCountCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/trafficpolicyinstancecount");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListCidrBlocksCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/cidrcollection/{CollectionId}/cidrblocks");
    b.p("CollectionId", () => input.CollectionId, "{CollectionId}", false);
    const query = smithyClient.map({
        [_l]: [, input[_LN]],
        [_n]: [, input[_NT]],
        [_m]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListCidrCollectionsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/cidrcollection");
    const query = smithyClient.map({
        [_n]: [, input[_NT]],
        [_m]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListCidrLocationsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/cidrcollection/{CollectionId}");
    b.p("CollectionId", () => input.CollectionId, "{CollectionId}", false);
    const query = smithyClient.map({
        [_n]: [, input[_NT]],
        [_m]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListGeoLocationsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/geolocations");
    const query = smithyClient.map({
        [_st]: [, input[_SCC]],
        [_sta]: [, input[_SCCt]],
        [_star]: [, input[_SSC]],
        [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListHealthChecksCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/healthcheck");
    const query = smithyClient.map({
        [_mar]: [, input[_M]],
        [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListHostedZonesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/hostedzone");
    const query = smithyClient.map({
        [_mar]: [, input[_M]],
        [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
        [_d]: [, input[_DSI]],
        [_h]: [, input[_HZT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListHostedZonesByNameCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/hostedzonesbyname");
    const query = smithyClient.map({
        [_dn]: [, input[_DNSN]],
        [_ho]: [, input[_HZI]],
        [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListHostedZonesByVPCCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/hostedzonesbyvpc");
    const query = smithyClient.map({
        [_v]: [, smithyClient.expectNonNull(input[_VPCI], `VPCId`)],
        [_vp]: [, smithyClient.expectNonNull(input[_VPCR], `VPCRegion`)],
        [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
        [_n]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListQueryLoggingConfigsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/queryloggingconfig");
    const query = smithyClient.map({
        [_ho]: [, input[_HZI]],
        [_n]: [, input[_NT]],
        [_m]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListResourceRecordSetsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/hostedzone/{HostedZoneId}/rrset");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    const query = smithyClient.map({
        [_na]: [, input[_SRN]],
        [_t]: [, input[_SRT]],
        [_i]: [, input[_SRI]],
        [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListReusableDelegationSetsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/delegationset");
    const query = smithyClient.map({
        [_mar]: [, input[_M]],
        [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/tags/{ResourceType}/{ResourceId}");
    b.p("ResourceType", () => input.ResourceType, "{ResourceType}", false);
    b.p("ResourceId", () => input.ResourceId, "{ResourceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListTagsForResourcesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/tags/{ResourceType}");
    b.p("ResourceType", () => input.ResourceType, "{ResourceType}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_LTFRR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    bn.lc(input, "ResourceIds", "ResourceIds", () => se_TagResourceIdList(input[_RIe]));
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_ListTrafficPoliciesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/trafficpolicies");
    const query = smithyClient.map({
        [_tr]: [, input[_TPIM]],
        [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTrafficPolicyInstancesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/trafficpolicyinstances");
    const query = smithyClient.map({
        [_ho]: [, input[_HZIM]],
        [_tra]: [, input[_TPINM]],
        [_traf]: [, input[_TPITM]],
        [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTrafficPolicyInstancesByHostedZoneCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/trafficpolicyinstances/hostedzone");
    const query = smithyClient.map({
        [_id]: [, smithyClient.expectNonNull(input[_HZI], `HostedZoneId`)],
        [_tra]: [, input[_TPINM]],
        [_traf]: [, input[_TPITM]],
        [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTrafficPolicyInstancesByPolicyCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/trafficpolicyinstances/trafficpolicy");
    const query = smithyClient.map({
        [_id]: [, smithyClient.expectNonNull(input[_TPI], `TrafficPolicyId`)],
        [_ver]: [
            smithyClient.expectNonNull(input.TrafficPolicyVersion, `TrafficPolicyVersion`) != null,
            () => input[_TPV].toString(),
        ],
        [_ho]: [, input[_HZIM]],
        [_tra]: [, input[_TPINM]],
        [_traf]: [, input[_TPITM]],
        [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTrafficPolicyVersionsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/trafficpolicies/{Id}/versions");
    b.p("Id", () => input.Id, "{Id}", false);
    const query = smithyClient.map({
        [_traff]: [, input[_TPVM]],
        [_ma]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListVPCAssociationAuthorizationsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/hostedzone/{HostedZoneId}/authorizevpcassociation");
    b.p("HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    const query = smithyClient.map({
        [_n]: [, input[_NT]],
        [_m]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_TestDNSAnswerCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/2013-04-01/testdnsanswer");
    const query = smithyClient.map({
        [_ho]: [, smithyClient.expectNonNull(input[_HZI], `HostedZoneId`)],
        [_r]: [, smithyClient.expectNonNull(input[_RN], `RecordName`)],
        [_re]: [, smithyClient.expectNonNull(input[_RT], `RecordType`)],
        [_res]: [, input[_RIP]],
        [_e]: [, input[_EDNSCSIP]],
        [_ed]: [, input[_EDNSCSM]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateHealthCheckCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/healthcheck/{HealthCheckId}");
    b.p("HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_UHCR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_AI] != null) {
        bn.c(se_AlarmIdentifier(input[_AI]).n(_AI));
    }
    bn.lc(input, "ChildHealthChecks", "ChildHealthChecks", () => se_ChildHealthCheckList(input[_CHC]));
    if (input[_Di] != null) {
        bn.c(xmlBuilder.XmlNode.of(_Di, String(input[_Di])).n(_Di));
    }
    if (input[_ESNI] != null) {
        bn.c(xmlBuilder.XmlNode.of(_ESNI, String(input[_ESNI])).n(_ESNI));
    }
    if (input[_FT] != null) {
        bn.c(xmlBuilder.XmlNode.of(_FT, String(input[_FT])).n(_FT));
    }
    bn.cc(input, _FQDN);
    if (input[_HCV] != null) {
        bn.c(xmlBuilder.XmlNode.of(_HCV, String(input[_HCV])).n(_HCV));
    }
    if (input[_HT] != null) {
        bn.c(xmlBuilder.XmlNode.of(_HT, String(input[_HT])).n(_HT));
    }
    bn.cc(input, _IPA);
    bn.cc(input, _IDHS);
    if (input[_I] != null) {
        bn.c(xmlBuilder.XmlNode.of(_I, String(input[_I])).n(_I));
    }
    if (input[_P] != null) {
        bn.c(xmlBuilder.XmlNode.of(_P, String(input[_P])).n(_P));
    }
    bn.lc(input, "Regions", "Regions", () => se_HealthCheckRegionList(input[_R]));
    bn.lc(input, "ResetElements", "ResetElements", () => se_ResettableElementNameList(input[_RE]));
    bn.cc(input, _RP);
    bn.cc(input, _SS);
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateHostedZoneCommentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/hostedzone/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_UHZCR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_C] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RD, input[_C]).n(_C));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateTrafficPolicyCommentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/trafficpolicy/{Id}/{Version}");
    b.p("Id", () => input.Id, "{Id}", false);
    b.p("Version", () => input.Version.toString(), "{Version}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_UTPCR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_C] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TPC, input[_C]).n(_C));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateTrafficPolicyInstanceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/xml",
    };
    b.bp("/2013-04-01/trafficpolicyinstance/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = _ve;
    const bn = new xmlBuilder.XmlNode(_UTPIR);
    bn.a("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input[_TTL] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TTL, String(input[_TTL])).n(_TTL));
    }
    bn.cc(input, _TPI);
    if (input[_TPV] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TPV, String(input[_TPV])).n(_TPV));
    }
    body += bn.toString();
    b.m("POST").h(headers).b(body);
    return b.build();
};
const de_ActivateKeySigningKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_CI] != null) {
        contents[_CI] = de_ChangeInfo(data[_CI]);
    }
    return contents;
};
const de_AssociateVPCWithHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_CI] != null) {
        contents[_CI] = de_ChangeInfo(data[_CI]);
    }
    return contents;
};
const de_ChangeCidrCollectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_Id] != null) {
        contents[_Id] = smithyClient.expectString(data[_Id]);
    }
    return contents;
};
const de_ChangeResourceRecordSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_CI] != null) {
        contents[_CI] = de_ChangeInfo(data[_CI]);
    }
    return contents;
};
const de_ChangeTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_CreateCidrCollectionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_L]: [, output.headers[_l]],
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_Co] != null) {
        contents[_Co] = de_CidrCollection(data[_Co]);
    }
    return contents;
};
const de_CreateHealthCheckCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_L]: [, output.headers[_l]],
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_HC] != null) {
        contents[_HC] = de_HealthCheck(data[_HC]);
    }
    return contents;
};
const de_CreateHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_L]: [, output.headers[_l]],
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_CI] != null) {
        contents[_CI] = de_ChangeInfo(data[_CI]);
    }
    if (data[_DS] != null) {
        contents[_DS] = de_DelegationSet(data[_DS]);
    }
    if (data[_HZ] != null) {
        contents[_HZ] = de_HostedZone(data[_HZ]);
    }
    if (data[_VPC] != null) {
        contents[_VPC] = de_VPC(data[_VPC]);
    }
    return contents;
};
const de_CreateKeySigningKeyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_L]: [, output.headers[_l]],
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_CI] != null) {
        contents[_CI] = de_ChangeInfo(data[_CI]);
    }
    if (data[_KSK] != null) {
        contents[_KSK] = de_KeySigningKey(data[_KSK]);
    }
    return contents;
};
const de_CreateQueryLoggingConfigCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_L]: [, output.headers[_l]],
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_QLC] != null) {
        contents[_QLC] = de_QueryLoggingConfig(data[_QLC]);
    }
    return contents;
};
const de_CreateReusableDelegationSetCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_L]: [, output.headers[_l]],
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_DS] != null) {
        contents[_DS] = de_DelegationSet(data[_DS]);
    }
    return contents;
};
const de_CreateTrafficPolicyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_L]: [, output.headers[_l]],
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_TP] != null) {
        contents[_TP] = de_TrafficPolicy(data[_TP]);
    }
    return contents;
};
const de_CreateTrafficPolicyInstanceCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_L]: [, output.headers[_l]],
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_TPIr] != null) {
        contents[_TPIr] = de_TrafficPolicyInstance(data[_TPIr]);
    }
    return contents;
};
const de_CreateTrafficPolicyVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
        [_L]: [, output.headers[_l]],
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_TP] != null) {
        contents[_TP] = de_TrafficPolicy(data[_TP]);
    }
    return contents;
};
const de_CreateVPCAssociationAuthorizationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_HZI] != null) {
        contents[_HZI] = smithyClient.expectString(data[_HZI]);
    }
    if (data[_VPC] != null) {
        contents[_VPC] = de_VPC(data[_VPC]);
    }
    return contents;
};
const de_DeactivateKeySigningKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_CI] != null) {
        contents[_CI] = de_ChangeInfo(data[_CI]);
    }
    return contents;
};
const de_DeleteCidrCollectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteHealthCheckCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_CI] != null) {
        contents[_CI] = de_ChangeInfo(data[_CI]);
    }
    return contents;
};
const de_DeleteKeySigningKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_CI] != null) {
        contents[_CI] = de_ChangeInfo(data[_CI]);
    }
    return contents;
};
const de_DeleteQueryLoggingConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteReusableDelegationSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteTrafficPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteTrafficPolicyInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteVPCAssociationAuthorizationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DisableHostedZoneDNSSECCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_CI] != null) {
        contents[_CI] = de_ChangeInfo(data[_CI]);
    }
    return contents;
};
const de_DisassociateVPCFromHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_CI] != null) {
        contents[_CI] = de_ChangeInfo(data[_CI]);
    }
    return contents;
};
const de_EnableHostedZoneDNSSECCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_CI] != null) {
        contents[_CI] = de_ChangeInfo(data[_CI]);
    }
    return contents;
};
const de_GetAccountLimitCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_Cou] != null) {
        contents[_Cou] = smithyClient.strictParseLong(data[_Cou]);
    }
    if (data[_Li] != null) {
        contents[_Li] = de_AccountLimit(data[_Li]);
    }
    return contents;
};
const de_GetChangeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_CI] != null) {
        contents[_CI] = de_ChangeInfo(data[_CI]);
    }
    return contents;
};
const de_GetCheckerIpRangesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.CheckerIpRanges).trim() === "") {
        contents[_CIR] = [];
    }
    else if (data[_CIR] != null && data[_CIR][_me] != null) {
        contents[_CIR] = de_CheckerIpRanges(smithyClient.getArrayIfSingleItem(data[_CIR][_me]));
    }
    return contents;
};
const de_GetDNSSECCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.KeySigningKeys).trim() === "") {
        contents[_KSKe] = [];
    }
    else if (data[_KSKe] != null && data[_KSKe][_me] != null) {
        contents[_KSKe] = de_KeySigningKeys(smithyClient.getArrayIfSingleItem(data[_KSKe][_me]));
    }
    if (data[_S] != null) {
        contents[_S] = de_DNSSECStatus(data[_S]);
    }
    return contents;
};
const de_GetGeoLocationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_GLD] != null) {
        contents[_GLD] = de_GeoLocationDetails(data[_GLD]);
    }
    return contents;
};
const de_GetHealthCheckCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_HC] != null) {
        contents[_HC] = de_HealthCheck(data[_HC]);
    }
    return contents;
};
const de_GetHealthCheckCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_HCCe] != null) {
        contents[_HCCe] = smithyClient.strictParseLong(data[_HCCe]);
    }
    return contents;
};
const de_GetHealthCheckLastFailureReasonCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.HealthCheckObservations).trim() === "") {
        contents[_HCO] = [];
    }
    else if (data[_HCO] != null && data[_HCO][_HCOe] != null) {
        contents[_HCO] = de_HealthCheckObservations(smithyClient.getArrayIfSingleItem(data[_HCO][_HCOe]));
    }
    return contents;
};
const de_GetHealthCheckStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.HealthCheckObservations).trim() === "") {
        contents[_HCO] = [];
    }
    else if (data[_HCO] != null && data[_HCO][_HCOe] != null) {
        contents[_HCO] = de_HealthCheckObservations(smithyClient.getArrayIfSingleItem(data[_HCO][_HCOe]));
    }
    return contents;
};
const de_GetHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_DS] != null) {
        contents[_DS] = de_DelegationSet(data[_DS]);
    }
    if (data[_HZ] != null) {
        contents[_HZ] = de_HostedZone(data[_HZ]);
    }
    if (String(data.VPCs).trim() === "") {
        contents[_VPCs] = [];
    }
    else if (data[_VPCs] != null && data[_VPCs][_VPC] != null) {
        contents[_VPCs] = de_VPCs(smithyClient.getArrayIfSingleItem(data[_VPCs][_VPC]));
    }
    return contents;
};
const de_GetHostedZoneCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_HZCo] != null) {
        contents[_HZCo] = smithyClient.strictParseLong(data[_HZCo]);
    }
    return contents;
};
const de_GetHostedZoneLimitCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_Cou] != null) {
        contents[_Cou] = smithyClient.strictParseLong(data[_Cou]);
    }
    if (data[_Li] != null) {
        contents[_Li] = de_HostedZoneLimit(data[_Li]);
    }
    return contents;
};
const de_GetQueryLoggingConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_QLC] != null) {
        contents[_QLC] = de_QueryLoggingConfig(data[_QLC]);
    }
    return contents;
};
const de_GetReusableDelegationSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_DS] != null) {
        contents[_DS] = de_DelegationSet(data[_DS]);
    }
    return contents;
};
const de_GetReusableDelegationSetLimitCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_Cou] != null) {
        contents[_Cou] = smithyClient.strictParseLong(data[_Cou]);
    }
    if (data[_Li] != null) {
        contents[_Li] = de_ReusableDelegationSetLimit(data[_Li]);
    }
    return contents;
};
const de_GetTrafficPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_TP] != null) {
        contents[_TP] = de_TrafficPolicy(data[_TP]);
    }
    return contents;
};
const de_GetTrafficPolicyInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_TPIr] != null) {
        contents[_TPIr] = de_TrafficPolicyInstance(data[_TPIr]);
    }
    return contents;
};
const de_GetTrafficPolicyInstanceCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_TPIC] != null) {
        contents[_TPIC] = smithyClient.strictParseInt32(data[_TPIC]);
    }
    return contents;
};
const de_ListCidrBlocksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.CidrBlocks).trim() === "") {
        contents[_CBi] = [];
    }
    else if (data[_CBi] != null && data[_CBi][_me] != null) {
        contents[_CBi] = de_CidrBlockSummaries(smithyClient.getArrayIfSingleItem(data[_CBi][_me]));
    }
    if (data[_NT] != null) {
        contents[_NT] = smithyClient.expectString(data[_NT]);
    }
    return contents;
};
const de_ListCidrCollectionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.CidrCollections).trim() === "") {
        contents[_CCi] = [];
    }
    else if (data[_CCi] != null && data[_CCi][_me] != null) {
        contents[_CCi] = de_CollectionSummaries(smithyClient.getArrayIfSingleItem(data[_CCi][_me]));
    }
    if (data[_NT] != null) {
        contents[_NT] = smithyClient.expectString(data[_NT]);
    }
    return contents;
};
const de_ListCidrLocationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.CidrLocations).trim() === "") {
        contents[_CL] = [];
    }
    else if (data[_CL] != null && data[_CL][_me] != null) {
        contents[_CL] = de_LocationSummaries(smithyClient.getArrayIfSingleItem(data[_CL][_me]));
    }
    if (data[_NT] != null) {
        contents[_NT] = smithyClient.expectString(data[_NT]);
    }
    return contents;
};
const de_ListGeoLocationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.GeoLocationDetailsList).trim() === "") {
        contents[_GLDL] = [];
    }
    else if (data[_GLDL] != null && data[_GLDL][_GLD] != null) {
        contents[_GLDL] = de_GeoLocationDetailsList(smithyClient.getArrayIfSingleItem(data[_GLDL][_GLD]));
    }
    if (data[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(data[_IT]);
    }
    if (data[_MI] != null) {
        contents[_MI] = smithyClient.strictParseInt32(data[_MI]);
    }
    if (data[_NCC] != null) {
        contents[_NCC] = smithyClient.expectString(data[_NCC]);
    }
    if (data[_NCCe] != null) {
        contents[_NCCe] = smithyClient.expectString(data[_NCCe]);
    }
    if (data[_NSC] != null) {
        contents[_NSC] = smithyClient.expectString(data[_NSC]);
    }
    return contents;
};
const de_ListHealthChecksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.HealthChecks).trim() === "") {
        contents[_HCe] = [];
    }
    else if (data[_HCe] != null && data[_HCe][_HC] != null) {
        contents[_HCe] = de_HealthChecks(smithyClient.getArrayIfSingleItem(data[_HCe][_HC]));
    }
    if (data[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(data[_IT]);
    }
    if (data[_M] != null) {
        contents[_M] = smithyClient.expectString(data[_M]);
    }
    if (data[_MI] != null) {
        contents[_MI] = smithyClient.strictParseInt32(data[_MI]);
    }
    if (data[_NM] != null) {
        contents[_NM] = smithyClient.expectString(data[_NM]);
    }
    return contents;
};
const de_ListHostedZonesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.HostedZones).trim() === "") {
        contents[_HZo] = [];
    }
    else if (data[_HZo] != null && data[_HZo][_HZ] != null) {
        contents[_HZo] = de_HostedZones(smithyClient.getArrayIfSingleItem(data[_HZo][_HZ]));
    }
    if (data[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(data[_IT]);
    }
    if (data[_M] != null) {
        contents[_M] = smithyClient.expectString(data[_M]);
    }
    if (data[_MI] != null) {
        contents[_MI] = smithyClient.strictParseInt32(data[_MI]);
    }
    if (data[_NM] != null) {
        contents[_NM] = smithyClient.expectString(data[_NM]);
    }
    return contents;
};
const de_ListHostedZonesByNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_DNSN] != null) {
        contents[_DNSN] = smithyClient.expectString(data[_DNSN]);
    }
    if (data[_HZI] != null) {
        contents[_HZI] = smithyClient.expectString(data[_HZI]);
    }
    if (String(data.HostedZones).trim() === "") {
        contents[_HZo] = [];
    }
    else if (data[_HZo] != null && data[_HZo][_HZ] != null) {
        contents[_HZo] = de_HostedZones(smithyClient.getArrayIfSingleItem(data[_HZo][_HZ]));
    }
    if (data[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(data[_IT]);
    }
    if (data[_MI] != null) {
        contents[_MI] = smithyClient.strictParseInt32(data[_MI]);
    }
    if (data[_NDNSN] != null) {
        contents[_NDNSN] = smithyClient.expectString(data[_NDNSN]);
    }
    if (data[_NHZI] != null) {
        contents[_NHZI] = smithyClient.expectString(data[_NHZI]);
    }
    return contents;
};
const de_ListHostedZonesByVPCCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.HostedZoneSummaries).trim() === "") {
        contents[_HZS] = [];
    }
    else if (data[_HZS] != null && data[_HZS][_HZSo] != null) {
        contents[_HZS] = de_HostedZoneSummaries(smithyClient.getArrayIfSingleItem(data[_HZS][_HZSo]));
    }
    if (data[_MI] != null) {
        contents[_MI] = smithyClient.strictParseInt32(data[_MI]);
    }
    if (data[_NT] != null) {
        contents[_NT] = smithyClient.expectString(data[_NT]);
    }
    return contents;
};
const de_ListQueryLoggingConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_NT] != null) {
        contents[_NT] = smithyClient.expectString(data[_NT]);
    }
    if (String(data.QueryLoggingConfigs).trim() === "") {
        contents[_QLCu] = [];
    }
    else if (data[_QLCu] != null && data[_QLCu][_QLC] != null) {
        contents[_QLCu] = de_QueryLoggingConfigs(smithyClient.getArrayIfSingleItem(data[_QLCu][_QLC]));
    }
    return contents;
};
const de_ListResourceRecordSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(data[_IT]);
    }
    if (data[_MI] != null) {
        contents[_MI] = smithyClient.strictParseInt32(data[_MI]);
    }
    if (data[_NRI] != null) {
        contents[_NRI] = smithyClient.expectString(data[_NRI]);
    }
    if (data[_NRN] != null) {
        contents[_NRN] = smithyClient.expectString(data[_NRN]);
    }
    if (data[_NRT] != null) {
        contents[_NRT] = smithyClient.expectString(data[_NRT]);
    }
    if (String(data.ResourceRecordSets).trim() === "") {
        contents[_RRS] = [];
    }
    else if (data[_RRS] != null && data[_RRS][_RRSe] != null) {
        contents[_RRS] = de_ResourceRecordSets(smithyClient.getArrayIfSingleItem(data[_RRS][_RRSe]));
    }
    return contents;
};
const de_ListReusableDelegationSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.DelegationSets).trim() === "") {
        contents[_DSe] = [];
    }
    else if (data[_DSe] != null && data[_DSe][_DS] != null) {
        contents[_DSe] = de_DelegationSets(smithyClient.getArrayIfSingleItem(data[_DSe][_DS]));
    }
    if (data[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(data[_IT]);
    }
    if (data[_M] != null) {
        contents[_M] = smithyClient.expectString(data[_M]);
    }
    if (data[_MI] != null) {
        contents[_MI] = smithyClient.strictParseInt32(data[_MI]);
    }
    if (data[_NM] != null) {
        contents[_NM] = smithyClient.expectString(data[_NM]);
    }
    return contents;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_RTS] != null) {
        contents[_RTS] = de_ResourceTagSet(data[_RTS]);
    }
    return contents;
};
const de_ListTagsForResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (String(data.ResourceTagSets).trim() === "") {
        contents[_RTSe] = [];
    }
    else if (data[_RTSe] != null && data[_RTSe][_RTS] != null) {
        contents[_RTSe] = de_ResourceTagSetList(smithyClient.getArrayIfSingleItem(data[_RTSe][_RTS]));
    }
    return contents;
};
const de_ListTrafficPoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(data[_IT]);
    }
    if (data[_MI] != null) {
        contents[_MI] = smithyClient.strictParseInt32(data[_MI]);
    }
    if (data[_TPIM] != null) {
        contents[_TPIM] = smithyClient.expectString(data[_TPIM]);
    }
    if (String(data.TrafficPolicySummaries).trim() === "") {
        contents[_TPS] = [];
    }
    else if (data[_TPS] != null && data[_TPS][_TPSr] != null) {
        contents[_TPS] = de_TrafficPolicySummaries(smithyClient.getArrayIfSingleItem(data[_TPS][_TPSr]));
    }
    return contents;
};
const de_ListTrafficPolicyInstancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_HZIM] != null) {
        contents[_HZIM] = smithyClient.expectString(data[_HZIM]);
    }
    if (data[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(data[_IT]);
    }
    if (data[_MI] != null) {
        contents[_MI] = smithyClient.strictParseInt32(data[_MI]);
    }
    if (data[_TPINM] != null) {
        contents[_TPINM] = smithyClient.expectString(data[_TPINM]);
    }
    if (data[_TPITM] != null) {
        contents[_TPITM] = smithyClient.expectString(data[_TPITM]);
    }
    if (String(data.TrafficPolicyInstances).trim() === "") {
        contents[_TPIra] = [];
    }
    else if (data[_TPIra] != null && data[_TPIra][_TPIr] != null) {
        contents[_TPIra] = de_TrafficPolicyInstances(smithyClient.getArrayIfSingleItem(data[_TPIra][_TPIr]));
    }
    return contents;
};
const de_ListTrafficPolicyInstancesByHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(data[_IT]);
    }
    if (data[_MI] != null) {
        contents[_MI] = smithyClient.strictParseInt32(data[_MI]);
    }
    if (data[_TPINM] != null) {
        contents[_TPINM] = smithyClient.expectString(data[_TPINM]);
    }
    if (data[_TPITM] != null) {
        contents[_TPITM] = smithyClient.expectString(data[_TPITM]);
    }
    if (String(data.TrafficPolicyInstances).trim() === "") {
        contents[_TPIra] = [];
    }
    else if (data[_TPIra] != null && data[_TPIra][_TPIr] != null) {
        contents[_TPIra] = de_TrafficPolicyInstances(smithyClient.getArrayIfSingleItem(data[_TPIra][_TPIr]));
    }
    return contents;
};
const de_ListTrafficPolicyInstancesByPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_HZIM] != null) {
        contents[_HZIM] = smithyClient.expectString(data[_HZIM]);
    }
    if (data[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(data[_IT]);
    }
    if (data[_MI] != null) {
        contents[_MI] = smithyClient.strictParseInt32(data[_MI]);
    }
    if (data[_TPINM] != null) {
        contents[_TPINM] = smithyClient.expectString(data[_TPINM]);
    }
    if (data[_TPITM] != null) {
        contents[_TPITM] = smithyClient.expectString(data[_TPITM]);
    }
    if (String(data.TrafficPolicyInstances).trim() === "") {
        contents[_TPIra] = [];
    }
    else if (data[_TPIra] != null && data[_TPIra][_TPIr] != null) {
        contents[_TPIra] = de_TrafficPolicyInstances(smithyClient.getArrayIfSingleItem(data[_TPIra][_TPIr]));
    }
    return contents;
};
const de_ListTrafficPolicyVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_IT] != null) {
        contents[_IT] = smithyClient.parseBoolean(data[_IT]);
    }
    if (data[_MI] != null) {
        contents[_MI] = smithyClient.strictParseInt32(data[_MI]);
    }
    if (String(data.TrafficPolicies).trim() === "") {
        contents[_TPr] = [];
    }
    else if (data[_TPr] != null && data[_TPr][_TP] != null) {
        contents[_TPr] = de_TrafficPolicies(smithyClient.getArrayIfSingleItem(data[_TPr][_TP]));
    }
    if (data[_TPVM] != null) {
        contents[_TPVM] = smithyClient.expectString(data[_TPVM]);
    }
    return contents;
};
const de_ListVPCAssociationAuthorizationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_HZI] != null) {
        contents[_HZI] = smithyClient.expectString(data[_HZI]);
    }
    if (data[_NT] != null) {
        contents[_NT] = smithyClient.expectString(data[_NT]);
    }
    if (String(data.VPCs).trim() === "") {
        contents[_VPCs] = [];
    }
    else if (data[_VPCs] != null && data[_VPCs][_VPC] != null) {
        contents[_VPCs] = de_VPCs(smithyClient.getArrayIfSingleItem(data[_VPCs][_VPC]));
    }
    return contents;
};
const de_TestDNSAnswerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_Na] != null) {
        contents[_Na] = smithyClient.expectString(data[_Na]);
    }
    if (data[_Pr] != null) {
        contents[_Pr] = smithyClient.expectString(data[_Pr]);
    }
    if (String(data.RecordData).trim() === "") {
        contents[_RDe] = [];
    }
    else if (data[_RDe] != null && data[_RDe][_RDE] != null) {
        contents[_RDe] = de_RecordData(smithyClient.getArrayIfSingleItem(data[_RDe][_RDE]));
    }
    if (data[_RN] != null) {
        contents[_RN] = smithyClient.expectString(data[_RN]);
    }
    if (data[_RT] != null) {
        contents[_RT] = smithyClient.expectString(data[_RT]);
    }
    if (data[_RC] != null) {
        contents[_RC] = smithyClient.expectString(data[_RC]);
    }
    return contents;
};
const de_UpdateHealthCheckCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_HC] != null) {
        contents[_HC] = de_HealthCheck(data[_HC]);
    }
    return contents;
};
const de_UpdateHostedZoneCommentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_HZ] != null) {
        contents[_HZ] = de_HostedZone(data[_HZ]);
    }
    return contents;
};
const de_UpdateTrafficPolicyCommentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_TP] != null) {
        contents[_TP] = de_TrafficPolicy(data[_TP]);
    }
    return contents;
};
const de_UpdateTrafficPolicyInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseXmlBody(output.body, context)), "body");
    if (data[_TPIr] != null) {
        contents[_TPIr] = de_TrafficPolicyInstance(data[_TPIr]);
    }
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseXmlErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await de_ConcurrentModificationRes(parsedOutput);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput);
        case "InvalidKMSArn":
        case "com.amazonaws.route53#InvalidKMSArn":
            throw await de_InvalidKMSArnRes(parsedOutput);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await de_InvalidKeySigningKeyStatusRes(parsedOutput);
        case "InvalidSigningStatus":
        case "com.amazonaws.route53#InvalidSigningStatus":
            throw await de_InvalidSigningStatusRes(parsedOutput);
        case "NoSuchKeySigningKey":
        case "com.amazonaws.route53#NoSuchKeySigningKey":
            throw await de_NoSuchKeySigningKeyRes(parsedOutput);
        case "ConflictingDomainExists":
        case "com.amazonaws.route53#ConflictingDomainExists":
            throw await de_ConflictingDomainExistsRes(parsedOutput);
        case "InvalidVPCId":
        case "com.amazonaws.route53#InvalidVPCId":
            throw await de_InvalidVPCIdRes(parsedOutput);
        case "LimitsExceeded":
        case "com.amazonaws.route53#LimitsExceeded":
            throw await de_LimitsExceededRes(parsedOutput);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await de_NoSuchHostedZoneRes(parsedOutput);
        case "NotAuthorizedException":
        case "com.amazonaws.route53#NotAuthorizedException":
            throw await de_NotAuthorizedExceptionRes(parsedOutput);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await de_PriorRequestNotCompleteRes(parsedOutput);
        case "PublicZoneVPCAssociation":
        case "com.amazonaws.route53#PublicZoneVPCAssociation":
            throw await de_PublicZoneVPCAssociationRes(parsedOutput);
        case "CidrBlockInUseException":
        case "com.amazonaws.route53#CidrBlockInUseException":
            throw await de_CidrBlockInUseExceptionRes(parsedOutput);
        case "CidrCollectionVersionMismatchException":
        case "com.amazonaws.route53#CidrCollectionVersionMismatchException":
            throw await de_CidrCollectionVersionMismatchExceptionRes(parsedOutput);
        case "NoSuchCidrCollectionException":
        case "com.amazonaws.route53#NoSuchCidrCollectionException":
            throw await de_NoSuchCidrCollectionExceptionRes(parsedOutput);
        case "InvalidChangeBatch":
        case "com.amazonaws.route53#InvalidChangeBatch":
            throw await de_InvalidChangeBatchRes(parsedOutput);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await de_NoSuchHealthCheckRes(parsedOutput);
        case "ThrottlingException":
        case "com.amazonaws.route53#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput);
        case "CidrCollectionAlreadyExistsException":
        case "com.amazonaws.route53#CidrCollectionAlreadyExistsException":
            throw await de_CidrCollectionAlreadyExistsExceptionRes(parsedOutput);
        case "HealthCheckAlreadyExists":
        case "com.amazonaws.route53#HealthCheckAlreadyExists":
            throw await de_HealthCheckAlreadyExistsRes(parsedOutput);
        case "TooManyHealthChecks":
        case "com.amazonaws.route53#TooManyHealthChecks":
            throw await de_TooManyHealthChecksRes(parsedOutput);
        case "DelegationSetNotAvailable":
        case "com.amazonaws.route53#DelegationSetNotAvailable":
            throw await de_DelegationSetNotAvailableRes(parsedOutput);
        case "DelegationSetNotReusable":
        case "com.amazonaws.route53#DelegationSetNotReusable":
            throw await de_DelegationSetNotReusableRes(parsedOutput);
        case "HostedZoneAlreadyExists":
        case "com.amazonaws.route53#HostedZoneAlreadyExists":
            throw await de_HostedZoneAlreadyExistsRes(parsedOutput);
        case "InvalidDomainName":
        case "com.amazonaws.route53#InvalidDomainName":
            throw await de_InvalidDomainNameRes(parsedOutput);
        case "NoSuchDelegationSet":
        case "com.amazonaws.route53#NoSuchDelegationSet":
            throw await de_NoSuchDelegationSetRes(parsedOutput);
        case "TooManyHostedZones":
        case "com.amazonaws.route53#TooManyHostedZones":
            throw await de_TooManyHostedZonesRes(parsedOutput);
        case "InvalidArgument":
        case "com.amazonaws.route53#InvalidArgument":
            throw await de_InvalidArgumentRes(parsedOutput);
        case "InvalidKeySigningKeyName":
        case "com.amazonaws.route53#InvalidKeySigningKeyName":
            throw await de_InvalidKeySigningKeyNameRes(parsedOutput);
        case "KeySigningKeyAlreadyExists":
        case "com.amazonaws.route53#KeySigningKeyAlreadyExists":
            throw await de_KeySigningKeyAlreadyExistsRes(parsedOutput);
        case "TooManyKeySigningKeys":
        case "com.amazonaws.route53#TooManyKeySigningKeys":
            throw await de_TooManyKeySigningKeysRes(parsedOutput);
        case "InsufficientCloudWatchLogsResourcePolicy":
        case "com.amazonaws.route53#InsufficientCloudWatchLogsResourcePolicy":
            throw await de_InsufficientCloudWatchLogsResourcePolicyRes(parsedOutput);
        case "NoSuchCloudWatchLogsLogGroup":
        case "com.amazonaws.route53#NoSuchCloudWatchLogsLogGroup":
            throw await de_NoSuchCloudWatchLogsLogGroupRes(parsedOutput);
        case "QueryLoggingConfigAlreadyExists":
        case "com.amazonaws.route53#QueryLoggingConfigAlreadyExists":
            throw await de_QueryLoggingConfigAlreadyExistsRes(parsedOutput);
        case "DelegationSetAlreadyCreated":
        case "com.amazonaws.route53#DelegationSetAlreadyCreated":
            throw await de_DelegationSetAlreadyCreatedRes(parsedOutput);
        case "DelegationSetAlreadyReusable":
        case "com.amazonaws.route53#DelegationSetAlreadyReusable":
            throw await de_DelegationSetAlreadyReusableRes(parsedOutput);
        case "HostedZoneNotFound":
        case "com.amazonaws.route53#HostedZoneNotFound":
            throw await de_HostedZoneNotFoundRes(parsedOutput);
        case "InvalidTrafficPolicyDocument":
        case "com.amazonaws.route53#InvalidTrafficPolicyDocument":
            throw await de_InvalidTrafficPolicyDocumentRes(parsedOutput);
        case "TooManyTrafficPolicies":
        case "com.amazonaws.route53#TooManyTrafficPolicies":
            throw await de_TooManyTrafficPoliciesRes(parsedOutput);
        case "TrafficPolicyAlreadyExists":
        case "com.amazonaws.route53#TrafficPolicyAlreadyExists":
            throw await de_TrafficPolicyAlreadyExistsRes(parsedOutput);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await de_NoSuchTrafficPolicyRes(parsedOutput);
        case "TooManyTrafficPolicyInstances":
        case "com.amazonaws.route53#TooManyTrafficPolicyInstances":
            throw await de_TooManyTrafficPolicyInstancesRes(parsedOutput);
        case "TrafficPolicyInstanceAlreadyExists":
        case "com.amazonaws.route53#TrafficPolicyInstanceAlreadyExists":
            throw await de_TrafficPolicyInstanceAlreadyExistsRes(parsedOutput);
        case "TooManyTrafficPolicyVersionsForCurrentPolicy":
        case "com.amazonaws.route53#TooManyTrafficPolicyVersionsForCurrentPolicy":
            throw await de_TooManyTrafficPolicyVersionsForCurrentPolicyRes(parsedOutput);
        case "TooManyVPCAssociationAuthorizations":
        case "com.amazonaws.route53#TooManyVPCAssociationAuthorizations":
            throw await de_TooManyVPCAssociationAuthorizationsRes(parsedOutput);
        case "KeySigningKeyInParentDSRecord":
        case "com.amazonaws.route53#KeySigningKeyInParentDSRecord":
            throw await de_KeySigningKeyInParentDSRecordRes(parsedOutput);
        case "KeySigningKeyInUse":
        case "com.amazonaws.route53#KeySigningKeyInUse":
            throw await de_KeySigningKeyInUseRes(parsedOutput);
        case "CidrCollectionInUseException":
        case "com.amazonaws.route53#CidrCollectionInUseException":
            throw await de_CidrCollectionInUseExceptionRes(parsedOutput);
        case "HealthCheckInUse":
        case "com.amazonaws.route53#HealthCheckInUse":
            throw await de_HealthCheckInUseRes(parsedOutput);
        case "HostedZoneNotEmpty":
        case "com.amazonaws.route53#HostedZoneNotEmpty":
            throw await de_HostedZoneNotEmptyRes(parsedOutput);
        case "NoSuchQueryLoggingConfig":
        case "com.amazonaws.route53#NoSuchQueryLoggingConfig":
            throw await de_NoSuchQueryLoggingConfigRes(parsedOutput);
        case "DelegationSetInUse":
        case "com.amazonaws.route53#DelegationSetInUse":
            throw await de_DelegationSetInUseRes(parsedOutput);
        case "TrafficPolicyInUse":
        case "com.amazonaws.route53#TrafficPolicyInUse":
            throw await de_TrafficPolicyInUseRes(parsedOutput);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await de_NoSuchTrafficPolicyInstanceRes(parsedOutput);
        case "VPCAssociationAuthorizationNotFound":
        case "com.amazonaws.route53#VPCAssociationAuthorizationNotFound":
            throw await de_VPCAssociationAuthorizationNotFoundRes(parsedOutput);
        case "DNSSECNotFound":
        case "com.amazonaws.route53#DNSSECNotFound":
            throw await de_DNSSECNotFoundRes(parsedOutput);
        case "LastVPCAssociation":
        case "com.amazonaws.route53#LastVPCAssociation":
            throw await de_LastVPCAssociationRes(parsedOutput);
        case "VPCAssociationNotFound":
        case "com.amazonaws.route53#VPCAssociationNotFound":
            throw await de_VPCAssociationNotFoundRes(parsedOutput);
        case "HostedZonePartiallyDelegated":
        case "com.amazonaws.route53#HostedZonePartiallyDelegated":
            throw await de_HostedZonePartiallyDelegatedRes(parsedOutput);
        case "KeySigningKeyWithActiveStatusNotFound":
        case "com.amazonaws.route53#KeySigningKeyWithActiveStatusNotFound":
            throw await de_KeySigningKeyWithActiveStatusNotFoundRes(parsedOutput);
        case "NoSuchChange":
        case "com.amazonaws.route53#NoSuchChange":
            throw await de_NoSuchChangeRes(parsedOutput);
        case "NoSuchGeoLocation":
        case "com.amazonaws.route53#NoSuchGeoLocation":
            throw await de_NoSuchGeoLocationRes(parsedOutput);
        case "IncompatibleVersion":
        case "com.amazonaws.route53#IncompatibleVersion":
            throw await de_IncompatibleVersionRes(parsedOutput);
        case "HostedZoneNotPrivate":
        case "com.amazonaws.route53#HostedZoneNotPrivate":
            throw await de_HostedZoneNotPrivateRes(parsedOutput);
        case "NoSuchCidrLocationException":
        case "com.amazonaws.route53#NoSuchCidrLocationException":
            throw await de_NoSuchCidrLocationExceptionRes(parsedOutput);
        case "InvalidPaginationToken":
        case "com.amazonaws.route53#InvalidPaginationToken":
            throw await de_InvalidPaginationTokenRes(parsedOutput);
        case "HealthCheckVersionMismatch":
        case "com.amazonaws.route53#HealthCheckVersionMismatch":
            throw await de_HealthCheckVersionMismatchRes(parsedOutput);
        case "ConflictingTypes":
        case "com.amazonaws.route53#ConflictingTypes":
            throw await de_ConflictingTypesRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const throwDefaultError = smithyClient.withBaseException(Route53ServiceException);
const de_CidrBlockInUseExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_Me] != null) {
        contents[_Me] = smithyClient.expectString(data[_Me]);
    }
    const exception = new CidrBlockInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_CidrCollectionAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_Me] != null) {
        contents[_Me] = smithyClient.expectString(data[_Me]);
    }
    const exception = new CidrCollectionAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_CidrCollectionInUseExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_Me] != null) {
        contents[_Me] = smithyClient.expectString(data[_Me]);
    }
    const exception = new CidrCollectionInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_CidrCollectionVersionMismatchExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_Me] != null) {
        contents[_Me] = smithyClient.expectString(data[_Me]);
    }
    const exception = new CidrCollectionVersionMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_ConcurrentModificationRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new ConcurrentModification({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_ConflictingDomainExistsRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new ConflictingDomainExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_ConflictingTypesRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new ConflictingTypes({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_DelegationSetAlreadyCreatedRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new DelegationSetAlreadyCreated({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_DelegationSetAlreadyReusableRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new DelegationSetAlreadyReusable({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_DelegationSetInUseRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new DelegationSetInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_DelegationSetNotAvailableRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new DelegationSetNotAvailable({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_DelegationSetNotReusableRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new DelegationSetNotReusable({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_DNSSECNotFoundRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new DNSSECNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_HealthCheckAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new HealthCheckAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_HealthCheckInUseRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new HealthCheckInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_HealthCheckVersionMismatchRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new HealthCheckVersionMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_HostedZoneAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new HostedZoneAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_HostedZoneNotEmptyRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new HostedZoneNotEmpty({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_HostedZoneNotFoundRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new HostedZoneNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_HostedZoneNotPrivateRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new HostedZoneNotPrivate({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_HostedZonePartiallyDelegatedRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new HostedZonePartiallyDelegated({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_IncompatibleVersionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new IncompatibleVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_InsufficientCloudWatchLogsResourcePolicyRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new InsufficientCloudWatchLogsResourcePolicy({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_InvalidArgumentRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new InvalidArgument({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_InvalidChangeBatchRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    if (String(data.messages).trim() === "") {
        contents[_mess] = [];
    }
    else if (data[_mess] != null && data[_mess][_Me] != null) {
        contents[_mess] = de_ErrorMessages(smithyClient.getArrayIfSingleItem(data[_mess][_Me]));
    }
    const exception = new InvalidChangeBatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_InvalidDomainNameRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new InvalidDomainName({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_InvalidInputRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new InvalidInput({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_InvalidKeySigningKeyNameRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new InvalidKeySigningKeyName({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_InvalidKeySigningKeyStatusRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new InvalidKeySigningKeyStatus({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_InvalidKMSArnRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new InvalidKMSArn({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_InvalidPaginationTokenRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new InvalidPaginationToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_InvalidSigningStatusRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new InvalidSigningStatus({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_InvalidTrafficPolicyDocumentRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new InvalidTrafficPolicyDocument({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_InvalidVPCIdRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new InvalidVPCId({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_KeySigningKeyAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new KeySigningKeyAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_KeySigningKeyInParentDSRecordRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new KeySigningKeyInParentDSRecord({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_KeySigningKeyInUseRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new KeySigningKeyInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_KeySigningKeyWithActiveStatusNotFoundRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new KeySigningKeyWithActiveStatusNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_LastVPCAssociationRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new LastVPCAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_LimitsExceededRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new LimitsExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NoSuchChangeRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new NoSuchChange({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NoSuchCidrCollectionExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_Me] != null) {
        contents[_Me] = smithyClient.expectString(data[_Me]);
    }
    const exception = new NoSuchCidrCollectionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NoSuchCidrLocationExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_Me] != null) {
        contents[_Me] = smithyClient.expectString(data[_Me]);
    }
    const exception = new NoSuchCidrLocationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NoSuchCloudWatchLogsLogGroupRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new NoSuchCloudWatchLogsLogGroup({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NoSuchDelegationSetRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new NoSuchDelegationSet({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NoSuchGeoLocationRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new NoSuchGeoLocation({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NoSuchHealthCheckRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new NoSuchHealthCheck({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NoSuchHostedZoneRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new NoSuchHostedZone({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NoSuchKeySigningKeyRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new NoSuchKeySigningKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NoSuchQueryLoggingConfigRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new NoSuchQueryLoggingConfig({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NoSuchTrafficPolicyRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new NoSuchTrafficPolicy({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NoSuchTrafficPolicyInstanceRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new NoSuchTrafficPolicyInstance({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_NotAuthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new NotAuthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_PriorRequestNotCompleteRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new PriorRequestNotComplete({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_PublicZoneVPCAssociationRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new PublicZoneVPCAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_QueryLoggingConfigAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new QueryLoggingConfigAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_TooManyHealthChecksRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new TooManyHealthChecks({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_TooManyHostedZonesRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new TooManyHostedZones({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_TooManyKeySigningKeysRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new TooManyKeySigningKeys({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_TooManyTrafficPoliciesRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new TooManyTrafficPolicies({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_TooManyTrafficPolicyInstancesRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new TooManyTrafficPolicyInstances({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_TooManyTrafficPolicyVersionsForCurrentPolicyRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new TooManyTrafficPolicyVersionsForCurrentPolicy({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_TooManyVPCAssociationAuthorizationsRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new TooManyVPCAssociationAuthorizations({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_TrafficPolicyAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new TrafficPolicyAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_TrafficPolicyInstanceAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new TrafficPolicyInstanceAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_TrafficPolicyInUseRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new TrafficPolicyInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_VPCAssociationAuthorizationNotFoundRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new VPCAssociationAuthorizationNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const de_VPCAssociationNotFoundRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body.Error;
    if (data[_mes] != null) {
        contents[_mes] = smithyClient.expectString(data[_mes]);
    }
    const exception = new VPCAssociationNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body.Error);
};
const se_AlarmIdentifier = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_AI);
    if (input[_Re] != null) {
        bn.c(xmlBuilder.XmlNode.of(_CWR, input[_Re]).n(_Re));
    }
    if (input[_N] != null) {
        bn.c(xmlBuilder.XmlNode.of(_AN, input[_N]).n(_N));
    }
    return bn;
};
const se_AliasTarget = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_ATl);
    if (input[_HZI] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RI, input[_HZI]).n(_HZI));
    }
    bn.cc(input, _DNSN);
    if (input[_ETH] != null) {
        bn.c(xmlBuilder.XmlNode.of(_AHE, String(input[_ETH])).n(_ETH));
    }
    return bn;
};
const se_Change = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_Cha);
    if (input[_A] != null) {
        bn.c(xmlBuilder.XmlNode.of(_CA, input[_A]).n(_A));
    }
    if (input[_RRSe] != null) {
        bn.c(se_ResourceRecordSet(input[_RRSe]).n(_RRSe));
    }
    return bn;
};
const se_ChangeBatch = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_CB);
    if (input[_C] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RD, input[_C]).n(_C));
    }
    bn.lc(input, "Changes", "Changes", () => se_Changes(input[_Ch]));
    return bn;
};
const se_Changes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const n = se_Change(entry);
        return n.n(_Cha);
    });
};
const se_ChildHealthCheckList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const n = xmlBuilder.XmlNode.of(_HCI, entry);
        return n.n(_CHCh);
    });
};
const se_CidrCollectionChange = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_CCC);
    if (input[_LN] != null) {
        bn.c(xmlBuilder.XmlNode.of(_CLNDNA, input[_LN]).n(_LN));
    }
    if (input[_A] != null) {
        bn.c(xmlBuilder.XmlNode.of(_CCCA, input[_A]).n(_A));
    }
    bn.lc(input, "CidrList", "CidrList", () => se_CidrList(input[_CLi]));
    return bn;
};
const se_CidrCollectionChanges = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const n = se_CidrCollectionChange(entry);
        return n.n(_me);
    });
};
const se_CidrList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const n = xmlBuilder.XmlNode.of(_Ci, entry);
        return n.n(_Ci);
    });
};
const se_CidrRoutingConfig = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_CRC);
    if (input[_CIo] != null) {
        bn.c(xmlBuilder.XmlNode.of(_UUID, input[_CIo]).n(_CIo));
    }
    if (input[_LN] != null) {
        bn.c(xmlBuilder.XmlNode.of(_CLNDA, input[_LN]).n(_LN));
    }
    return bn;
};
const se_Coordinates = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_Coo);
    bn.cc(input, _La);
    bn.cc(input, _Lo);
    return bn;
};
const se_GeoLocation = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_GL);
    if (input[_CC] != null) {
        bn.c(xmlBuilder.XmlNode.of(_GLCC, input[_CC]).n(_CC));
    }
    if (input[_CCo] != null) {
        bn.c(xmlBuilder.XmlNode.of(_GLCCe, input[_CCo]).n(_CCo));
    }
    if (input[_SC] != null) {
        bn.c(xmlBuilder.XmlNode.of(_GLSC, input[_SC]).n(_SC));
    }
    return bn;
};
const se_GeoProximityLocation = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_GPL);
    bn.cc(input, _AWSR);
    bn.cc(input, _LZG);
    if (input[_Coo] != null) {
        bn.c(se_Coordinates(input[_Coo]).n(_Coo));
    }
    if (input[_B] != null) {
        bn.c(xmlBuilder.XmlNode.of(_B, String(input[_B])).n(_B));
    }
    return bn;
};
const se_HealthCheckConfig = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_HCC);
    bn.cc(input, _IPA);
    if (input[_P] != null) {
        bn.c(xmlBuilder.XmlNode.of(_P, String(input[_P])).n(_P));
    }
    if (input[_T] != null) {
        bn.c(xmlBuilder.XmlNode.of(_HCT, input[_T]).n(_T));
    }
    bn.cc(input, _RP);
    bn.cc(input, _FQDN);
    bn.cc(input, _SS);
    if (input[_RIeq] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RIeq, String(input[_RIeq])).n(_RIeq));
    }
    if (input[_FT] != null) {
        bn.c(xmlBuilder.XmlNode.of(_FT, String(input[_FT])).n(_FT));
    }
    if (input[_ML] != null) {
        bn.c(xmlBuilder.XmlNode.of(_ML, String(input[_ML])).n(_ML));
    }
    if (input[_I] != null) {
        bn.c(xmlBuilder.XmlNode.of(_I, String(input[_I])).n(_I));
    }
    if (input[_Di] != null) {
        bn.c(xmlBuilder.XmlNode.of(_Di, String(input[_Di])).n(_Di));
    }
    if (input[_HT] != null) {
        bn.c(xmlBuilder.XmlNode.of(_HT, String(input[_HT])).n(_HT));
    }
    bn.lc(input, "ChildHealthChecks", "ChildHealthChecks", () => se_ChildHealthCheckList(input[_CHC]));
    if (input[_ESNI] != null) {
        bn.c(xmlBuilder.XmlNode.of(_ESNI, String(input[_ESNI])).n(_ESNI));
    }
    bn.lc(input, "Regions", "Regions", () => se_HealthCheckRegionList(input[_R]));
    if (input[_AI] != null) {
        bn.c(se_AlarmIdentifier(input[_AI]).n(_AI));
    }
    bn.cc(input, _IDHS);
    bn.cc(input, _RCA);
    return bn;
};
const se_HealthCheckRegionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const n = xmlBuilder.XmlNode.of(_HCR, entry);
        return n.n(_Re);
    });
};
const se_HostedZoneConfig = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_HZC);
    if (input[_C] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RD, input[_C]).n(_C));
    }
    if (input[_PZ] != null) {
        bn.c(xmlBuilder.XmlNode.of(_IPZ, String(input[_PZ])).n(_PZ));
    }
    return bn;
};
const se_ResettableElementNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const n = xmlBuilder.XmlNode.of(_REN, entry);
        return n.n(_REN);
    });
};
const se_ResourceRecord = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_RR);
    if (input[_V] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RDa, input[_V]).n(_V));
    }
    return bn;
};
const se_ResourceRecords = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const n = se_ResourceRecord(entry);
        return n.n(_RR);
    });
};
const se_ResourceRecordSet = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_RRSe);
    if (input[_N] != null) {
        bn.c(xmlBuilder.XmlNode.of(_DNSN, input[_N]).n(_N));
    }
    if (input[_T] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RRT, input[_T]).n(_T));
    }
    if (input[_SI] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RRSI, input[_SI]).n(_SI));
    }
    if (input[_W] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RRSW, String(input[_W])).n(_W));
    }
    if (input[_Re] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RRSR, input[_Re]).n(_Re));
    }
    if (input[_GL] != null) {
        bn.c(se_GeoLocation(input[_GL]).n(_GL));
    }
    if (input[_F] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RRSF, input[_F]).n(_F));
    }
    if (input[_MVA] != null) {
        bn.c(xmlBuilder.XmlNode.of(_RRSMVA, String(input[_MVA])).n(_MVA));
    }
    if (input[_TTL] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TTL, String(input[_TTL])).n(_TTL));
    }
    bn.lc(input, "ResourceRecords", "ResourceRecords", () => se_ResourceRecords(input[_RRe]));
    if (input[_ATl] != null) {
        bn.c(se_AliasTarget(input[_ATl]).n(_ATl));
    }
    bn.cc(input, _HCI);
    bn.cc(input, _TPII);
    if (input[_CRC] != null) {
        bn.c(se_CidrRoutingConfig(input[_CRC]).n(_CRC));
    }
    if (input[_GPL] != null) {
        bn.c(se_GeoProximityLocation(input[_GPL]).n(_GPL));
    }
    return bn;
};
const se_Tag = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_Ta);
    if (input[_K] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TK, input[_K]).n(_K));
    }
    if (input[_V] != null) {
        bn.c(xmlBuilder.XmlNode.of(_TV, input[_V]).n(_V));
    }
    return bn;
};
const se_TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const n = xmlBuilder.XmlNode.of(_TK, entry);
        return n.n(_K);
    });
};
const se_TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const n = se_Tag(entry);
        return n.n(_Ta);
    });
};
const se_TagResourceIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const n = xmlBuilder.XmlNode.of(_TRI, entry);
        return n.n(_RI);
    });
};
const se_VPC = (input, context) => {
    const bn = new xmlBuilder.XmlNode(_VPC);
    bn.cc(input, _VPCR);
    bn.cc(input, _VPCI);
    return bn;
};
const de_AccountLimit = (output, context) => {
    const contents = {};
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (output[_V] != null) {
        contents[_V] = smithyClient.strictParseLong(output[_V]);
    }
    return contents;
};
const de_AlarmIdentifier = (output, context) => {
    const contents = {};
    if (output[_Re] != null) {
        contents[_Re] = smithyClient.expectString(output[_Re]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    return contents;
};
const de_AliasTarget = (output, context) => {
    const contents = {};
    if (output[_HZI] != null) {
        contents[_HZI] = smithyClient.expectString(output[_HZI]);
    }
    if (output[_DNSN] != null) {
        contents[_DNSN] = smithyClient.expectString(output[_DNSN]);
    }
    if (output[_ETH] != null) {
        contents[_ETH] = smithyClient.parseBoolean(output[_ETH]);
    }
    return contents;
};
const de_ChangeInfo = (output, context) => {
    const contents = {};
    if (output[_Id] != null) {
        contents[_Id] = smithyClient.expectString(output[_Id]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SA] != null) {
        contents[_SA] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_SA]));
    }
    if (output[_C] != null) {
        contents[_C] = smithyClient.expectString(output[_C]);
    }
    return contents;
};
const de_CheckerIpRanges = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ChildHealthCheckList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_CidrBlockSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CidrBlockSummary(entry);
    });
};
const de_CidrBlockSummary = (output, context) => {
    const contents = {};
    if (output[_CBid] != null) {
        contents[_CBid] = smithyClient.expectString(output[_CBid]);
    }
    if (output[_LN] != null) {
        contents[_LN] = smithyClient.expectString(output[_LN]);
    }
    return contents;
};
const de_CidrCollection = (output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_Id] != null) {
        contents[_Id] = smithyClient.expectString(output[_Id]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_Ve] != null) {
        contents[_Ve] = smithyClient.strictParseLong(output[_Ve]);
    }
    return contents;
};
const de_CidrRoutingConfig = (output, context) => {
    const contents = {};
    if (output[_CIo] != null) {
        contents[_CIo] = smithyClient.expectString(output[_CIo]);
    }
    if (output[_LN] != null) {
        contents[_LN] = smithyClient.expectString(output[_LN]);
    }
    return contents;
};
const de_CloudWatchAlarmConfiguration = (output, context) => {
    const contents = {};
    if (output[_EP] != null) {
        contents[_EP] = smithyClient.strictParseInt32(output[_EP]);
    }
    if (output[_Th] != null) {
        contents[_Th] = smithyClient.strictParseFloat(output[_Th]);
    }
    if (output[_CO] != null) {
        contents[_CO] = smithyClient.expectString(output[_CO]);
    }
    if (output[_Pe] != null) {
        contents[_Pe] = smithyClient.strictParseInt32(output[_Pe]);
    }
    if (output[_MN] != null) {
        contents[_MN] = smithyClient.expectString(output[_MN]);
    }
    if (output[_Nam] != null) {
        contents[_Nam] = smithyClient.expectString(output[_Nam]);
    }
    if (output[_St] != null) {
        contents[_St] = smithyClient.expectString(output[_St]);
    }
    if (String(output.Dimensions).trim() === "") {
        contents[_Dim] = [];
    }
    else if (output[_Dim] != null && output[_Dim][_Dime] != null) {
        contents[_Dim] = de_DimensionList(smithyClient.getArrayIfSingleItem(output[_Dim][_Dime]));
    }
    return contents;
};
const de_CollectionSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CollectionSummary(entry);
    });
};
const de_CollectionSummary = (output, context) => {
    const contents = {};
    if (output[_Ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_Ar]);
    }
    if (output[_Id] != null) {
        contents[_Id] = smithyClient.expectString(output[_Id]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_Ve] != null) {
        contents[_Ve] = smithyClient.strictParseLong(output[_Ve]);
    }
    return contents;
};
const de_Coordinates = (output, context) => {
    const contents = {};
    if (output[_La] != null) {
        contents[_La] = smithyClient.expectString(output[_La]);
    }
    if (output[_Lo] != null) {
        contents[_Lo] = smithyClient.expectString(output[_Lo]);
    }
    return contents;
};
const de_DelegationSet = (output, context) => {
    const contents = {};
    if (output[_Id] != null) {
        contents[_Id] = smithyClient.expectString(output[_Id]);
    }
    if (output[_CR] != null) {
        contents[_CR] = smithyClient.expectString(output[_CR]);
    }
    if (String(output.NameServers).trim() === "") {
        contents[_NS] = [];
    }
    else if (output[_NS] != null && output[_NS][_NSa] != null) {
        contents[_NS] = de_DelegationSetNameServers(smithyClient.getArrayIfSingleItem(output[_NS][_NSa]));
    }
    return contents;
};
const de_DelegationSetNameServers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_DelegationSets = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DelegationSet(entry);
    });
};
const de_Dimension = (output, context) => {
    const contents = {};
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_V] != null) {
        contents[_V] = smithyClient.expectString(output[_V]);
    }
    return contents;
};
const de_DimensionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Dimension(entry);
    });
};
const de_DNSSECStatus = (output, context) => {
    const contents = {};
    if (output[_SSe] != null) {
        contents[_SSe] = smithyClient.expectString(output[_SSe]);
    }
    if (output[_SM] != null) {
        contents[_SM] = smithyClient.expectString(output[_SM]);
    }
    return contents;
};
const de_ErrorMessages = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_GeoLocation = (output, context) => {
    const contents = {};
    if (output[_CC] != null) {
        contents[_CC] = smithyClient.expectString(output[_CC]);
    }
    if (output[_CCo] != null) {
        contents[_CCo] = smithyClient.expectString(output[_CCo]);
    }
    if (output[_SC] != null) {
        contents[_SC] = smithyClient.expectString(output[_SC]);
    }
    return contents;
};
const de_GeoLocationDetails = (output, context) => {
    const contents = {};
    if (output[_CC] != null) {
        contents[_CC] = smithyClient.expectString(output[_CC]);
    }
    if (output[_CNon] != null) {
        contents[_CNon] = smithyClient.expectString(output[_CNon]);
    }
    if (output[_CCo] != null) {
        contents[_CCo] = smithyClient.expectString(output[_CCo]);
    }
    if (output[_CNou] != null) {
        contents[_CNou] = smithyClient.expectString(output[_CNou]);
    }
    if (output[_SC] != null) {
        contents[_SC] = smithyClient.expectString(output[_SC]);
    }
    if (output[_SN] != null) {
        contents[_SN] = smithyClient.expectString(output[_SN]);
    }
    return contents;
};
const de_GeoLocationDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GeoLocationDetails(entry);
    });
};
const de_GeoProximityLocation = (output, context) => {
    const contents = {};
    if (output[_AWSR] != null) {
        contents[_AWSR] = smithyClient.expectString(output[_AWSR]);
    }
    if (output[_LZG] != null) {
        contents[_LZG] = smithyClient.expectString(output[_LZG]);
    }
    if (output[_Coo] != null) {
        contents[_Coo] = de_Coordinates(output[_Coo]);
    }
    if (output[_B] != null) {
        contents[_B] = smithyClient.strictParseInt32(output[_B]);
    }
    return contents;
};
const de_HealthCheck = (output, context) => {
    const contents = {};
    if (output[_Id] != null) {
        contents[_Id] = smithyClient.expectString(output[_Id]);
    }
    if (output[_CR] != null) {
        contents[_CR] = smithyClient.expectString(output[_CR]);
    }
    if (output[_LS] != null) {
        contents[_LS] = de_LinkedService(output[_LS]);
    }
    if (output[_HCC] != null) {
        contents[_HCC] = de_HealthCheckConfig(output[_HCC]);
    }
    if (output[_HCV] != null) {
        contents[_HCV] = smithyClient.strictParseLong(output[_HCV]);
    }
    if (output[_CWAC] != null) {
        contents[_CWAC] = de_CloudWatchAlarmConfiguration(output[_CWAC]);
    }
    return contents;
};
const de_HealthCheckConfig = (output, context) => {
    const contents = {};
    if (output[_IPA] != null) {
        contents[_IPA] = smithyClient.expectString(output[_IPA]);
    }
    if (output[_P] != null) {
        contents[_P] = smithyClient.strictParseInt32(output[_P]);
    }
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (output[_RP] != null) {
        contents[_RP] = smithyClient.expectString(output[_RP]);
    }
    if (output[_FQDN] != null) {
        contents[_FQDN] = smithyClient.expectString(output[_FQDN]);
    }
    if (output[_SS] != null) {
        contents[_SS] = smithyClient.expectString(output[_SS]);
    }
    if (output[_RIeq] != null) {
        contents[_RIeq] = smithyClient.strictParseInt32(output[_RIeq]);
    }
    if (output[_FT] != null) {
        contents[_FT] = smithyClient.strictParseInt32(output[_FT]);
    }
    if (output[_ML] != null) {
        contents[_ML] = smithyClient.parseBoolean(output[_ML]);
    }
    if (output[_I] != null) {
        contents[_I] = smithyClient.parseBoolean(output[_I]);
    }
    if (output[_Di] != null) {
        contents[_Di] = smithyClient.parseBoolean(output[_Di]);
    }
    if (output[_HT] != null) {
        contents[_HT] = smithyClient.strictParseInt32(output[_HT]);
    }
    if (String(output.ChildHealthChecks).trim() === "") {
        contents[_CHC] = [];
    }
    else if (output[_CHC] != null && output[_CHC][_CHCh] != null) {
        contents[_CHC] = de_ChildHealthCheckList(smithyClient.getArrayIfSingleItem(output[_CHC][_CHCh]));
    }
    if (output[_ESNI] != null) {
        contents[_ESNI] = smithyClient.parseBoolean(output[_ESNI]);
    }
    if (String(output.Regions).trim() === "") {
        contents[_R] = [];
    }
    else if (output[_R] != null && output[_R][_Re] != null) {
        contents[_R] = de_HealthCheckRegionList(smithyClient.getArrayIfSingleItem(output[_R][_Re]));
    }
    if (output[_AI] != null) {
        contents[_AI] = de_AlarmIdentifier(output[_AI]);
    }
    if (output[_IDHS] != null) {
        contents[_IDHS] = smithyClient.expectString(output[_IDHS]);
    }
    if (output[_RCA] != null) {
        contents[_RCA] = smithyClient.expectString(output[_RCA]);
    }
    return contents;
};
const de_HealthCheckObservation = (output, context) => {
    const contents = {};
    if (output[_Re] != null) {
        contents[_Re] = smithyClient.expectString(output[_Re]);
    }
    if (output[_IPA] != null) {
        contents[_IPA] = smithyClient.expectString(output[_IPA]);
    }
    if (output[_SR] != null) {
        contents[_SR] = de_StatusReport(output[_SR]);
    }
    return contents;
};
const de_HealthCheckObservations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HealthCheckObservation(entry);
    });
};
const de_HealthCheckRegionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_HealthChecks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HealthCheck(entry);
    });
};
const de_HostedZone = (output, context) => {
    const contents = {};
    if (output[_Id] != null) {
        contents[_Id] = smithyClient.expectString(output[_Id]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_CR] != null) {
        contents[_CR] = smithyClient.expectString(output[_CR]);
    }
    if (output[_Con] != null) {
        contents[_Con] = de_HostedZoneConfig(output[_Con]);
    }
    if (output[_RRSC] != null) {
        contents[_RRSC] = smithyClient.strictParseLong(output[_RRSC]);
    }
    if (output[_LS] != null) {
        contents[_LS] = de_LinkedService(output[_LS]);
    }
    return contents;
};
const de_HostedZoneConfig = (output, context) => {
    const contents = {};
    if (output[_C] != null) {
        contents[_C] = smithyClient.expectString(output[_C]);
    }
    if (output[_PZ] != null) {
        contents[_PZ] = smithyClient.parseBoolean(output[_PZ]);
    }
    return contents;
};
const de_HostedZoneLimit = (output, context) => {
    const contents = {};
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (output[_V] != null) {
        contents[_V] = smithyClient.strictParseLong(output[_V]);
    }
    return contents;
};
const de_HostedZoneOwner = (output, context) => {
    const contents = {};
    if (output[_OA] != null) {
        contents[_OA] = smithyClient.expectString(output[_OA]);
    }
    if (output[_OS] != null) {
        contents[_OS] = smithyClient.expectString(output[_OS]);
    }
    return contents;
};
const de_HostedZones = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HostedZone(entry);
    });
};
const de_HostedZoneSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HostedZoneSummary(entry);
    });
};
const de_HostedZoneSummary = (output, context) => {
    const contents = {};
    if (output[_HZI] != null) {
        contents[_HZI] = smithyClient.expectString(output[_HZI]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_O] != null) {
        contents[_O] = de_HostedZoneOwner(output[_O]);
    }
    return contents;
};
const de_KeySigningKey = (output, context) => {
    const contents = {};
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_KA] != null) {
        contents[_KA] = smithyClient.expectString(output[_KA]);
    }
    if (output[_Fl] != null) {
        contents[_Fl] = smithyClient.strictParseInt32(output[_Fl]);
    }
    if (output[_SAM] != null) {
        contents[_SAM] = smithyClient.expectString(output[_SAM]);
    }
    if (output[_SAT] != null) {
        contents[_SAT] = smithyClient.strictParseInt32(output[_SAT]);
    }
    if (output[_DAM] != null) {
        contents[_DAM] = smithyClient.expectString(output[_DAM]);
    }
    if (output[_DAT] != null) {
        contents[_DAT] = smithyClient.strictParseInt32(output[_DAT]);
    }
    if (output[_KT] != null) {
        contents[_KT] = smithyClient.strictParseInt32(output[_KT]);
    }
    if (output[_DV] != null) {
        contents[_DV] = smithyClient.expectString(output[_DV]);
    }
    if (output[_PK] != null) {
        contents[_PK] = smithyClient.expectString(output[_PK]);
    }
    if (output[_DSR] != null) {
        contents[_DSR] = smithyClient.expectString(output[_DSR]);
    }
    if (output[_DNSKEYR] != null) {
        contents[_DNSKEYR] = smithyClient.expectString(output[_DNSKEYR]);
    }
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_SM] != null) {
        contents[_SM] = smithyClient.expectString(output[_SM]);
    }
    if (output[_CD] != null) {
        contents[_CD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CD]));
    }
    if (output[_LMD] != null) {
        contents[_LMD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_LMD]));
    }
    return contents;
};
const de_KeySigningKeys = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KeySigningKey(entry);
    });
};
const de_LinkedService = (output, context) => {
    const contents = {};
    if (output[_SP] != null) {
        contents[_SP] = smithyClient.expectString(output[_SP]);
    }
    if (output[_De] != null) {
        contents[_De] = smithyClient.expectString(output[_De]);
    }
    return contents;
};
const de_LocationSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocationSummary(entry);
    });
};
const de_LocationSummary = (output, context) => {
    const contents = {};
    if (output[_LN] != null) {
        contents[_LN] = smithyClient.expectString(output[_LN]);
    }
    return contents;
};
const de_QueryLoggingConfig = (output, context) => {
    const contents = {};
    if (output[_Id] != null) {
        contents[_Id] = smithyClient.expectString(output[_Id]);
    }
    if (output[_HZI] != null) {
        contents[_HZI] = smithyClient.expectString(output[_HZI]);
    }
    if (output[_CWLLGA] != null) {
        contents[_CWLLGA] = smithyClient.expectString(output[_CWLLGA]);
    }
    return contents;
};
const de_QueryLoggingConfigs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QueryLoggingConfig(entry);
    });
};
const de_RecordData = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ResourceRecord = (output, context) => {
    const contents = {};
    if (output[_V] != null) {
        contents[_V] = smithyClient.expectString(output[_V]);
    }
    return contents;
};
const de_ResourceRecords = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceRecord(entry);
    });
};
const de_ResourceRecordSet = (output, context) => {
    const contents = {};
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (output[_SI] != null) {
        contents[_SI] = smithyClient.expectString(output[_SI]);
    }
    if (output[_W] != null) {
        contents[_W] = smithyClient.strictParseLong(output[_W]);
    }
    if (output[_Re] != null) {
        contents[_Re] = smithyClient.expectString(output[_Re]);
    }
    if (output[_GL] != null) {
        contents[_GL] = de_GeoLocation(output[_GL]);
    }
    if (output[_F] != null) {
        contents[_F] = smithyClient.expectString(output[_F]);
    }
    if (output[_MVA] != null) {
        contents[_MVA] = smithyClient.parseBoolean(output[_MVA]);
    }
    if (output[_TTL] != null) {
        contents[_TTL] = smithyClient.strictParseLong(output[_TTL]);
    }
    if (String(output.ResourceRecords).trim() === "") {
        contents[_RRe] = [];
    }
    else if (output[_RRe] != null && output[_RRe][_RR] != null) {
        contents[_RRe] = de_ResourceRecords(smithyClient.getArrayIfSingleItem(output[_RRe][_RR]));
    }
    if (output[_ATl] != null) {
        contents[_ATl] = de_AliasTarget(output[_ATl]);
    }
    if (output[_HCI] != null) {
        contents[_HCI] = smithyClient.expectString(output[_HCI]);
    }
    if (output[_TPII] != null) {
        contents[_TPII] = smithyClient.expectString(output[_TPII]);
    }
    if (output[_CRC] != null) {
        contents[_CRC] = de_CidrRoutingConfig(output[_CRC]);
    }
    if (output[_GPL] != null) {
        contents[_GPL] = de_GeoProximityLocation(output[_GPL]);
    }
    return contents;
};
const de_ResourceRecordSets = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceRecordSet(entry);
    });
};
const de_ResourceTagSet = (output, context) => {
    const contents = {};
    if (output[_RTe] != null) {
        contents[_RTe] = smithyClient.expectString(output[_RTe]);
    }
    if (output[_RI] != null) {
        contents[_RI] = smithyClient.expectString(output[_RI]);
    }
    if (String(output.Tags).trim() === "") {
        contents[_Tag] = [];
    }
    else if (output[_Tag] != null && output[_Tag][_Ta] != null) {
        contents[_Tag] = de_TagList(smithyClient.getArrayIfSingleItem(output[_Tag][_Ta]));
    }
    return contents;
};
const de_ResourceTagSetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceTagSet(entry);
    });
};
const de_ReusableDelegationSetLimit = (output, context) => {
    const contents = {};
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (output[_V] != null) {
        contents[_V] = smithyClient.strictParseLong(output[_V]);
    }
    return contents;
};
const de_StatusReport = (output, context) => {
    const contents = {};
    if (output[_S] != null) {
        contents[_S] = smithyClient.expectString(output[_S]);
    }
    if (output[_CT] != null) {
        contents[_CT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_CT]));
    }
    return contents;
};
const de_Tag = (output, context) => {
    const contents = {};
    if (output[_K] != null) {
        contents[_K] = smithyClient.expectString(output[_K]);
    }
    if (output[_V] != null) {
        contents[_V] = smithyClient.expectString(output[_V]);
    }
    return contents;
};
const de_TagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry);
    });
};
const de_TrafficPolicies = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficPolicy(entry);
    });
};
const de_TrafficPolicy = (output, context) => {
    const contents = {};
    if (output[_Id] != null) {
        contents[_Id] = smithyClient.expectString(output[_Id]);
    }
    if (output[_Ve] != null) {
        contents[_Ve] = smithyClient.strictParseInt32(output[_Ve]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (output[_D] != null) {
        contents[_D] = smithyClient.expectString(output[_D]);
    }
    if (output[_C] != null) {
        contents[_C] = smithyClient.expectString(output[_C]);
    }
    return contents;
};
const de_TrafficPolicyInstance = (output, context) => {
    const contents = {};
    if (output[_Id] != null) {
        contents[_Id] = smithyClient.expectString(output[_Id]);
    }
    if (output[_HZI] != null) {
        contents[_HZI] = smithyClient.expectString(output[_HZI]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_TTL] != null) {
        contents[_TTL] = smithyClient.strictParseLong(output[_TTL]);
    }
    if (output[_Sta] != null) {
        contents[_Sta] = smithyClient.expectString(output[_Sta]);
    }
    if (output[_Me] != null) {
        contents[_Me] = smithyClient.expectString(output[_Me]);
    }
    if (output[_TPI] != null) {
        contents[_TPI] = smithyClient.expectString(output[_TPI]);
    }
    if (output[_TPV] != null) {
        contents[_TPV] = smithyClient.strictParseInt32(output[_TPV]);
    }
    if (output[_TPT] != null) {
        contents[_TPT] = smithyClient.expectString(output[_TPT]);
    }
    return contents;
};
const de_TrafficPolicyInstances = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficPolicyInstance(entry);
    });
};
const de_TrafficPolicySummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficPolicySummary(entry);
    });
};
const de_TrafficPolicySummary = (output, context) => {
    const contents = {};
    if (output[_Id] != null) {
        contents[_Id] = smithyClient.expectString(output[_Id]);
    }
    if (output[_N] != null) {
        contents[_N] = smithyClient.expectString(output[_N]);
    }
    if (output[_T] != null) {
        contents[_T] = smithyClient.expectString(output[_T]);
    }
    if (output[_LV] != null) {
        contents[_LV] = smithyClient.strictParseInt32(output[_LV]);
    }
    if (output[_TPCr] != null) {
        contents[_TPCr] = smithyClient.strictParseInt32(output[_TPCr]);
    }
    return contents;
};
const de_VPC = (output, context) => {
    const contents = {};
    if (output[_VPCR] != null) {
        contents[_VPCR] = smithyClient.expectString(output[_VPCR]);
    }
    if (output[_VPCI] != null) {
        contents[_VPCI] = smithyClient.expectString(output[_VPCI]);
    }
    return contents;
};
const de_VPCs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VPC(entry);
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const _A = "Action";
const _AHE = "AliasHealthEnabled";
const _AI = "AlarmIdentifier";
const _AN = "AlarmName";
const _AT = "AddTags";
const _ATl = "AliasTarget";
const _AVPCC = "AssociateVPCComment";
const _AVPCWHZR = "AssociateVPCWithHostedZoneRequest";
const _AWSR = "AWSRegion";
const _Ar = "Arn";
const _B = "Bias";
const _C = "Comment";
const _CA = "ChangeAction";
const _CB = "ChangeBatch";
const _CBi = "CidrBlocks";
const _CBid = "CidrBlock";
const _CC = "ContinentCode";
const _CCC = "CidrCollectionChange";
const _CCCA = "CidrCollectionChangeAction";
const _CCCR = "ChangeCidrCollectionRequest";
const _CCCRr = "CreateCidrCollectionRequest";
const _CCi = "CidrCollections";
const _CCo = "CountryCode";
const _CD = "CreatedDate";
const _CHC = "ChildHealthChecks";
const _CHCR = "CreateHealthCheckRequest";
const _CHCh = "ChildHealthCheck";
const _CHZR = "CreateHostedZoneRequest";
const _CI = "ChangeInfo";
const _CIR = "CheckerIpRanges";
const _CIo = "CollectionId";
const _CKSKR = "CreateKeySigningKeyRequest";
const _CL = "CidrLocations";
const _CLNDA = "CidrLocationNameDefaultAllowed";
const _CLNDNA = "CidrLocationNameDefaultNotAllowed";
const _CLi = "CidrList";
const _CN = "CidrNonce";
const _CNo = "CollectionName";
const _CNon = "ContinentName";
const _CNou = "CountryName";
const _CO = "ComparisonOperator";
const _CQLCR = "CreateQueryLoggingConfigRequest";
const _CR = "CallerReference";
const _CRC = "CidrRoutingConfig";
const _CRDSR = "CreateReusableDelegationSetRequest";
const _CRRSR = "ChangeResourceRecordSetsRequest";
const _CT = "CheckedTime";
const _CTFRR = "ChangeTagsForResourceRequest";
const _CTPIR = "CreateTrafficPolicyInstanceRequest";
const _CTPR = "CreateTrafficPolicyRequest";
const _CTPVR = "CreateTrafficPolicyVersionRequest";
const _CV = "CollectionVersion";
const _CVPCAAR = "CreateVPCAssociationAuthorizationRequest";
const _CWAC = "CloudWatchAlarmConfiguration";
const _CWLLGA = "CloudWatchLogsLogGroupArn";
const _CWR = "CloudWatchRegion";
const _Ch = "Changes";
const _Cha = "Change";
const _Ci = "Cidr";
const _Co = "Collection";
const _Con = "Config";
const _Coo = "Coordinates";
const _Cou = "Count";
const _D = "Document";
const _DAM = "DigestAlgorithmMnemonic";
const _DAT = "DigestAlgorithmType";
const _DNSKEYR = "DNSKEYRecord";
const _DNSN = "DNSName";
const _DS = "DelegationSet";
const _DSI = "DelegationSetId";
const _DSR = "DSRecord";
const _DSe = "DelegationSets";
const _DV = "DigestValue";
const _DVPCAAR = "DeleteVPCAssociationAuthorizationRequest";
const _DVPCC = "DisassociateVPCComment";
const _DVPCFHZR = "DisassociateVPCFromHostedZoneRequest";
const _De = "Description";
const _Di = "Disabled";
const _Dim = "Dimensions";
const _Dime = "Dimension";
const _EDNSCSIP = "EDNS0ClientSubnetIP";
const _EDNSCSM = "EDNS0ClientSubnetMask";
const _EP = "EvaluationPeriods";
const _ESNI = "EnableSNI";
const _ETH = "EvaluateTargetHealth";
const _F = "Failover";
const _FQDN = "FullyQualifiedDomainName";
const _FT = "FailureThreshold";
const _Fl = "Flag";
const _GL = "GeoLocation";
const _GLCC = "GeoLocationContinentCode";
const _GLCCe = "GeoLocationCountryCode";
const _GLD = "GeoLocationDetails";
const _GLDL = "GeoLocationDetailsList";
const _GLSC = "GeoLocationSubdivisionCode";
const _GPL = "GeoProximityLocation";
const _HC = "HealthCheck";
const _HCC = "HealthCheckConfig";
const _HCCe = "HealthCheckCount";
const _HCI = "HealthCheckId";
const _HCN = "HealthCheckNonce";
const _HCO = "HealthCheckObservations";
const _HCOe = "HealthCheckObservation";
const _HCR = "HealthCheckRegion";
const _HCT = "HealthCheckType";
const _HCV = "HealthCheckVersion";
const _HCe = "HealthChecks";
const _HT = "HealthThreshold";
const _HZ = "HostedZone";
const _HZC = "HostedZoneConfig";
const _HZCo = "HostedZoneCount";
const _HZI = "HostedZoneId";
const _HZIM = "HostedZoneIdMarker";
const _HZS = "HostedZoneSummaries";
const _HZSo = "HostedZoneSummary";
const _HZT = "HostedZoneType";
const _HZo = "HostedZones";
const _I = "Inverted";
const _IDHS = "InsufficientDataHealthStatus";
const _IPA = "IPAddress";
const _IPZ = "IsPrivateZone";
const _IT = "IsTruncated";
const _Id = "Id";
const _K = "Key";
const _KA = "KmsArn";
const _KMSA = "KeyManagementServiceArn";
const _KSK = "KeySigningKey";
const _KSKe = "KeySigningKeys";
const _KT = "KeyTag";
const _L = "Location";
const _LMD = "LastModifiedDate";
const _LN = "LocationName";
const _LS = "LinkedService";
const _LTFRR = "ListTagsForResourcesRequest";
const _LV = "LatestVersion";
const _LZG = "LocalZoneGroup";
const _La = "Latitude";
const _Li = "Limit";
const _Lo = "Longitude";
const _M = "Marker";
const _MI = "MaxItems";
const _ML = "MeasureLatency";
const _MN = "MetricName";
const _MR = "MaxResults";
const _MVA = "MultiValueAnswer";
const _Me = "Message";
const _N = "Name";
const _NCC = "NextContinentCode";
const _NCCe = "NextCountryCode";
const _NDNSN = "NextDNSName";
const _NHZI = "NextHostedZoneId";
const _NM = "NextMarker";
const _NRI = "NextRecordIdentifier";
const _NRN = "NextRecordName";
const _NRT = "NextRecordType";
const _NS = "NameServers";
const _NSC = "NextSubdivisionCode";
const _NSa = "NameServer";
const _NT = "NextToken";
const _Na = "Nameserver";
const _Nam = "Namespace";
const _No = "Nonce";
const _O = "Owner";
const _OA = "OwningAccount";
const _OS = "OwningService";
const _P = "Port";
const _PK = "PublicKey";
const _PZ = "PrivateZone";
const _Pe = "Period";
const _Pr = "Protocol";
const _QLC = "QueryLoggingConfig";
const _QLCu = "QueryLoggingConfigs";
const _R = "Regions";
const _RC = "ResponseCode";
const _RCA = "RoutingControlArn";
const _RD = "ResourceDescription";
const _RDE = "RecordDataEntry";
const _RDa = "RData";
const _RDe = "RecordData";
const _RE = "ResetElements";
const _REN = "ResettableElementName";
const _RI = "ResourceId";
const _RIP = "ResolverIP";
const _RIe = "ResourceIds";
const _RIeq = "RequestInterval";
const _RN = "RecordName";
const _RP = "ResourcePath";
const _RR = "ResourceRecord";
const _RRS = "ResourceRecordSets";
const _RRSC = "ResourceRecordSetCount";
const _RRSF = "ResourceRecordSetFailover";
const _RRSI = "ResourceRecordSetIdentifier";
const _RRSMVA = "ResourceRecordSetMultiValueAnswer";
const _RRSR = "ResourceRecordSetRegion";
const _RRSW = "ResourceRecordSetWeight";
const _RRSe = "ResourceRecordSet";
const _RRT = "RRType";
const _RRe = "ResourceRecords";
const _RT = "RecordType";
const _RTK = "RemoveTagKeys";
const _RTS = "ResourceTagSet";
const _RTSe = "ResourceTagSets";
const _RTe = "ResourceType";
const _Re = "Region";
const _S = "Status";
const _SA = "SubmittedAt";
const _SAM = "SigningAlgorithmMnemonic";
const _SAT = "SigningAlgorithmType";
const _SC = "SubdivisionCode";
const _SCC = "StartContinentCode";
const _SCCt = "StartCountryCode";
const _SI = "SetIdentifier";
const _SKN = "SigningKeyName";
const _SKS = "SigningKeyString";
const _SKSi = "SigningKeyStatus";
const _SM = "StatusMessage";
const _SN = "SubdivisionName";
const _SP = "ServicePrincipal";
const _SR = "StatusReport";
const _SRI = "StartRecordIdentifier";
const _SRN = "StartRecordName";
const _SRT = "StartRecordType";
const _SS = "SearchString";
const _SSC = "StartSubdivisionCode";
const _SSe = "ServeSignature";
const _St = "Statistic";
const _Sta = "State";
const _T = "Type";
const _TK = "TagKey";
const _TP = "TrafficPolicy";
const _TPC = "TrafficPolicyComment";
const _TPCr = "TrafficPolicyCount";
const _TPD = "TrafficPolicyDocument";
const _TPI = "TrafficPolicyId";
const _TPIC = "TrafficPolicyInstanceCount";
const _TPII = "TrafficPolicyInstanceId";
const _TPIM = "TrafficPolicyIdMarker";
const _TPINM = "TrafficPolicyInstanceNameMarker";
const _TPITM = "TrafficPolicyInstanceTypeMarker";
const _TPIr = "TrafficPolicyInstance";
const _TPIra = "TrafficPolicyInstances";
const _TPN = "TrafficPolicyName";
const _TPS = "TrafficPolicySummaries";
const _TPSr = "TrafficPolicySummary";
const _TPT = "TrafficPolicyType";
const _TPV = "TrafficPolicyVersion";
const _TPVM = "TrafficPolicyVersionMarker";
const _TPr = "TrafficPolicies";
const _TRI = "TagResourceId";
const _TTL = "TTL";
const _TV = "TagValue";
const _Ta = "Tag";
const _Tag = "Tags";
const _Th = "Threshold";
const _UHCR = "UpdateHealthCheckRequest";
const _UHZCR = "UpdateHostedZoneCommentRequest";
const _UTPCR = "UpdateTrafficPolicyCommentRequest";
const _UTPIR = "UpdateTrafficPolicyInstanceRequest";
const _UUID = "UUID";
const _V = "Value";
const _VPC = "VPC";
const _VPCI = "VPCId";
const _VPCR = "VPCRegion";
const _VPCs = "VPCs";
const _Ve = "Version";
const _W = "Weight";
const _c = "continentcode";
const _co = "countrycode";
const _d = "delegationsetid";
const _dn = "dnsname";
const _e = "edns0clientsubnetip";
const _ed = "edns0clientsubnetmask";
const _h = "hostedzonetype";
const _ho = "hostedzoneid";
const _i = "identifier";
const _id = "id";
const _l = "location";
const _m = "maxresults";
const _ma = "maxitems";
const _mar = "marker";
const _me = "member";
const _mes = "message";
const _mess = "messages";
const _n = "nexttoken";
const _na = "name";
const _r = "recordname";
const _re = "recordtype";
const _res = "resolverip";
const _s = "subdivisioncode";
const _st = "startcontinentcode";
const _sta = "startcountrycode";
const _star = "startsubdivisioncode";
const _t = "type";
const _tr = "trafficpolicyid";
const _tra = "trafficpolicyinstancename";
const _traf = "trafficpolicyinstancetype";
const _traff = "trafficpolicyversion";
const _v = "vpcid";
const _ve = '<?xml version="1.0" encoding="UTF-8"?>';
const _ver = "version";
const _vp = "vpcregion";

class ActivateKeySigningKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "ActivateKeySigningKey", {})
    .n("Route53Client", "ActivateKeySigningKeyCommand")
    .f(void 0, void 0)
    .ser(se_ActivateKeySigningKeyCommand)
    .de(de_ActivateKeySigningKeyCommand)
    .build() {
}

class AssociateVPCWithHostedZoneCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "AssociateVPCWithHostedZone", {})
    .n("Route53Client", "AssociateVPCWithHostedZoneCommand")
    .f(void 0, void 0)
    .ser(se_AssociateVPCWithHostedZoneCommand)
    .de(de_AssociateVPCWithHostedZoneCommand)
    .build() {
}

class ChangeCidrCollectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "ChangeCidrCollection", {})
    .n("Route53Client", "ChangeCidrCollectionCommand")
    .f(void 0, void 0)
    .ser(se_ChangeCidrCollectionCommand)
    .de(de_ChangeCidrCollectionCommand)
    .build() {
}

class ChangeResourceRecordSetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getChangeResourceRecordSetsPlugin(config),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "ChangeResourceRecordSets", {})
    .n("Route53Client", "ChangeResourceRecordSetsCommand")
    .f(void 0, void 0)
    .ser(se_ChangeResourceRecordSetsCommand)
    .de(de_ChangeResourceRecordSetsCommand)
    .build() {
}

class ChangeTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ChangeTagsForResource", {})
    .n("Route53Client", "ChangeTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ChangeTagsForResourceCommand)
    .de(de_ChangeTagsForResourceCommand)
    .build() {
}

class CreateCidrCollectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "CreateCidrCollection", {})
    .n("Route53Client", "CreateCidrCollectionCommand")
    .f(void 0, void 0)
    .ser(se_CreateCidrCollectionCommand)
    .de(de_CreateCidrCollectionCommand)
    .build() {
}

class CreateHealthCheckCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "CreateHealthCheck", {})
    .n("Route53Client", "CreateHealthCheckCommand")
    .f(void 0, void 0)
    .ser(se_CreateHealthCheckCommand)
    .de(de_CreateHealthCheckCommand)
    .build() {
}

class CreateHostedZoneCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "CreateHostedZone", {})
    .n("Route53Client", "CreateHostedZoneCommand")
    .f(void 0, void 0)
    .ser(se_CreateHostedZoneCommand)
    .de(de_CreateHostedZoneCommand)
    .build() {
}

class CreateKeySigningKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "CreateKeySigningKey", {})
    .n("Route53Client", "CreateKeySigningKeyCommand")
    .f(void 0, void 0)
    .ser(se_CreateKeySigningKeyCommand)
    .de(de_CreateKeySigningKeyCommand)
    .build() {
}

class CreateQueryLoggingConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "CreateQueryLoggingConfig", {})
    .n("Route53Client", "CreateQueryLoggingConfigCommand")
    .f(void 0, void 0)
    .ser(se_CreateQueryLoggingConfigCommand)
    .de(de_CreateQueryLoggingConfigCommand)
    .build() {
}

class CreateReusableDelegationSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "CreateReusableDelegationSet", {})
    .n("Route53Client", "CreateReusableDelegationSetCommand")
    .f(void 0, void 0)
    .ser(se_CreateReusableDelegationSetCommand)
    .de(de_CreateReusableDelegationSetCommand)
    .build() {
}

class CreateTrafficPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "CreateTrafficPolicy", {})
    .n("Route53Client", "CreateTrafficPolicyCommand")
    .f(void 0, void 0)
    .ser(se_CreateTrafficPolicyCommand)
    .de(de_CreateTrafficPolicyCommand)
    .build() {
}

class CreateTrafficPolicyInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "CreateTrafficPolicyInstance", {})
    .n("Route53Client", "CreateTrafficPolicyInstanceCommand")
    .f(void 0, void 0)
    .ser(se_CreateTrafficPolicyInstanceCommand)
    .de(de_CreateTrafficPolicyInstanceCommand)
    .build() {
}

class CreateTrafficPolicyVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "CreateTrafficPolicyVersion", {})
    .n("Route53Client", "CreateTrafficPolicyVersionCommand")
    .f(void 0, void 0)
    .ser(se_CreateTrafficPolicyVersionCommand)
    .de(de_CreateTrafficPolicyVersionCommand)
    .build() {
}

class CreateVPCAssociationAuthorizationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "CreateVPCAssociationAuthorization", {})
    .n("Route53Client", "CreateVPCAssociationAuthorizationCommand")
    .f(void 0, void 0)
    .ser(se_CreateVPCAssociationAuthorizationCommand)
    .de(de_CreateVPCAssociationAuthorizationCommand)
    .build() {
}

class DeactivateKeySigningKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "DeactivateKeySigningKey", {})
    .n("Route53Client", "DeactivateKeySigningKeyCommand")
    .f(void 0, void 0)
    .ser(se_DeactivateKeySigningKeyCommand)
    .de(de_DeactivateKeySigningKeyCommand)
    .build() {
}

class DeleteCidrCollectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "DeleteCidrCollection", {})
    .n("Route53Client", "DeleteCidrCollectionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteCidrCollectionCommand)
    .de(de_DeleteCidrCollectionCommand)
    .build() {
}

class DeleteHealthCheckCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "DeleteHealthCheck", {})
    .n("Route53Client", "DeleteHealthCheckCommand")
    .f(void 0, void 0)
    .ser(se_DeleteHealthCheckCommand)
    .de(de_DeleteHealthCheckCommand)
    .build() {
}

class DeleteHostedZoneCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "DeleteHostedZone", {})
    .n("Route53Client", "DeleteHostedZoneCommand")
    .f(void 0, void 0)
    .ser(se_DeleteHostedZoneCommand)
    .de(de_DeleteHostedZoneCommand)
    .build() {
}

class DeleteKeySigningKeyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "DeleteKeySigningKey", {})
    .n("Route53Client", "DeleteKeySigningKeyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteKeySigningKeyCommand)
    .de(de_DeleteKeySigningKeyCommand)
    .build() {
}

class DeleteQueryLoggingConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "DeleteQueryLoggingConfig", {})
    .n("Route53Client", "DeleteQueryLoggingConfigCommand")
    .f(void 0, void 0)
    .ser(se_DeleteQueryLoggingConfigCommand)
    .de(de_DeleteQueryLoggingConfigCommand)
    .build() {
}

class DeleteReusableDelegationSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "DeleteReusableDelegationSet", {})
    .n("Route53Client", "DeleteReusableDelegationSetCommand")
    .f(void 0, void 0)
    .ser(se_DeleteReusableDelegationSetCommand)
    .de(de_DeleteReusableDelegationSetCommand)
    .build() {
}

class DeleteTrafficPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "DeleteTrafficPolicy", {})
    .n("Route53Client", "DeleteTrafficPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTrafficPolicyCommand)
    .de(de_DeleteTrafficPolicyCommand)
    .build() {
}

class DeleteTrafficPolicyInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "DeleteTrafficPolicyInstance", {})
    .n("Route53Client", "DeleteTrafficPolicyInstanceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTrafficPolicyInstanceCommand)
    .de(de_DeleteTrafficPolicyInstanceCommand)
    .build() {
}

class DeleteVPCAssociationAuthorizationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "DeleteVPCAssociationAuthorization", {})
    .n("Route53Client", "DeleteVPCAssociationAuthorizationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVPCAssociationAuthorizationCommand)
    .de(de_DeleteVPCAssociationAuthorizationCommand)
    .build() {
}

class DisableHostedZoneDNSSECCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "DisableHostedZoneDNSSEC", {})
    .n("Route53Client", "DisableHostedZoneDNSSECCommand")
    .f(void 0, void 0)
    .ser(se_DisableHostedZoneDNSSECCommand)
    .de(de_DisableHostedZoneDNSSECCommand)
    .build() {
}

class DisassociateVPCFromHostedZoneCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "DisassociateVPCFromHostedZone", {})
    .n("Route53Client", "DisassociateVPCFromHostedZoneCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateVPCFromHostedZoneCommand)
    .de(de_DisassociateVPCFromHostedZoneCommand)
    .build() {
}

class EnableHostedZoneDNSSECCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "EnableHostedZoneDNSSEC", {})
    .n("Route53Client", "EnableHostedZoneDNSSECCommand")
    .f(void 0, void 0)
    .ser(se_EnableHostedZoneDNSSECCommand)
    .de(de_EnableHostedZoneDNSSECCommand)
    .build() {
}

class GetAccountLimitCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "GetAccountLimit", {})
    .n("Route53Client", "GetAccountLimitCommand")
    .f(void 0, void 0)
    .ser(se_GetAccountLimitCommand)
    .de(de_GetAccountLimitCommand)
    .build() {
}

class GetChangeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "GetChange", {})
    .n("Route53Client", "GetChangeCommand")
    .f(void 0, void 0)
    .ser(se_GetChangeCommand)
    .de(de_GetChangeCommand)
    .build() {
}

class GetCheckerIpRangesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "GetCheckerIpRanges", {})
    .n("Route53Client", "GetCheckerIpRangesCommand")
    .f(void 0, void 0)
    .ser(se_GetCheckerIpRangesCommand)
    .de(de_GetCheckerIpRangesCommand)
    .build() {
}

class GetDNSSECCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "GetDNSSEC", {})
    .n("Route53Client", "GetDNSSECCommand")
    .f(void 0, void 0)
    .ser(se_GetDNSSECCommand)
    .de(de_GetDNSSECCommand)
    .build() {
}

class GetGeoLocationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "GetGeoLocation", {})
    .n("Route53Client", "GetGeoLocationCommand")
    .f(void 0, void 0)
    .ser(se_GetGeoLocationCommand)
    .de(de_GetGeoLocationCommand)
    .build() {
}

class GetHealthCheckCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "GetHealthCheck", {})
    .n("Route53Client", "GetHealthCheckCommand")
    .f(void 0, void 0)
    .ser(se_GetHealthCheckCommand)
    .de(de_GetHealthCheckCommand)
    .build() {
}

class GetHealthCheckCountCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "GetHealthCheckCount", {})
    .n("Route53Client", "GetHealthCheckCountCommand")
    .f(void 0, void 0)
    .ser(se_GetHealthCheckCountCommand)
    .de(de_GetHealthCheckCountCommand)
    .build() {
}

class GetHealthCheckLastFailureReasonCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "GetHealthCheckLastFailureReason", {})
    .n("Route53Client", "GetHealthCheckLastFailureReasonCommand")
    .f(void 0, void 0)
    .ser(se_GetHealthCheckLastFailureReasonCommand)
    .de(de_GetHealthCheckLastFailureReasonCommand)
    .build() {
}

class GetHealthCheckStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "GetHealthCheckStatus", {})
    .n("Route53Client", "GetHealthCheckStatusCommand")
    .f(void 0, void 0)
    .ser(se_GetHealthCheckStatusCommand)
    .de(de_GetHealthCheckStatusCommand)
    .build() {
}

class GetHostedZoneCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "GetHostedZone", {})
    .n("Route53Client", "GetHostedZoneCommand")
    .f(void 0, void 0)
    .ser(se_GetHostedZoneCommand)
    .de(de_GetHostedZoneCommand)
    .build() {
}

class GetHostedZoneCountCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "GetHostedZoneCount", {})
    .n("Route53Client", "GetHostedZoneCountCommand")
    .f(void 0, void 0)
    .ser(se_GetHostedZoneCountCommand)
    .de(de_GetHostedZoneCountCommand)
    .build() {
}

class GetHostedZoneLimitCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "GetHostedZoneLimit", {})
    .n("Route53Client", "GetHostedZoneLimitCommand")
    .f(void 0, void 0)
    .ser(se_GetHostedZoneLimitCommand)
    .de(de_GetHostedZoneLimitCommand)
    .build() {
}

class GetQueryLoggingConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "GetQueryLoggingConfig", {})
    .n("Route53Client", "GetQueryLoggingConfigCommand")
    .f(void 0, void 0)
    .ser(se_GetQueryLoggingConfigCommand)
    .de(de_GetQueryLoggingConfigCommand)
    .build() {
}

class GetReusableDelegationSetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "GetReusableDelegationSet", {})
    .n("Route53Client", "GetReusableDelegationSetCommand")
    .f(void 0, void 0)
    .ser(se_GetReusableDelegationSetCommand)
    .de(de_GetReusableDelegationSetCommand)
    .build() {
}

class GetReusableDelegationSetLimitCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "GetReusableDelegationSetLimit", {})
    .n("Route53Client", "GetReusableDelegationSetLimitCommand")
    .f(void 0, void 0)
    .ser(se_GetReusableDelegationSetLimitCommand)
    .de(de_GetReusableDelegationSetLimitCommand)
    .build() {
}

class GetTrafficPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "GetTrafficPolicy", {})
    .n("Route53Client", "GetTrafficPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetTrafficPolicyCommand)
    .de(de_GetTrafficPolicyCommand)
    .build() {
}

class GetTrafficPolicyInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "GetTrafficPolicyInstance", {})
    .n("Route53Client", "GetTrafficPolicyInstanceCommand")
    .f(void 0, void 0)
    .ser(se_GetTrafficPolicyInstanceCommand)
    .de(de_GetTrafficPolicyInstanceCommand)
    .build() {
}

class GetTrafficPolicyInstanceCountCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "GetTrafficPolicyInstanceCount", {})
    .n("Route53Client", "GetTrafficPolicyInstanceCountCommand")
    .f(void 0, void 0)
    .ser(se_GetTrafficPolicyInstanceCountCommand)
    .de(de_GetTrafficPolicyInstanceCountCommand)
    .build() {
}

class ListCidrBlocksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ListCidrBlocks", {})
    .n("Route53Client", "ListCidrBlocksCommand")
    .f(void 0, void 0)
    .ser(se_ListCidrBlocksCommand)
    .de(de_ListCidrBlocksCommand)
    .build() {
}

class ListCidrCollectionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ListCidrCollections", {})
    .n("Route53Client", "ListCidrCollectionsCommand")
    .f(void 0, void 0)
    .ser(se_ListCidrCollectionsCommand)
    .de(de_ListCidrCollectionsCommand)
    .build() {
}

class ListCidrLocationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ListCidrLocations", {})
    .n("Route53Client", "ListCidrLocationsCommand")
    .f(void 0, void 0)
    .ser(se_ListCidrLocationsCommand)
    .de(de_ListCidrLocationsCommand)
    .build() {
}

class ListGeoLocationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ListGeoLocations", {})
    .n("Route53Client", "ListGeoLocationsCommand")
    .f(void 0, void 0)
    .ser(se_ListGeoLocationsCommand)
    .de(de_ListGeoLocationsCommand)
    .build() {
}

class ListHealthChecksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ListHealthChecks", {})
    .n("Route53Client", "ListHealthChecksCommand")
    .f(void 0, void 0)
    .ser(se_ListHealthChecksCommand)
    .de(de_ListHealthChecksCommand)
    .build() {
}

class ListHostedZonesByNameCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "ListHostedZonesByName", {})
    .n("Route53Client", "ListHostedZonesByNameCommand")
    .f(void 0, void 0)
    .ser(se_ListHostedZonesByNameCommand)
    .de(de_ListHostedZonesByNameCommand)
    .build() {
}

class ListHostedZonesByVPCCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ListHostedZonesByVPC", {})
    .n("Route53Client", "ListHostedZonesByVPCCommand")
    .f(void 0, void 0)
    .ser(se_ListHostedZonesByVPCCommand)
    .de(de_ListHostedZonesByVPCCommand)
    .build() {
}

class ListHostedZonesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "ListHostedZones", {})
    .n("Route53Client", "ListHostedZonesCommand")
    .f(void 0, void 0)
    .ser(se_ListHostedZonesCommand)
    .de(de_ListHostedZonesCommand)
    .build() {
}

class ListQueryLoggingConfigsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "ListQueryLoggingConfigs", {})
    .n("Route53Client", "ListQueryLoggingConfigsCommand")
    .f(void 0, void 0)
    .ser(se_ListQueryLoggingConfigsCommand)
    .de(de_ListQueryLoggingConfigsCommand)
    .build() {
}

class ListResourceRecordSetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "ListResourceRecordSets", {})
    .n("Route53Client", "ListResourceRecordSetsCommand")
    .f(void 0, void 0)
    .ser(se_ListResourceRecordSetsCommand)
    .de(de_ListResourceRecordSetsCommand)
    .build() {
}

class ListReusableDelegationSetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ListReusableDelegationSets", {})
    .n("Route53Client", "ListReusableDelegationSetsCommand")
    .f(void 0, void 0)
    .ser(se_ListReusableDelegationSetsCommand)
    .de(de_ListReusableDelegationSetsCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ListTagsForResource", {})
    .n("Route53Client", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListTagsForResourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ListTagsForResources", {})
    .n("Route53Client", "ListTagsForResourcesCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourcesCommand)
    .de(de_ListTagsForResourcesCommand)
    .build() {
}

class ListTrafficPoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ListTrafficPolicies", {})
    .n("Route53Client", "ListTrafficPoliciesCommand")
    .f(void 0, void 0)
    .ser(se_ListTrafficPoliciesCommand)
    .de(de_ListTrafficPoliciesCommand)
    .build() {
}

class ListTrafficPolicyInstancesByHostedZoneCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "ListTrafficPolicyInstancesByHostedZone", {})
    .n("Route53Client", "ListTrafficPolicyInstancesByHostedZoneCommand")
    .f(void 0, void 0)
    .ser(se_ListTrafficPolicyInstancesByHostedZoneCommand)
    .de(de_ListTrafficPolicyInstancesByHostedZoneCommand)
    .build() {
}

class ListTrafficPolicyInstancesByPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ListTrafficPolicyInstancesByPolicy", {})
    .n("Route53Client", "ListTrafficPolicyInstancesByPolicyCommand")
    .f(void 0, void 0)
    .ser(se_ListTrafficPolicyInstancesByPolicyCommand)
    .de(de_ListTrafficPolicyInstancesByPolicyCommand)
    .build() {
}

class ListTrafficPolicyInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "ListTrafficPolicyInstances", {})
    .n("Route53Client", "ListTrafficPolicyInstancesCommand")
    .f(void 0, void 0)
    .ser(se_ListTrafficPolicyInstancesCommand)
    .de(de_ListTrafficPolicyInstancesCommand)
    .build() {
}

class ListTrafficPolicyVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "ListTrafficPolicyVersions", {})
    .n("Route53Client", "ListTrafficPolicyVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListTrafficPolicyVersionsCommand)
    .de(de_ListTrafficPolicyVersionsCommand)
    .build() {
}

class ListVPCAssociationAuthorizationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "ListVPCAssociationAuthorizations", {})
    .n("Route53Client", "ListVPCAssociationAuthorizationsCommand")
    .f(void 0, void 0)
    .ser(se_ListVPCAssociationAuthorizationsCommand)
    .de(de_ListVPCAssociationAuthorizationsCommand)
    .build() {
}

class TestDNSAnswerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "TestDNSAnswer", {})
    .n("Route53Client", "TestDNSAnswerCommand")
    .f(void 0, void 0)
    .ser(se_TestDNSAnswerCommand)
    .de(de_TestDNSAnswerCommand)
    .build() {
}

class UpdateHealthCheckCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSDnsV20130401", "UpdateHealthCheck", {})
    .n("Route53Client", "UpdateHealthCheckCommand")
    .f(void 0, void 0)
    .ser(se_UpdateHealthCheckCommand)
    .de(de_UpdateHealthCheckCommand)
    .build() {
}

class UpdateHostedZoneCommentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "UpdateHostedZoneComment", {})
    .n("Route53Client", "UpdateHostedZoneCommentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateHostedZoneCommentCommand)
    .de(de_UpdateHostedZoneCommentCommand)
    .build() {
}

class UpdateTrafficPolicyCommentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "UpdateTrafficPolicyComment", {})
    .n("Route53Client", "UpdateTrafficPolicyCommentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateTrafficPolicyCommentCommand)
    .de(de_UpdateTrafficPolicyCommentCommand)
    .build() {
}

class UpdateTrafficPolicyInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkRoute53.getIdNormalizerPlugin(config),
    ];
})
    .s("AWSDnsV20130401", "UpdateTrafficPolicyInstance", {})
    .n("Route53Client", "UpdateTrafficPolicyInstanceCommand")
    .f(void 0, void 0)
    .ser(se_UpdateTrafficPolicyInstanceCommand)
    .de(de_UpdateTrafficPolicyInstanceCommand)
    .build() {
}

const commands = {
    ActivateKeySigningKeyCommand,
    AssociateVPCWithHostedZoneCommand,
    ChangeCidrCollectionCommand,
    ChangeResourceRecordSetsCommand,
    ChangeTagsForResourceCommand,
    CreateCidrCollectionCommand,
    CreateHealthCheckCommand,
    CreateHostedZoneCommand,
    CreateKeySigningKeyCommand,
    CreateQueryLoggingConfigCommand,
    CreateReusableDelegationSetCommand,
    CreateTrafficPolicyCommand,
    CreateTrafficPolicyInstanceCommand,
    CreateTrafficPolicyVersionCommand,
    CreateVPCAssociationAuthorizationCommand,
    DeactivateKeySigningKeyCommand,
    DeleteCidrCollectionCommand,
    DeleteHealthCheckCommand,
    DeleteHostedZoneCommand,
    DeleteKeySigningKeyCommand,
    DeleteQueryLoggingConfigCommand,
    DeleteReusableDelegationSetCommand,
    DeleteTrafficPolicyCommand,
    DeleteTrafficPolicyInstanceCommand,
    DeleteVPCAssociationAuthorizationCommand,
    DisableHostedZoneDNSSECCommand,
    DisassociateVPCFromHostedZoneCommand,
    EnableHostedZoneDNSSECCommand,
    GetAccountLimitCommand,
    GetChangeCommand,
    GetCheckerIpRangesCommand,
    GetDNSSECCommand,
    GetGeoLocationCommand,
    GetHealthCheckCommand,
    GetHealthCheckCountCommand,
    GetHealthCheckLastFailureReasonCommand,
    GetHealthCheckStatusCommand,
    GetHostedZoneCommand,
    GetHostedZoneCountCommand,
    GetHostedZoneLimitCommand,
    GetQueryLoggingConfigCommand,
    GetReusableDelegationSetCommand,
    GetReusableDelegationSetLimitCommand,
    GetTrafficPolicyCommand,
    GetTrafficPolicyInstanceCommand,
    GetTrafficPolicyInstanceCountCommand,
    ListCidrBlocksCommand,
    ListCidrCollectionsCommand,
    ListCidrLocationsCommand,
    ListGeoLocationsCommand,
    ListHealthChecksCommand,
    ListHostedZonesCommand,
    ListHostedZonesByNameCommand,
    ListHostedZonesByVPCCommand,
    ListQueryLoggingConfigsCommand,
    ListResourceRecordSetsCommand,
    ListReusableDelegationSetsCommand,
    ListTagsForResourceCommand,
    ListTagsForResourcesCommand,
    ListTrafficPoliciesCommand,
    ListTrafficPolicyInstancesCommand,
    ListTrafficPolicyInstancesByHostedZoneCommand,
    ListTrafficPolicyInstancesByPolicyCommand,
    ListTrafficPolicyVersionsCommand,
    ListVPCAssociationAuthorizationsCommand,
    TestDNSAnswerCommand,
    UpdateHealthCheckCommand,
    UpdateHostedZoneCommentCommand,
    UpdateTrafficPolicyCommentCommand,
    UpdateTrafficPolicyInstanceCommand,
};
class Route53 extends Route53Client {
}
smithyClient.createAggregatedClient(commands, Route53);

const paginateListCidrBlocks = core.createPaginator(Route53Client, ListCidrBlocksCommand, "NextToken", "NextToken", "MaxResults");

const paginateListCidrCollections = core.createPaginator(Route53Client, ListCidrCollectionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListCidrLocations = core.createPaginator(Route53Client, ListCidrLocationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListHealthChecks = core.createPaginator(Route53Client, ListHealthChecksCommand, "Marker", "NextMarker", "MaxItems");

const paginateListHostedZones = core.createPaginator(Route53Client, ListHostedZonesCommand, "Marker", "NextMarker", "MaxItems");

const paginateListQueryLoggingConfigs = core.createPaginator(Route53Client, ListQueryLoggingConfigsCommand, "NextToken", "NextToken", "MaxResults");

const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new GetChangeCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.ChangeInfo.Status;
            };
            if (returnComparator() === "INSYNC") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForResourceRecordSetsChanged = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilResourceRecordSetsChanged = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return utilWaiter.checkExceptions(result);
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AccountLimitType = AccountLimitType;
exports.ActivateKeySigningKeyCommand = ActivateKeySigningKeyCommand;
exports.AssociateVPCWithHostedZoneCommand = AssociateVPCWithHostedZoneCommand;
exports.ChangeAction = ChangeAction;
exports.ChangeCidrCollectionCommand = ChangeCidrCollectionCommand;
exports.ChangeResourceRecordSetsCommand = ChangeResourceRecordSetsCommand;
exports.ChangeStatus = ChangeStatus;
exports.ChangeTagsForResourceCommand = ChangeTagsForResourceCommand;
exports.CidrBlockInUseException = CidrBlockInUseException;
exports.CidrCollectionAlreadyExistsException = CidrCollectionAlreadyExistsException;
exports.CidrCollectionChangeAction = CidrCollectionChangeAction;
exports.CidrCollectionInUseException = CidrCollectionInUseException;
exports.CidrCollectionVersionMismatchException = CidrCollectionVersionMismatchException;
exports.CloudWatchRegion = CloudWatchRegion;
exports.ComparisonOperator = ComparisonOperator;
exports.ConcurrentModification = ConcurrentModification;
exports.ConflictingDomainExists = ConflictingDomainExists;
exports.ConflictingTypes = ConflictingTypes;
exports.CreateCidrCollectionCommand = CreateCidrCollectionCommand;
exports.CreateHealthCheckCommand = CreateHealthCheckCommand;
exports.CreateHostedZoneCommand = CreateHostedZoneCommand;
exports.CreateKeySigningKeyCommand = CreateKeySigningKeyCommand;
exports.CreateQueryLoggingConfigCommand = CreateQueryLoggingConfigCommand;
exports.CreateReusableDelegationSetCommand = CreateReusableDelegationSetCommand;
exports.CreateTrafficPolicyCommand = CreateTrafficPolicyCommand;
exports.CreateTrafficPolicyInstanceCommand = CreateTrafficPolicyInstanceCommand;
exports.CreateTrafficPolicyVersionCommand = CreateTrafficPolicyVersionCommand;
exports.CreateVPCAssociationAuthorizationCommand = CreateVPCAssociationAuthorizationCommand;
exports.DNSSECNotFound = DNSSECNotFound;
exports.DeactivateKeySigningKeyCommand = DeactivateKeySigningKeyCommand;
exports.DelegationSetAlreadyCreated = DelegationSetAlreadyCreated;
exports.DelegationSetAlreadyReusable = DelegationSetAlreadyReusable;
exports.DelegationSetInUse = DelegationSetInUse;
exports.DelegationSetNotAvailable = DelegationSetNotAvailable;
exports.DelegationSetNotReusable = DelegationSetNotReusable;
exports.DeleteCidrCollectionCommand = DeleteCidrCollectionCommand;
exports.DeleteHealthCheckCommand = DeleteHealthCheckCommand;
exports.DeleteHostedZoneCommand = DeleteHostedZoneCommand;
exports.DeleteKeySigningKeyCommand = DeleteKeySigningKeyCommand;
exports.DeleteQueryLoggingConfigCommand = DeleteQueryLoggingConfigCommand;
exports.DeleteReusableDelegationSetCommand = DeleteReusableDelegationSetCommand;
exports.DeleteTrafficPolicyCommand = DeleteTrafficPolicyCommand;
exports.DeleteTrafficPolicyInstanceCommand = DeleteTrafficPolicyInstanceCommand;
exports.DeleteVPCAssociationAuthorizationCommand = DeleteVPCAssociationAuthorizationCommand;
exports.DisableHostedZoneDNSSECCommand = DisableHostedZoneDNSSECCommand;
exports.DisassociateVPCFromHostedZoneCommand = DisassociateVPCFromHostedZoneCommand;
exports.EnableHostedZoneDNSSECCommand = EnableHostedZoneDNSSECCommand;
exports.GetAccountLimitCommand = GetAccountLimitCommand;
exports.GetChangeCommand = GetChangeCommand;
exports.GetCheckerIpRangesCommand = GetCheckerIpRangesCommand;
exports.GetDNSSECCommand = GetDNSSECCommand;
exports.GetGeoLocationCommand = GetGeoLocationCommand;
exports.GetHealthCheckCommand = GetHealthCheckCommand;
exports.GetHealthCheckCountCommand = GetHealthCheckCountCommand;
exports.GetHealthCheckLastFailureReasonCommand = GetHealthCheckLastFailureReasonCommand;
exports.GetHealthCheckStatusCommand = GetHealthCheckStatusCommand;
exports.GetHostedZoneCommand = GetHostedZoneCommand;
exports.GetHostedZoneCountCommand = GetHostedZoneCountCommand;
exports.GetHostedZoneLimitCommand = GetHostedZoneLimitCommand;
exports.GetQueryLoggingConfigCommand = GetQueryLoggingConfigCommand;
exports.GetReusableDelegationSetCommand = GetReusableDelegationSetCommand;
exports.GetReusableDelegationSetLimitCommand = GetReusableDelegationSetLimitCommand;
exports.GetTrafficPolicyCommand = GetTrafficPolicyCommand;
exports.GetTrafficPolicyInstanceCommand = GetTrafficPolicyInstanceCommand;
exports.GetTrafficPolicyInstanceCountCommand = GetTrafficPolicyInstanceCountCommand;
exports.HealthCheckAlreadyExists = HealthCheckAlreadyExists;
exports.HealthCheckInUse = HealthCheckInUse;
exports.HealthCheckRegion = HealthCheckRegion;
exports.HealthCheckType = HealthCheckType;
exports.HealthCheckVersionMismatch = HealthCheckVersionMismatch;
exports.HostedZoneAlreadyExists = HostedZoneAlreadyExists;
exports.HostedZoneLimitType = HostedZoneLimitType;
exports.HostedZoneNotEmpty = HostedZoneNotEmpty;
exports.HostedZoneNotFound = HostedZoneNotFound;
exports.HostedZoneNotPrivate = HostedZoneNotPrivate;
exports.HostedZonePartiallyDelegated = HostedZonePartiallyDelegated;
exports.HostedZoneType = HostedZoneType;
exports.IncompatibleVersion = IncompatibleVersion;
exports.InsufficientCloudWatchLogsResourcePolicy = InsufficientCloudWatchLogsResourcePolicy;
exports.InsufficientDataHealthStatus = InsufficientDataHealthStatus;
exports.InvalidArgument = InvalidArgument;
exports.InvalidChangeBatch = InvalidChangeBatch;
exports.InvalidDomainName = InvalidDomainName;
exports.InvalidInput = InvalidInput;
exports.InvalidKMSArn = InvalidKMSArn;
exports.InvalidKeySigningKeyName = InvalidKeySigningKeyName;
exports.InvalidKeySigningKeyStatus = InvalidKeySigningKeyStatus;
exports.InvalidPaginationToken = InvalidPaginationToken;
exports.InvalidSigningStatus = InvalidSigningStatus;
exports.InvalidTrafficPolicyDocument = InvalidTrafficPolicyDocument;
exports.InvalidVPCId = InvalidVPCId;
exports.KeySigningKeyAlreadyExists = KeySigningKeyAlreadyExists;
exports.KeySigningKeyInParentDSRecord = KeySigningKeyInParentDSRecord;
exports.KeySigningKeyInUse = KeySigningKeyInUse;
exports.KeySigningKeyWithActiveStatusNotFound = KeySigningKeyWithActiveStatusNotFound;
exports.LastVPCAssociation = LastVPCAssociation;
exports.LimitsExceeded = LimitsExceeded;
exports.ListCidrBlocksCommand = ListCidrBlocksCommand;
exports.ListCidrCollectionsCommand = ListCidrCollectionsCommand;
exports.ListCidrLocationsCommand = ListCidrLocationsCommand;
exports.ListGeoLocationsCommand = ListGeoLocationsCommand;
exports.ListHealthChecksCommand = ListHealthChecksCommand;
exports.ListHostedZonesByNameCommand = ListHostedZonesByNameCommand;
exports.ListHostedZonesByVPCCommand = ListHostedZonesByVPCCommand;
exports.ListHostedZonesCommand = ListHostedZonesCommand;
exports.ListQueryLoggingConfigsCommand = ListQueryLoggingConfigsCommand;
exports.ListResourceRecordSetsCommand = ListResourceRecordSetsCommand;
exports.ListReusableDelegationSetsCommand = ListReusableDelegationSetsCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListTagsForResourcesCommand = ListTagsForResourcesCommand;
exports.ListTrafficPoliciesCommand = ListTrafficPoliciesCommand;
exports.ListTrafficPolicyInstancesByHostedZoneCommand = ListTrafficPolicyInstancesByHostedZoneCommand;
exports.ListTrafficPolicyInstancesByPolicyCommand = ListTrafficPolicyInstancesByPolicyCommand;
exports.ListTrafficPolicyInstancesCommand = ListTrafficPolicyInstancesCommand;
exports.ListTrafficPolicyVersionsCommand = ListTrafficPolicyVersionsCommand;
exports.ListVPCAssociationAuthorizationsCommand = ListVPCAssociationAuthorizationsCommand;
exports.NoSuchChange = NoSuchChange;
exports.NoSuchCidrCollectionException = NoSuchCidrCollectionException;
exports.NoSuchCidrLocationException = NoSuchCidrLocationException;
exports.NoSuchCloudWatchLogsLogGroup = NoSuchCloudWatchLogsLogGroup;
exports.NoSuchDelegationSet = NoSuchDelegationSet;
exports.NoSuchGeoLocation = NoSuchGeoLocation;
exports.NoSuchHealthCheck = NoSuchHealthCheck;
exports.NoSuchHostedZone = NoSuchHostedZone;
exports.NoSuchKeySigningKey = NoSuchKeySigningKey;
exports.NoSuchQueryLoggingConfig = NoSuchQueryLoggingConfig;
exports.NoSuchTrafficPolicy = NoSuchTrafficPolicy;
exports.NoSuchTrafficPolicyInstance = NoSuchTrafficPolicyInstance;
exports.NotAuthorizedException = NotAuthorizedException;
exports.PriorRequestNotComplete = PriorRequestNotComplete;
exports.PublicZoneVPCAssociation = PublicZoneVPCAssociation;
exports.QueryLoggingConfigAlreadyExists = QueryLoggingConfigAlreadyExists;
exports.RRType = RRType;
exports.ResettableElementName = ResettableElementName;
exports.ResourceRecordSetFailover = ResourceRecordSetFailover;
exports.ResourceRecordSetRegion = ResourceRecordSetRegion;
exports.ReusableDelegationSetLimitType = ReusableDelegationSetLimitType;
exports.Route53 = Route53;
exports.Route53Client = Route53Client;
exports.Route53ServiceException = Route53ServiceException;
exports.Statistic = Statistic;
exports.TagResourceType = TagResourceType;
exports.TestDNSAnswerCommand = TestDNSAnswerCommand;
exports.ThrottlingException = ThrottlingException;
exports.TooManyHealthChecks = TooManyHealthChecks;
exports.TooManyHostedZones = TooManyHostedZones;
exports.TooManyKeySigningKeys = TooManyKeySigningKeys;
exports.TooManyTrafficPolicies = TooManyTrafficPolicies;
exports.TooManyTrafficPolicyInstances = TooManyTrafficPolicyInstances;
exports.TooManyTrafficPolicyVersionsForCurrentPolicy = TooManyTrafficPolicyVersionsForCurrentPolicy;
exports.TooManyVPCAssociationAuthorizations = TooManyVPCAssociationAuthorizations;
exports.TrafficPolicyAlreadyExists = TrafficPolicyAlreadyExists;
exports.TrafficPolicyInUse = TrafficPolicyInUse;
exports.TrafficPolicyInstanceAlreadyExists = TrafficPolicyInstanceAlreadyExists;
exports.UpdateHealthCheckCommand = UpdateHealthCheckCommand;
exports.UpdateHostedZoneCommentCommand = UpdateHostedZoneCommentCommand;
exports.UpdateTrafficPolicyCommentCommand = UpdateTrafficPolicyCommentCommand;
exports.UpdateTrafficPolicyInstanceCommand = UpdateTrafficPolicyInstanceCommand;
exports.VPCAssociationAuthorizationNotFound = VPCAssociationAuthorizationNotFound;
exports.VPCAssociationNotFound = VPCAssociationNotFound;
exports.VPCRegion = VPCRegion;
exports.paginateListCidrBlocks = paginateListCidrBlocks;
exports.paginateListCidrCollections = paginateListCidrCollections;
exports.paginateListCidrLocations = paginateListCidrLocations;
exports.paginateListHealthChecks = paginateListHealthChecks;
exports.paginateListHostedZones = paginateListHostedZones;
exports.paginateListQueryLoggingConfigs = paginateListQueryLoggingConfigs;
exports.waitForResourceRecordSetsChanged = waitForResourceRecordSetsChanged;
exports.waitUntilResourceRecordSetsChanged = waitUntilResourceRecordSetsChanged;
