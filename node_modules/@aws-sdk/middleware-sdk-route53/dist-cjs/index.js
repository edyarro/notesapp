'use strict';

const IDENTIFIER_PREFIX_PATTERN = /^\/(hostedzone|change|delegationset)\//;

function changeResourceRecordSetsMiddleware() {
    return (next) => async (args) => {
        const { ChangeBatch } = args.input;
        const Changes = [];
        for (const change of ChangeBatch.Changes) {
            const { AliasTarget } = change.ResourceRecordSet;
            if (AliasTarget) {
                Changes.push({
                    ...change,
                    ResourceRecordSet: {
                        ...change.ResourceRecordSet,
                        AliasTarget: {
                            ...AliasTarget,
                            HostedZoneId: AliasTarget.HostedZoneId.replace(IDENTIFIER_PREFIX_PATTERN, ""),
                        },
                    },
                });
            }
            else {
                Changes.push(change);
            }
        }
        return next({
            ...args,
            input: {
                ...args.input,
                ChangeBatch: {
                    ...ChangeBatch,
                    Changes,
                },
            },
        });
    };
}
const changeResourceRecordSetsMiddlewareOptions = {
    step: "initialize",
    tags: ["ROUTE53_IDS", "CHANGE_RESOURCE_RECORD_SETS"],
    name: "changeResourceRecordSetsMiddleware",
    override: true,
};
const getChangeResourceRecordSetsPlugin = (unused) => ({
    applyToStack: (clientStack) => {
        clientStack.add(changeResourceRecordSetsMiddleware(), changeResourceRecordSetsMiddlewareOptions);
    },
});

const IDENTIFIER_PARAMETERS = ["DelegationSetId", "HostedZoneId", "Id"];
function idNormalizerMiddleware() {
    return (next) => async (args) => {
        const input = { ...args.input };
        for (const paramName of IDENTIFIER_PARAMETERS) {
            const param = input[paramName];
            if (param) {
                input[paramName] = param.replace(IDENTIFIER_PREFIX_PATTERN, "");
            }
        }
        return next({
            ...args,
            input,
        });
    };
}
const idNormalizerMiddlewareOptions = {
    step: "initialize",
    tags: ["ROUTE53_IDS"],
    name: "idNormalizerMiddleware",
    override: true,
};
const getIdNormalizerPlugin = (unused) => ({
    applyToStack: (clientStack) => {
        clientStack.add(idNormalizerMiddleware(), idNormalizerMiddlewareOptions);
    },
});

exports.changeResourceRecordSetsMiddleware = changeResourceRecordSetsMiddleware;
exports.changeResourceRecordSetsMiddlewareOptions = changeResourceRecordSetsMiddlewareOptions;
exports.getChangeResourceRecordSetsPlugin = getChangeResourceRecordSetsPlugin;
exports.getIdNormalizerPlugin = getIdNormalizerPlugin;
exports.idNormalizerMiddleware = idNormalizerMiddleware;
exports.idNormalizerMiddlewareOptions = idNormalizerMiddlewareOptions;
