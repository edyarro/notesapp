'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "states",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class SFNClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultSFNHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class SFNServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SFNServiceException.prototype);
    }
}

class ActivityAlreadyExists extends SFNServiceException {
    name = "ActivityAlreadyExists";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ActivityAlreadyExists",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ActivityAlreadyExists.prototype);
    }
}
class ActivityDoesNotExist extends SFNServiceException {
    name = "ActivityDoesNotExist";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ActivityDoesNotExist",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ActivityDoesNotExist.prototype);
    }
}
class ActivityLimitExceeded extends SFNServiceException {
    name = "ActivityLimitExceeded";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ActivityLimitExceeded",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ActivityLimitExceeded.prototype);
    }
}
class ActivityWorkerLimitExceeded extends SFNServiceException {
    name = "ActivityWorkerLimitExceeded";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ActivityWorkerLimitExceeded",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ActivityWorkerLimitExceeded.prototype);
    }
}
const EncryptionType = {
    AWS_OWNED_KEY: "AWS_OWNED_KEY",
    CUSTOMER_MANAGED_KMS_KEY: "CUSTOMER_MANAGED_KMS_KEY",
};
class InvalidEncryptionConfiguration extends SFNServiceException {
    name = "InvalidEncryptionConfiguration";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidEncryptionConfiguration",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidEncryptionConfiguration.prototype);
    }
}
class InvalidName extends SFNServiceException {
    name = "InvalidName";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidName",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidName.prototype);
    }
}
class KmsAccessDeniedException extends SFNServiceException {
    name = "KmsAccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KmsAccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KmsAccessDeniedException.prototype);
    }
}
class KmsThrottlingException extends SFNServiceException {
    name = "KmsThrottlingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "KmsThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KmsThrottlingException.prototype);
    }
}
class TooManyTags extends SFNServiceException {
    name = "TooManyTags";
    $fault = "client";
    resourceName;
    constructor(opts) {
        super({
            name: "TooManyTags",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyTags.prototype);
        this.resourceName = opts.resourceName;
    }
}
class ConflictException extends SFNServiceException {
    name = "ConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
const LogLevel = {
    ALL: "ALL",
    ERROR: "ERROR",
    FATAL: "FATAL",
    OFF: "OFF",
};
const StateMachineType = {
    EXPRESS: "EXPRESS",
    STANDARD: "STANDARD",
};
class InvalidArn extends SFNServiceException {
    name = "InvalidArn";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidArn",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidArn.prototype);
    }
}
class InvalidDefinition extends SFNServiceException {
    name = "InvalidDefinition";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidDefinition",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidDefinition.prototype);
    }
}
class InvalidLoggingConfiguration extends SFNServiceException {
    name = "InvalidLoggingConfiguration";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidLoggingConfiguration",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidLoggingConfiguration.prototype);
    }
}
class InvalidTracingConfiguration extends SFNServiceException {
    name = "InvalidTracingConfiguration";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidTracingConfiguration",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidTracingConfiguration.prototype);
    }
}
class StateMachineAlreadyExists extends SFNServiceException {
    name = "StateMachineAlreadyExists";
    $fault = "client";
    constructor(opts) {
        super({
            name: "StateMachineAlreadyExists",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StateMachineAlreadyExists.prototype);
    }
}
class StateMachineDeleting extends SFNServiceException {
    name = "StateMachineDeleting";
    $fault = "client";
    constructor(opts) {
        super({
            name: "StateMachineDeleting",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StateMachineDeleting.prototype);
    }
}
class StateMachineLimitExceeded extends SFNServiceException {
    name = "StateMachineLimitExceeded";
    $fault = "client";
    constructor(opts) {
        super({
            name: "StateMachineLimitExceeded",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StateMachineLimitExceeded.prototype);
    }
}
class StateMachineTypeNotSupported extends SFNServiceException {
    name = "StateMachineTypeNotSupported";
    $fault = "client";
    constructor(opts) {
        super({
            name: "StateMachineTypeNotSupported",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StateMachineTypeNotSupported.prototype);
    }
}
const ValidationExceptionReason = {
    API_DOES_NOT_SUPPORT_LABELED_ARNS: "API_DOES_NOT_SUPPORT_LABELED_ARNS",
    CANNOT_UPDATE_COMPLETED_MAP_RUN: "CANNOT_UPDATE_COMPLETED_MAP_RUN",
    INVALID_ROUTING_CONFIGURATION: "INVALID_ROUTING_CONFIGURATION",
    MISSING_REQUIRED_PARAMETER: "MISSING_REQUIRED_PARAMETER",
};
class ValidationException extends SFNServiceException {
    name = "ValidationException";
    $fault = "client";
    reason;
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.reason = opts.reason;
    }
}
class ResourceNotFound extends SFNServiceException {
    name = "ResourceNotFound";
    $fault = "client";
    resourceName;
    constructor(opts) {
        super({
            name: "ResourceNotFound",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFound.prototype);
        this.resourceName = opts.resourceName;
    }
}
class ServiceQuotaExceededException extends SFNServiceException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
const IncludedData = {
    ALL_DATA: "ALL_DATA",
    METADATA_ONLY: "METADATA_ONLY",
};
const ExecutionRedriveStatus = {
    NOT_REDRIVABLE: "NOT_REDRIVABLE",
    REDRIVABLE: "REDRIVABLE",
    REDRIVABLE_BY_MAP_RUN: "REDRIVABLE_BY_MAP_RUN",
};
const ExecutionStatus = {
    ABORTED: "ABORTED",
    FAILED: "FAILED",
    PENDING_REDRIVE: "PENDING_REDRIVE",
    RUNNING: "RUNNING",
    SUCCEEDED: "SUCCEEDED",
    TIMED_OUT: "TIMED_OUT",
};
class ExecutionDoesNotExist extends SFNServiceException {
    name = "ExecutionDoesNotExist";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ExecutionDoesNotExist",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ExecutionDoesNotExist.prototype);
    }
}
const KmsKeyState = {
    CREATING: "CREATING",
    DISABLED: "DISABLED",
    PENDING_DELETION: "PENDING_DELETION",
    PENDING_IMPORT: "PENDING_IMPORT",
    UNAVAILABLE: "UNAVAILABLE",
};
class KmsInvalidStateException extends SFNServiceException {
    name = "KmsInvalidStateException";
    $fault = "client";
    kmsKeyState;
    constructor(opts) {
        super({
            name: "KmsInvalidStateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KmsInvalidStateException.prototype);
        this.kmsKeyState = opts.kmsKeyState;
    }
}
const MapRunStatus = {
    ABORTED: "ABORTED",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    SUCCEEDED: "SUCCEEDED",
};
const StateMachineStatus = {
    ACTIVE: "ACTIVE",
    DELETING: "DELETING",
};
class StateMachineDoesNotExist extends SFNServiceException {
    name = "StateMachineDoesNotExist";
    $fault = "client";
    constructor(opts) {
        super({
            name: "StateMachineDoesNotExist",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, StateMachineDoesNotExist.prototype);
    }
}
const HistoryEventType = {
    ActivityFailed: "ActivityFailed",
    ActivityScheduleFailed: "ActivityScheduleFailed",
    ActivityScheduled: "ActivityScheduled",
    ActivityStarted: "ActivityStarted",
    ActivitySucceeded: "ActivitySucceeded",
    ActivityTimedOut: "ActivityTimedOut",
    ChoiceStateEntered: "ChoiceStateEntered",
    ChoiceStateExited: "ChoiceStateExited",
    EvaluationFailed: "EvaluationFailed",
    ExecutionAborted: "ExecutionAborted",
    ExecutionFailed: "ExecutionFailed",
    ExecutionRedriven: "ExecutionRedriven",
    ExecutionStarted: "ExecutionStarted",
    ExecutionSucceeded: "ExecutionSucceeded",
    ExecutionTimedOut: "ExecutionTimedOut",
    FailStateEntered: "FailStateEntered",
    LambdaFunctionFailed: "LambdaFunctionFailed",
    LambdaFunctionScheduleFailed: "LambdaFunctionScheduleFailed",
    LambdaFunctionScheduled: "LambdaFunctionScheduled",
    LambdaFunctionStartFailed: "LambdaFunctionStartFailed",
    LambdaFunctionStarted: "LambdaFunctionStarted",
    LambdaFunctionSucceeded: "LambdaFunctionSucceeded",
    LambdaFunctionTimedOut: "LambdaFunctionTimedOut",
    MapIterationAborted: "MapIterationAborted",
    MapIterationFailed: "MapIterationFailed",
    MapIterationStarted: "MapIterationStarted",
    MapIterationSucceeded: "MapIterationSucceeded",
    MapRunAborted: "MapRunAborted",
    MapRunFailed: "MapRunFailed",
    MapRunRedriven: "MapRunRedriven",
    MapRunStarted: "MapRunStarted",
    MapRunSucceeded: "MapRunSucceeded",
    MapStateAborted: "MapStateAborted",
    MapStateEntered: "MapStateEntered",
    MapStateExited: "MapStateExited",
    MapStateFailed: "MapStateFailed",
    MapStateStarted: "MapStateStarted",
    MapStateSucceeded: "MapStateSucceeded",
    ParallelStateAborted: "ParallelStateAborted",
    ParallelStateEntered: "ParallelStateEntered",
    ParallelStateExited: "ParallelStateExited",
    ParallelStateFailed: "ParallelStateFailed",
    ParallelStateStarted: "ParallelStateStarted",
    ParallelStateSucceeded: "ParallelStateSucceeded",
    PassStateEntered: "PassStateEntered",
    PassStateExited: "PassStateExited",
    SucceedStateEntered: "SucceedStateEntered",
    SucceedStateExited: "SucceedStateExited",
    TaskFailed: "TaskFailed",
    TaskScheduled: "TaskScheduled",
    TaskStartFailed: "TaskStartFailed",
    TaskStarted: "TaskStarted",
    TaskStateAborted: "TaskStateAborted",
    TaskStateEntered: "TaskStateEntered",
    TaskStateExited: "TaskStateExited",
    TaskSubmitFailed: "TaskSubmitFailed",
    TaskSubmitted: "TaskSubmitted",
    TaskSucceeded: "TaskSucceeded",
    TaskTimedOut: "TaskTimedOut",
    WaitStateAborted: "WaitStateAborted",
    WaitStateEntered: "WaitStateEntered",
    WaitStateExited: "WaitStateExited",
};
class InvalidToken extends SFNServiceException {
    name = "InvalidToken";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidToken",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidToken.prototype);
    }
}
const ExecutionRedriveFilter = {
    NOT_REDRIVEN: "NOT_REDRIVEN",
    REDRIVEN: "REDRIVEN",
};
class ExecutionLimitExceeded extends SFNServiceException {
    name = "ExecutionLimitExceeded";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ExecutionLimitExceeded",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ExecutionLimitExceeded.prototype);
    }
}
class ExecutionNotRedrivable extends SFNServiceException {
    name = "ExecutionNotRedrivable";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ExecutionNotRedrivable",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ExecutionNotRedrivable.prototype);
    }
}
class TaskDoesNotExist extends SFNServiceException {
    name = "TaskDoesNotExist";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TaskDoesNotExist",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TaskDoesNotExist.prototype);
    }
}
class TaskTimedOut extends SFNServiceException {
    name = "TaskTimedOut";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TaskTimedOut",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TaskTimedOut.prototype);
    }
}
class InvalidOutput extends SFNServiceException {
    name = "InvalidOutput";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidOutput",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidOutput.prototype);
    }
}
class ExecutionAlreadyExists extends SFNServiceException {
    name = "ExecutionAlreadyExists";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ExecutionAlreadyExists",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ExecutionAlreadyExists.prototype);
    }
}
class InvalidExecutionInput extends SFNServiceException {
    name = "InvalidExecutionInput";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidExecutionInput",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidExecutionInput.prototype);
    }
}
const SyncExecutionStatus = {
    FAILED: "FAILED",
    SUCCEEDED: "SUCCEEDED",
    TIMED_OUT: "TIMED_OUT",
};
const InspectionLevel = {
    DEBUG: "DEBUG",
    INFO: "INFO",
    TRACE: "TRACE",
};
const TestExecutionStatus = {
    CAUGHT_ERROR: "CAUGHT_ERROR",
    FAILED: "FAILED",
    RETRIABLE: "RETRIABLE",
    SUCCEEDED: "SUCCEEDED",
};
class MissingRequiredParameter extends SFNServiceException {
    name = "MissingRequiredParameter";
    $fault = "client";
    constructor(opts) {
        super({
            name: "MissingRequiredParameter",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MissingRequiredParameter.prototype);
    }
}
const ValidateStateMachineDefinitionSeverity = {
    ERROR: "ERROR",
    WARNING: "WARNING",
};
const ValidateStateMachineDefinitionResultCode = {
    FAIL: "FAIL",
    OK: "OK",
};
const ActivityFailedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const ActivityScheduledEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
});
const ActivityScheduleFailedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const ActivitySucceededEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.output && { output: smithyClient.SENSITIVE_STRING }),
});
const ActivityTimedOutEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const CreateStateMachineInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: smithyClient.SENSITIVE_STRING }),
    ...(obj.versionDescription && { versionDescription: smithyClient.SENSITIVE_STRING }),
});
const CreateStateMachineAliasInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.description && { description: smithyClient.SENSITIVE_STRING }),
});
const DescribeExecutionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
    ...(obj.output && { output: smithyClient.SENSITIVE_STRING }),
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
    ...(obj.redriveStatusReason && { redriveStatusReason: smithyClient.SENSITIVE_STRING }),
});
const DescribeStateMachineOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: smithyClient.SENSITIVE_STRING }),
    ...(obj.description && { description: smithyClient.SENSITIVE_STRING }),
    ...(obj.variableReferences && { variableReferences: smithyClient.SENSITIVE_STRING }),
});
const DescribeStateMachineAliasOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.description && { description: smithyClient.SENSITIVE_STRING }),
});
const DescribeStateMachineForExecutionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: smithyClient.SENSITIVE_STRING }),
    ...(obj.variableReferences && { variableReferences: smithyClient.SENSITIVE_STRING }),
});
const GetActivityTaskOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
});
const EvaluationFailedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
    ...(obj.location && { location: smithyClient.SENSITIVE_STRING }),
});
const ExecutionAbortedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const ExecutionFailedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const ExecutionStartedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
});
const ExecutionSucceededEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.output && { output: smithyClient.SENSITIVE_STRING }),
});
const ExecutionTimedOutEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const LambdaFunctionFailedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const LambdaFunctionScheduledEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
});
const LambdaFunctionScheduleFailedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const LambdaFunctionStartFailedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const LambdaFunctionSucceededEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.output && { output: smithyClient.SENSITIVE_STRING }),
});
const LambdaFunctionTimedOutEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const MapRunFailedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const StateEnteredEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
});
const StateExitedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.output && { output: smithyClient.SENSITIVE_STRING }),
    ...(obj.assignedVariables && { assignedVariables: smithyClient.SENSITIVE_STRING }),
});
const TaskFailedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const TaskScheduledEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.parameters && { parameters: smithyClient.SENSITIVE_STRING }),
});
const TaskStartFailedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const TaskSubmitFailedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const TaskSubmittedEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.output && { output: smithyClient.SENSITIVE_STRING }),
});
const TaskSucceededEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.output && { output: smithyClient.SENSITIVE_STRING }),
});
const TaskTimedOutEventDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const HistoryEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.activityFailedEventDetails && {
        activityFailedEventDetails: ActivityFailedEventDetailsFilterSensitiveLog(obj.activityFailedEventDetails),
    }),
    ...(obj.activityScheduleFailedEventDetails && {
        activityScheduleFailedEventDetails: ActivityScheduleFailedEventDetailsFilterSensitiveLog(obj.activityScheduleFailedEventDetails),
    }),
    ...(obj.activityScheduledEventDetails && {
        activityScheduledEventDetails: ActivityScheduledEventDetailsFilterSensitiveLog(obj.activityScheduledEventDetails),
    }),
    ...(obj.activitySucceededEventDetails && {
        activitySucceededEventDetails: ActivitySucceededEventDetailsFilterSensitiveLog(obj.activitySucceededEventDetails),
    }),
    ...(obj.activityTimedOutEventDetails && {
        activityTimedOutEventDetails: ActivityTimedOutEventDetailsFilterSensitiveLog(obj.activityTimedOutEventDetails),
    }),
    ...(obj.taskFailedEventDetails && {
        taskFailedEventDetails: TaskFailedEventDetailsFilterSensitiveLog(obj.taskFailedEventDetails),
    }),
    ...(obj.taskScheduledEventDetails && {
        taskScheduledEventDetails: TaskScheduledEventDetailsFilterSensitiveLog(obj.taskScheduledEventDetails),
    }),
    ...(obj.taskStartFailedEventDetails && {
        taskStartFailedEventDetails: TaskStartFailedEventDetailsFilterSensitiveLog(obj.taskStartFailedEventDetails),
    }),
    ...(obj.taskSubmitFailedEventDetails && {
        taskSubmitFailedEventDetails: TaskSubmitFailedEventDetailsFilterSensitiveLog(obj.taskSubmitFailedEventDetails),
    }),
    ...(obj.taskSubmittedEventDetails && {
        taskSubmittedEventDetails: TaskSubmittedEventDetailsFilterSensitiveLog(obj.taskSubmittedEventDetails),
    }),
    ...(obj.taskSucceededEventDetails && {
        taskSucceededEventDetails: TaskSucceededEventDetailsFilterSensitiveLog(obj.taskSucceededEventDetails),
    }),
    ...(obj.taskTimedOutEventDetails && {
        taskTimedOutEventDetails: TaskTimedOutEventDetailsFilterSensitiveLog(obj.taskTimedOutEventDetails),
    }),
    ...(obj.executionFailedEventDetails && {
        executionFailedEventDetails: ExecutionFailedEventDetailsFilterSensitiveLog(obj.executionFailedEventDetails),
    }),
    ...(obj.executionStartedEventDetails && {
        executionStartedEventDetails: ExecutionStartedEventDetailsFilterSensitiveLog(obj.executionStartedEventDetails),
    }),
    ...(obj.executionSucceededEventDetails && {
        executionSucceededEventDetails: ExecutionSucceededEventDetailsFilterSensitiveLog(obj.executionSucceededEventDetails),
    }),
    ...(obj.executionAbortedEventDetails && {
        executionAbortedEventDetails: ExecutionAbortedEventDetailsFilterSensitiveLog(obj.executionAbortedEventDetails),
    }),
    ...(obj.executionTimedOutEventDetails && {
        executionTimedOutEventDetails: ExecutionTimedOutEventDetailsFilterSensitiveLog(obj.executionTimedOutEventDetails),
    }),
    ...(obj.lambdaFunctionFailedEventDetails && {
        lambdaFunctionFailedEventDetails: LambdaFunctionFailedEventDetailsFilterSensitiveLog(obj.lambdaFunctionFailedEventDetails),
    }),
    ...(obj.lambdaFunctionScheduleFailedEventDetails && {
        lambdaFunctionScheduleFailedEventDetails: LambdaFunctionScheduleFailedEventDetailsFilterSensitiveLog(obj.lambdaFunctionScheduleFailedEventDetails),
    }),
    ...(obj.lambdaFunctionScheduledEventDetails && {
        lambdaFunctionScheduledEventDetails: LambdaFunctionScheduledEventDetailsFilterSensitiveLog(obj.lambdaFunctionScheduledEventDetails),
    }),
    ...(obj.lambdaFunctionStartFailedEventDetails && {
        lambdaFunctionStartFailedEventDetails: LambdaFunctionStartFailedEventDetailsFilterSensitiveLog(obj.lambdaFunctionStartFailedEventDetails),
    }),
    ...(obj.lambdaFunctionSucceededEventDetails && {
        lambdaFunctionSucceededEventDetails: LambdaFunctionSucceededEventDetailsFilterSensitiveLog(obj.lambdaFunctionSucceededEventDetails),
    }),
    ...(obj.lambdaFunctionTimedOutEventDetails && {
        lambdaFunctionTimedOutEventDetails: LambdaFunctionTimedOutEventDetailsFilterSensitiveLog(obj.lambdaFunctionTimedOutEventDetails),
    }),
    ...(obj.stateEnteredEventDetails && {
        stateEnteredEventDetails: StateEnteredEventDetailsFilterSensitiveLog(obj.stateEnteredEventDetails),
    }),
    ...(obj.stateExitedEventDetails && {
        stateExitedEventDetails: StateExitedEventDetailsFilterSensitiveLog(obj.stateExitedEventDetails),
    }),
    ...(obj.mapRunFailedEventDetails && {
        mapRunFailedEventDetails: MapRunFailedEventDetailsFilterSensitiveLog(obj.mapRunFailedEventDetails),
    }),
    ...(obj.evaluationFailedEventDetails && {
        evaluationFailedEventDetails: EvaluationFailedEventDetailsFilterSensitiveLog(obj.evaluationFailedEventDetails),
    }),
});
const GetExecutionHistoryOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.events && { events: obj.events.map((item) => HistoryEventFilterSensitiveLog(item)) }),
});
const PublishStateMachineVersionInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.description && { description: smithyClient.SENSITIVE_STRING }),
});
const SendTaskFailureInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const SendTaskSuccessInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.output && { output: smithyClient.SENSITIVE_STRING }),
});
const StartExecutionInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
});
const StartSyncExecutionInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
});
const StartSyncExecutionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
    ...(obj.output && { output: smithyClient.SENSITIVE_STRING }),
});
const StopExecutionInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
});
const TestStateInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: smithyClient.SENSITIVE_STRING }),
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
    ...(obj.variables && { variables: smithyClient.SENSITIVE_STRING }),
});
const InspectionDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.input && { input: smithyClient.SENSITIVE_STRING }),
    ...(obj.afterArguments && { afterArguments: smithyClient.SENSITIVE_STRING }),
    ...(obj.afterInputPath && { afterInputPath: smithyClient.SENSITIVE_STRING }),
    ...(obj.afterParameters && { afterParameters: smithyClient.SENSITIVE_STRING }),
    ...(obj.result && { result: smithyClient.SENSITIVE_STRING }),
    ...(obj.afterResultSelector && { afterResultSelector: smithyClient.SENSITIVE_STRING }),
    ...(obj.afterResultPath && { afterResultPath: smithyClient.SENSITIVE_STRING }),
    ...(obj.variables && { variables: smithyClient.SENSITIVE_STRING }),
});
const TestStateOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.output && { output: smithyClient.SENSITIVE_STRING }),
    ...(obj.error && { error: smithyClient.SENSITIVE_STRING }),
    ...(obj.cause && { cause: smithyClient.SENSITIVE_STRING }),
    ...(obj.inspectionData && { inspectionData: smithyClient.SENSITIVE_STRING }),
});
const UpdateStateMachineInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: smithyClient.SENSITIVE_STRING }),
    ...(obj.versionDescription && { versionDescription: smithyClient.SENSITIVE_STRING }),
});
const UpdateStateMachineAliasInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.description && { description: smithyClient.SENSITIVE_STRING }),
});
const ValidateStateMachineDefinitionInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: smithyClient.SENSITIVE_STRING }),
});
const ValidateStateMachineDefinitionDiagnosticFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.code && { code: smithyClient.SENSITIVE_STRING }),
    ...(obj.message && { message: smithyClient.SENSITIVE_STRING }),
    ...(obj.location && { location: smithyClient.SENSITIVE_STRING }),
});
const ValidateStateMachineDefinitionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.diagnostics && {
        diagnostics: obj.diagnostics.map((item) => ValidateStateMachineDefinitionDiagnosticFilterSensitiveLog(item)),
    }),
});

const se_CreateActivityCommand = async (input, context) => {
    const headers = sharedHeaders("CreateActivity");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateStateMachineCommand = async (input, context) => {
    const headers = sharedHeaders("CreateStateMachine");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateStateMachineAliasCommand = async (input, context) => {
    const headers = sharedHeaders("CreateStateMachineAlias");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteActivityCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteActivity");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteStateMachineCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteStateMachine");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteStateMachineAliasCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteStateMachineAlias");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteStateMachineVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteStateMachineVersion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeActivityCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeActivity");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeExecution");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMapRunCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMapRun");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStateMachineCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeStateMachine");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStateMachineAliasCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeStateMachineAlias");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStateMachineForExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeStateMachineForExecution");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetActivityTaskCommand = async (input, context) => {
    const headers = sharedHeaders("GetActivityTask");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetExecutionHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("GetExecutionHistory");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListActivitiesCommand = async (input, context) => {
    const headers = sharedHeaders("ListActivities");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListExecutions");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMapRunsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMapRuns");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStateMachineAliasesCommand = async (input, context) => {
    const headers = sharedHeaders("ListStateMachineAliases");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStateMachinesCommand = async (input, context) => {
    const headers = sharedHeaders("ListStateMachines");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStateMachineVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListStateMachineVersions");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PublishStateMachineVersionCommand = async (input, context) => {
    const headers = sharedHeaders("PublishStateMachineVersion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RedriveExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("RedriveExecution");
    let body;
    body = JSON.stringify(se_RedriveExecutionInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SendTaskFailureCommand = async (input, context) => {
    const headers = sharedHeaders("SendTaskFailure");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SendTaskHeartbeatCommand = async (input, context) => {
    const headers = sharedHeaders("SendTaskHeartbeat");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SendTaskSuccessCommand = async (input, context) => {
    const headers = sharedHeaders("SendTaskSuccess");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StartExecution");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartSyncExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StartSyncExecution");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "sync-" + resolvedHostname;
        if (!protocolHttp.isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    return buildHttpRpcRequest(context, headers, "/", resolvedHostname, body);
};
const se_StopExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StopExecution");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TestStateCommand = async (input, context) => {
    const headers = sharedHeaders("TestState");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "sync-" + resolvedHostname;
        if (!protocolHttp.isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    return buildHttpRpcRequest(context, headers, "/", resolvedHostname, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateMapRunCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMapRun");
    let body;
    body = JSON.stringify(se_UpdateMapRunInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateStateMachineCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateStateMachine");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateStateMachineAliasCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateStateMachineAlias");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ValidateStateMachineDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("ValidateStateMachineDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_CreateActivityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateActivityOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateStateMachineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateStateMachineOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateStateMachineAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateStateMachineAliasOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteActivityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteStateMachineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteStateMachineAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteStateMachineVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeActivityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeActivityOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeExecutionOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMapRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeMapRunOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStateMachineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeStateMachineOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStateMachineAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeStateMachineAliasOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStateMachineForExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeStateMachineForExecutionOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetActivityTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetExecutionHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetExecutionHistoryOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListActivitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListActivitiesOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListExecutionsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMapRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListMapRunsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStateMachineAliasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListStateMachineAliasesOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStateMachinesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListStateMachinesOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStateMachineVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListStateMachineVersionsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PublishStateMachineVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_PublishStateMachineVersionOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RedriveExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_RedriveExecutionOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SendTaskFailureCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SendTaskHeartbeatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SendTaskSuccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartExecutionOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartSyncExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartSyncExecutionOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StopExecutionOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TestStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateMapRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateStateMachineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateStateMachineOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateStateMachineAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateStateMachineAliasOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ValidateStateMachineDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ActivityAlreadyExists":
        case "com.amazonaws.sfn#ActivityAlreadyExists":
            throw await de_ActivityAlreadyExistsRes(parsedOutput);
        case "ActivityLimitExceeded":
        case "com.amazonaws.sfn#ActivityLimitExceeded":
            throw await de_ActivityLimitExceededRes(parsedOutput);
        case "InvalidEncryptionConfiguration":
        case "com.amazonaws.sfn#InvalidEncryptionConfiguration":
            throw await de_InvalidEncryptionConfigurationRes(parsedOutput);
        case "InvalidName":
        case "com.amazonaws.sfn#InvalidName":
            throw await de_InvalidNameRes(parsedOutput);
        case "KmsAccessDeniedException":
        case "com.amazonaws.sfn#KmsAccessDeniedException":
            throw await de_KmsAccessDeniedExceptionRes(parsedOutput);
        case "KmsThrottlingException":
        case "com.amazonaws.sfn#KmsThrottlingException":
            throw await de_KmsThrottlingExceptionRes(parsedOutput);
        case "TooManyTags":
        case "com.amazonaws.sfn#TooManyTags":
            throw await de_TooManyTagsRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.sfn#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "InvalidArn":
        case "com.amazonaws.sfn#InvalidArn":
            throw await de_InvalidArnRes(parsedOutput);
        case "InvalidDefinition":
        case "com.amazonaws.sfn#InvalidDefinition":
            throw await de_InvalidDefinitionRes(parsedOutput);
        case "InvalidLoggingConfiguration":
        case "com.amazonaws.sfn#InvalidLoggingConfiguration":
            throw await de_InvalidLoggingConfigurationRes(parsedOutput);
        case "InvalidTracingConfiguration":
        case "com.amazonaws.sfn#InvalidTracingConfiguration":
            throw await de_InvalidTracingConfigurationRes(parsedOutput);
        case "StateMachineAlreadyExists":
        case "com.amazonaws.sfn#StateMachineAlreadyExists":
            throw await de_StateMachineAlreadyExistsRes(parsedOutput);
        case "StateMachineDeleting":
        case "com.amazonaws.sfn#StateMachineDeleting":
            throw await de_StateMachineDeletingRes(parsedOutput);
        case "StateMachineLimitExceeded":
        case "com.amazonaws.sfn#StateMachineLimitExceeded":
            throw await de_StateMachineLimitExceededRes(parsedOutput);
        case "StateMachineTypeNotSupported":
        case "com.amazonaws.sfn#StateMachineTypeNotSupported":
            throw await de_StateMachineTypeNotSupportedRes(parsedOutput);
        case "ValidationException":
        case "com.amazonaws.sfn#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput);
        case "ResourceNotFound":
        case "com.amazonaws.sfn#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.sfn#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput);
        case "ActivityDoesNotExist":
        case "com.amazonaws.sfn#ActivityDoesNotExist":
            throw await de_ActivityDoesNotExistRes(parsedOutput);
        case "ExecutionDoesNotExist":
        case "com.amazonaws.sfn#ExecutionDoesNotExist":
            throw await de_ExecutionDoesNotExistRes(parsedOutput);
        case "KmsInvalidStateException":
        case "com.amazonaws.sfn#KmsInvalidStateException":
            throw await de_KmsInvalidStateExceptionRes(parsedOutput);
        case "StateMachineDoesNotExist":
        case "com.amazonaws.sfn#StateMachineDoesNotExist":
            throw await de_StateMachineDoesNotExistRes(parsedOutput);
        case "ActivityWorkerLimitExceeded":
        case "com.amazonaws.sfn#ActivityWorkerLimitExceeded":
            throw await de_ActivityWorkerLimitExceededRes(parsedOutput);
        case "InvalidToken":
        case "com.amazonaws.sfn#InvalidToken":
            throw await de_InvalidTokenRes(parsedOutput);
        case "ExecutionLimitExceeded":
        case "com.amazonaws.sfn#ExecutionLimitExceeded":
            throw await de_ExecutionLimitExceededRes(parsedOutput);
        case "ExecutionNotRedrivable":
        case "com.amazonaws.sfn#ExecutionNotRedrivable":
            throw await de_ExecutionNotRedrivableRes(parsedOutput);
        case "TaskDoesNotExist":
        case "com.amazonaws.sfn#TaskDoesNotExist":
            throw await de_TaskDoesNotExistRes(parsedOutput);
        case "TaskTimedOut":
        case "com.amazonaws.sfn#TaskTimedOut":
            throw await de_TaskTimedOutRes(parsedOutput);
        case "InvalidOutput":
        case "com.amazonaws.sfn#InvalidOutput":
            throw await de_InvalidOutputRes(parsedOutput);
        case "ExecutionAlreadyExists":
        case "com.amazonaws.sfn#ExecutionAlreadyExists":
            throw await de_ExecutionAlreadyExistsRes(parsedOutput);
        case "InvalidExecutionInput":
        case "com.amazonaws.sfn#InvalidExecutionInput":
            throw await de_InvalidExecutionInputRes(parsedOutput);
        case "MissingRequiredParameter":
        case "com.amazonaws.sfn#MissingRequiredParameter":
            throw await de_MissingRequiredParameterRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ActivityAlreadyExistsRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ActivityAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ActivityDoesNotExistRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ActivityDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ActivityLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ActivityLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ActivityWorkerLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ActivityWorkerLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ExecutionAlreadyExistsRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ExecutionAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ExecutionDoesNotExistRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ExecutionDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ExecutionLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ExecutionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ExecutionNotRedrivableRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ExecutionNotRedrivable({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidArnRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidArn({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidDefinitionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidDefinition({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidEncryptionConfigurationRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidEncryptionConfiguration({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidExecutionInputRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidExecutionInput({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidLoggingConfigurationRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidLoggingConfiguration({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidNameRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidOutputRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidOutput({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidTokenRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidTracingConfigurationRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidTracingConfiguration({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KmsAccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new KmsAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KmsInvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new KmsInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KmsThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new KmsThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_MissingRequiredParameterRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new MissingRequiredParameter({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_StateMachineAlreadyExistsRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new StateMachineAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_StateMachineDeletingRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new StateMachineDeleting({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_StateMachineDoesNotExistRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new StateMachineDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_StateMachineLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new StateMachineLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_StateMachineTypeNotSupportedRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new StateMachineTypeNotSupported({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TaskDoesNotExistRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TaskDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TaskTimedOutRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TaskTimedOut({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TooManyTagsRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TooManyTags({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_RedriveExecutionInput = (input, context) => {
    return smithyClient.take(input, {
        clientToken: [true, (_) => _ ?? uuid.v4()],
        executionArn: [],
    });
};
const se_UpdateMapRunInput = (input, context) => {
    return smithyClient.take(input, {
        mapRunArn: [],
        maxConcurrency: [],
        toleratedFailureCount: [],
        toleratedFailurePercentage: smithyClient.serializeFloat,
    });
};
const de_ActivityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActivityListItem(entry);
    });
    return retVal;
};
const de_ActivityListItem = (output, context) => {
    return smithyClient.take(output, {
        activityArn: smithyClient.expectString,
        creationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        name: smithyClient.expectString,
    });
};
const de_CreateActivityOutput = (output, context) => {
    return smithyClient.take(output, {
        activityArn: smithyClient.expectString,
        creationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_CreateStateMachineAliasOutput = (output, context) => {
    return smithyClient.take(output, {
        creationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        stateMachineAliasArn: smithyClient.expectString,
    });
};
const de_CreateStateMachineOutput = (output, context) => {
    return smithyClient.take(output, {
        creationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        stateMachineArn: smithyClient.expectString,
        stateMachineVersionArn: smithyClient.expectString,
    });
};
const de_DescribeActivityOutput = (output, context) => {
    return smithyClient.take(output, {
        activityArn: smithyClient.expectString,
        creationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        encryptionConfiguration: smithyClient._json,
        name: smithyClient.expectString,
    });
};
const de_DescribeExecutionOutput = (output, context) => {
    return smithyClient.take(output, {
        cause: smithyClient.expectString,
        error: smithyClient.expectString,
        executionArn: smithyClient.expectString,
        input: smithyClient.expectString,
        inputDetails: smithyClient._json,
        mapRunArn: smithyClient.expectString,
        name: smithyClient.expectString,
        output: smithyClient.expectString,
        outputDetails: smithyClient._json,
        redriveCount: smithyClient.expectInt32,
        redriveDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        redriveStatus: smithyClient.expectString,
        redriveStatusReason: smithyClient.expectString,
        startDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        stateMachineAliasArn: smithyClient.expectString,
        stateMachineArn: smithyClient.expectString,
        stateMachineVersionArn: smithyClient.expectString,
        status: smithyClient.expectString,
        stopDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        traceHeader: smithyClient.expectString,
    });
};
const de_DescribeMapRunOutput = (output, context) => {
    return smithyClient.take(output, {
        executionArn: smithyClient.expectString,
        executionCounts: smithyClient._json,
        itemCounts: smithyClient._json,
        mapRunArn: smithyClient.expectString,
        maxConcurrency: smithyClient.expectInt32,
        redriveCount: smithyClient.expectInt32,
        redriveDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        startDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        status: smithyClient.expectString,
        stopDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        toleratedFailureCount: smithyClient.expectLong,
        toleratedFailurePercentage: smithyClient.limitedParseFloat32,
    });
};
const de_DescribeStateMachineAliasOutput = (output, context) => {
    return smithyClient.take(output, {
        creationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        description: smithyClient.expectString,
        name: smithyClient.expectString,
        routingConfiguration: smithyClient._json,
        stateMachineAliasArn: smithyClient.expectString,
        updateDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DescribeStateMachineForExecutionOutput = (output, context) => {
    return smithyClient.take(output, {
        definition: smithyClient.expectString,
        encryptionConfiguration: smithyClient._json,
        label: smithyClient.expectString,
        loggingConfiguration: smithyClient._json,
        mapRunArn: smithyClient.expectString,
        name: smithyClient.expectString,
        revisionId: smithyClient.expectString,
        roleArn: smithyClient.expectString,
        stateMachineArn: smithyClient.expectString,
        tracingConfiguration: smithyClient._json,
        updateDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        variableReferences: smithyClient._json,
    });
};
const de_DescribeStateMachineOutput = (output, context) => {
    return smithyClient.take(output, {
        creationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        definition: smithyClient.expectString,
        description: smithyClient.expectString,
        encryptionConfiguration: smithyClient._json,
        label: smithyClient.expectString,
        loggingConfiguration: smithyClient._json,
        name: smithyClient.expectString,
        revisionId: smithyClient.expectString,
        roleArn: smithyClient.expectString,
        stateMachineArn: smithyClient.expectString,
        status: smithyClient.expectString,
        tracingConfiguration: smithyClient._json,
        type: smithyClient.expectString,
        variableReferences: smithyClient._json,
    });
};
const de_ExecutionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExecutionListItem(entry);
    });
    return retVal;
};
const de_ExecutionListItem = (output, context) => {
    return smithyClient.take(output, {
        executionArn: smithyClient.expectString,
        itemCount: smithyClient.expectInt32,
        mapRunArn: smithyClient.expectString,
        name: smithyClient.expectString,
        redriveCount: smithyClient.expectInt32,
        redriveDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        startDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        stateMachineAliasArn: smithyClient.expectString,
        stateMachineArn: smithyClient.expectString,
        stateMachineVersionArn: smithyClient.expectString,
        status: smithyClient.expectString,
        stopDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_GetExecutionHistoryOutput = (output, context) => {
    return smithyClient.take(output, {
        events: (_) => de_HistoryEventList(_),
        nextToken: smithyClient.expectString,
    });
};
const de_HistoryEvent = (output, context) => {
    return smithyClient.take(output, {
        activityFailedEventDetails: smithyClient._json,
        activityScheduleFailedEventDetails: smithyClient._json,
        activityScheduledEventDetails: smithyClient._json,
        activityStartedEventDetails: smithyClient._json,
        activitySucceededEventDetails: smithyClient._json,
        activityTimedOutEventDetails: smithyClient._json,
        evaluationFailedEventDetails: smithyClient._json,
        executionAbortedEventDetails: smithyClient._json,
        executionFailedEventDetails: smithyClient._json,
        executionRedrivenEventDetails: smithyClient._json,
        executionStartedEventDetails: smithyClient._json,
        executionSucceededEventDetails: smithyClient._json,
        executionTimedOutEventDetails: smithyClient._json,
        id: smithyClient.expectLong,
        lambdaFunctionFailedEventDetails: smithyClient._json,
        lambdaFunctionScheduleFailedEventDetails: smithyClient._json,
        lambdaFunctionScheduledEventDetails: smithyClient._json,
        lambdaFunctionStartFailedEventDetails: smithyClient._json,
        lambdaFunctionSucceededEventDetails: smithyClient._json,
        lambdaFunctionTimedOutEventDetails: smithyClient._json,
        mapIterationAbortedEventDetails: smithyClient._json,
        mapIterationFailedEventDetails: smithyClient._json,
        mapIterationStartedEventDetails: smithyClient._json,
        mapIterationSucceededEventDetails: smithyClient._json,
        mapRunFailedEventDetails: smithyClient._json,
        mapRunRedrivenEventDetails: smithyClient._json,
        mapRunStartedEventDetails: smithyClient._json,
        mapStateStartedEventDetails: smithyClient._json,
        previousEventId: smithyClient.expectLong,
        stateEnteredEventDetails: smithyClient._json,
        stateExitedEventDetails: smithyClient._json,
        taskFailedEventDetails: smithyClient._json,
        taskScheduledEventDetails: smithyClient._json,
        taskStartFailedEventDetails: smithyClient._json,
        taskStartedEventDetails: smithyClient._json,
        taskSubmitFailedEventDetails: smithyClient._json,
        taskSubmittedEventDetails: smithyClient._json,
        taskSucceededEventDetails: smithyClient._json,
        taskTimedOutEventDetails: smithyClient._json,
        timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        type: smithyClient.expectString,
    });
};
const de_HistoryEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HistoryEvent(entry);
    });
    return retVal;
};
const de_ListActivitiesOutput = (output, context) => {
    return smithyClient.take(output, {
        activities: (_) => de_ActivityList(_),
        nextToken: smithyClient.expectString,
    });
};
const de_ListExecutionsOutput = (output, context) => {
    return smithyClient.take(output, {
        executions: (_) => de_ExecutionList(_),
        nextToken: smithyClient.expectString,
    });
};
const de_ListMapRunsOutput = (output, context) => {
    return smithyClient.take(output, {
        mapRuns: (_) => de_MapRunList(_),
        nextToken: smithyClient.expectString,
    });
};
const de_ListStateMachineAliasesOutput = (output, context) => {
    return smithyClient.take(output, {
        nextToken: smithyClient.expectString,
        stateMachineAliases: (_) => de_StateMachineAliasList(_),
    });
};
const de_ListStateMachinesOutput = (output, context) => {
    return smithyClient.take(output, {
        nextToken: smithyClient.expectString,
        stateMachines: (_) => de_StateMachineList(_),
    });
};
const de_ListStateMachineVersionsOutput = (output, context) => {
    return smithyClient.take(output, {
        nextToken: smithyClient.expectString,
        stateMachineVersions: (_) => de_StateMachineVersionList(_),
    });
};
const de_MapRunList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MapRunListItem(entry);
    });
    return retVal;
};
const de_MapRunListItem = (output, context) => {
    return smithyClient.take(output, {
        executionArn: smithyClient.expectString,
        mapRunArn: smithyClient.expectString,
        startDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        stateMachineArn: smithyClient.expectString,
        stopDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_PublishStateMachineVersionOutput = (output, context) => {
    return smithyClient.take(output, {
        creationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        stateMachineVersionArn: smithyClient.expectString,
    });
};
const de_RedriveExecutionOutput = (output, context) => {
    return smithyClient.take(output, {
        redriveDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_StartExecutionOutput = (output, context) => {
    return smithyClient.take(output, {
        executionArn: smithyClient.expectString,
        startDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_StartSyncExecutionOutput = (output, context) => {
    return smithyClient.take(output, {
        billingDetails: smithyClient._json,
        cause: smithyClient.expectString,
        error: smithyClient.expectString,
        executionArn: smithyClient.expectString,
        input: smithyClient.expectString,
        inputDetails: smithyClient._json,
        name: smithyClient.expectString,
        output: smithyClient.expectString,
        outputDetails: smithyClient._json,
        startDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        stateMachineArn: smithyClient.expectString,
        status: smithyClient.expectString,
        stopDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        traceHeader: smithyClient.expectString,
    });
};
const de_StateMachineAliasList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StateMachineAliasListItem(entry);
    });
    return retVal;
};
const de_StateMachineAliasListItem = (output, context) => {
    return smithyClient.take(output, {
        creationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        stateMachineAliasArn: smithyClient.expectString,
    });
};
const de_StateMachineList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StateMachineListItem(entry);
    });
    return retVal;
};
const de_StateMachineListItem = (output, context) => {
    return smithyClient.take(output, {
        creationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        name: smithyClient.expectString,
        stateMachineArn: smithyClient.expectString,
        type: smithyClient.expectString,
    });
};
const de_StateMachineVersionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StateMachineVersionListItem(entry);
    });
    return retVal;
};
const de_StateMachineVersionListItem = (output, context) => {
    return smithyClient.take(output, {
        creationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        stateMachineVersionArn: smithyClient.expectString,
    });
};
const de_StopExecutionOutput = (output, context) => {
    return smithyClient.take(output, {
        stopDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_UpdateStateMachineAliasOutput = (output, context) => {
    return smithyClient.take(output, {
        updateDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_UpdateStateMachineOutput = (output, context) => {
    return smithyClient.take(output, {
        revisionId: smithyClient.expectString,
        stateMachineVersionArn: smithyClient.expectString,
        updateDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(SFNServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `AWSStepFunctions.${operation}`,
    };
}

class CreateActivityCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "CreateActivity", {})
    .n("SFNClient", "CreateActivityCommand")
    .f(void 0, void 0)
    .ser(se_CreateActivityCommand)
    .de(de_CreateActivityCommand)
    .build() {
}

class CreateStateMachineAliasCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "CreateStateMachineAlias", {})
    .n("SFNClient", "CreateStateMachineAliasCommand")
    .f(CreateStateMachineAliasInputFilterSensitiveLog, void 0)
    .ser(se_CreateStateMachineAliasCommand)
    .de(de_CreateStateMachineAliasCommand)
    .build() {
}

class CreateStateMachineCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "CreateStateMachine", {})
    .n("SFNClient", "CreateStateMachineCommand")
    .f(CreateStateMachineInputFilterSensitiveLog, void 0)
    .ser(se_CreateStateMachineCommand)
    .de(de_CreateStateMachineCommand)
    .build() {
}

class DeleteActivityCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "DeleteActivity", {})
    .n("SFNClient", "DeleteActivityCommand")
    .f(void 0, void 0)
    .ser(se_DeleteActivityCommand)
    .de(de_DeleteActivityCommand)
    .build() {
}

class DeleteStateMachineAliasCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "DeleteStateMachineAlias", {})
    .n("SFNClient", "DeleteStateMachineAliasCommand")
    .f(void 0, void 0)
    .ser(se_DeleteStateMachineAliasCommand)
    .de(de_DeleteStateMachineAliasCommand)
    .build() {
}

class DeleteStateMachineCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "DeleteStateMachine", {})
    .n("SFNClient", "DeleteStateMachineCommand")
    .f(void 0, void 0)
    .ser(se_DeleteStateMachineCommand)
    .de(de_DeleteStateMachineCommand)
    .build() {
}

class DeleteStateMachineVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "DeleteStateMachineVersion", {})
    .n("SFNClient", "DeleteStateMachineVersionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteStateMachineVersionCommand)
    .de(de_DeleteStateMachineVersionCommand)
    .build() {
}

class DescribeActivityCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "DescribeActivity", {})
    .n("SFNClient", "DescribeActivityCommand")
    .f(void 0, void 0)
    .ser(se_DescribeActivityCommand)
    .de(de_DescribeActivityCommand)
    .build() {
}

class DescribeExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "DescribeExecution", {})
    .n("SFNClient", "DescribeExecutionCommand")
    .f(void 0, DescribeExecutionOutputFilterSensitiveLog)
    .ser(se_DescribeExecutionCommand)
    .de(de_DescribeExecutionCommand)
    .build() {
}

class DescribeMapRunCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "DescribeMapRun", {})
    .n("SFNClient", "DescribeMapRunCommand")
    .f(void 0, void 0)
    .ser(se_DescribeMapRunCommand)
    .de(de_DescribeMapRunCommand)
    .build() {
}

class DescribeStateMachineAliasCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "DescribeStateMachineAlias", {})
    .n("SFNClient", "DescribeStateMachineAliasCommand")
    .f(void 0, DescribeStateMachineAliasOutputFilterSensitiveLog)
    .ser(se_DescribeStateMachineAliasCommand)
    .de(de_DescribeStateMachineAliasCommand)
    .build() {
}

class DescribeStateMachineCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "DescribeStateMachine", {})
    .n("SFNClient", "DescribeStateMachineCommand")
    .f(void 0, DescribeStateMachineOutputFilterSensitiveLog)
    .ser(se_DescribeStateMachineCommand)
    .de(de_DescribeStateMachineCommand)
    .build() {
}

class DescribeStateMachineForExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "DescribeStateMachineForExecution", {})
    .n("SFNClient", "DescribeStateMachineForExecutionCommand")
    .f(void 0, DescribeStateMachineForExecutionOutputFilterSensitiveLog)
    .ser(se_DescribeStateMachineForExecutionCommand)
    .de(de_DescribeStateMachineForExecutionCommand)
    .build() {
}

class GetActivityTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "GetActivityTask", {})
    .n("SFNClient", "GetActivityTaskCommand")
    .f(void 0, GetActivityTaskOutputFilterSensitiveLog)
    .ser(se_GetActivityTaskCommand)
    .de(de_GetActivityTaskCommand)
    .build() {
}

class GetExecutionHistoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "GetExecutionHistory", {})
    .n("SFNClient", "GetExecutionHistoryCommand")
    .f(void 0, GetExecutionHistoryOutputFilterSensitiveLog)
    .ser(se_GetExecutionHistoryCommand)
    .de(de_GetExecutionHistoryCommand)
    .build() {
}

class ListActivitiesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "ListActivities", {})
    .n("SFNClient", "ListActivitiesCommand")
    .f(void 0, void 0)
    .ser(se_ListActivitiesCommand)
    .de(de_ListActivitiesCommand)
    .build() {
}

class ListExecutionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "ListExecutions", {})
    .n("SFNClient", "ListExecutionsCommand")
    .f(void 0, void 0)
    .ser(se_ListExecutionsCommand)
    .de(de_ListExecutionsCommand)
    .build() {
}

class ListMapRunsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "ListMapRuns", {})
    .n("SFNClient", "ListMapRunsCommand")
    .f(void 0, void 0)
    .ser(se_ListMapRunsCommand)
    .de(de_ListMapRunsCommand)
    .build() {
}

class ListStateMachineAliasesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "ListStateMachineAliases", {})
    .n("SFNClient", "ListStateMachineAliasesCommand")
    .f(void 0, void 0)
    .ser(se_ListStateMachineAliasesCommand)
    .de(de_ListStateMachineAliasesCommand)
    .build() {
}

class ListStateMachinesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "ListStateMachines", {})
    .n("SFNClient", "ListStateMachinesCommand")
    .f(void 0, void 0)
    .ser(se_ListStateMachinesCommand)
    .de(de_ListStateMachinesCommand)
    .build() {
}

class ListStateMachineVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "ListStateMachineVersions", {})
    .n("SFNClient", "ListStateMachineVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListStateMachineVersionsCommand)
    .de(de_ListStateMachineVersionsCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "ListTagsForResource", {})
    .n("SFNClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class PublishStateMachineVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "PublishStateMachineVersion", {})
    .n("SFNClient", "PublishStateMachineVersionCommand")
    .f(PublishStateMachineVersionInputFilterSensitiveLog, void 0)
    .ser(se_PublishStateMachineVersionCommand)
    .de(de_PublishStateMachineVersionCommand)
    .build() {
}

class RedriveExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "RedriveExecution", {})
    .n("SFNClient", "RedriveExecutionCommand")
    .f(void 0, void 0)
    .ser(se_RedriveExecutionCommand)
    .de(de_RedriveExecutionCommand)
    .build() {
}

class SendTaskFailureCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "SendTaskFailure", {})
    .n("SFNClient", "SendTaskFailureCommand")
    .f(SendTaskFailureInputFilterSensitiveLog, void 0)
    .ser(se_SendTaskFailureCommand)
    .de(de_SendTaskFailureCommand)
    .build() {
}

class SendTaskHeartbeatCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "SendTaskHeartbeat", {})
    .n("SFNClient", "SendTaskHeartbeatCommand")
    .f(void 0, void 0)
    .ser(se_SendTaskHeartbeatCommand)
    .de(de_SendTaskHeartbeatCommand)
    .build() {
}

class SendTaskSuccessCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "SendTaskSuccess", {})
    .n("SFNClient", "SendTaskSuccessCommand")
    .f(SendTaskSuccessInputFilterSensitiveLog, void 0)
    .ser(se_SendTaskSuccessCommand)
    .de(de_SendTaskSuccessCommand)
    .build() {
}

class StartExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "StartExecution", {})
    .n("SFNClient", "StartExecutionCommand")
    .f(StartExecutionInputFilterSensitiveLog, void 0)
    .ser(se_StartExecutionCommand)
    .de(de_StartExecutionCommand)
    .build() {
}

class StartSyncExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "StartSyncExecution", {})
    .n("SFNClient", "StartSyncExecutionCommand")
    .f(StartSyncExecutionInputFilterSensitiveLog, StartSyncExecutionOutputFilterSensitiveLog)
    .ser(se_StartSyncExecutionCommand)
    .de(de_StartSyncExecutionCommand)
    .build() {
}

class StopExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "StopExecution", {})
    .n("SFNClient", "StopExecutionCommand")
    .f(StopExecutionInputFilterSensitiveLog, void 0)
    .ser(se_StopExecutionCommand)
    .de(de_StopExecutionCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "TagResource", {})
    .n("SFNClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class TestStateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "TestState", {})
    .n("SFNClient", "TestStateCommand")
    .f(TestStateInputFilterSensitiveLog, TestStateOutputFilterSensitiveLog)
    .ser(se_TestStateCommand)
    .de(de_TestStateCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "UntagResource", {})
    .n("SFNClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateMapRunCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "UpdateMapRun", {})
    .n("SFNClient", "UpdateMapRunCommand")
    .f(void 0, void 0)
    .ser(se_UpdateMapRunCommand)
    .de(de_UpdateMapRunCommand)
    .build() {
}

class UpdateStateMachineAliasCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "UpdateStateMachineAlias", {})
    .n("SFNClient", "UpdateStateMachineAliasCommand")
    .f(UpdateStateMachineAliasInputFilterSensitiveLog, void 0)
    .ser(se_UpdateStateMachineAliasCommand)
    .de(de_UpdateStateMachineAliasCommand)
    .build() {
}

class UpdateStateMachineCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "UpdateStateMachine", {})
    .n("SFNClient", "UpdateStateMachineCommand")
    .f(UpdateStateMachineInputFilterSensitiveLog, void 0)
    .ser(se_UpdateStateMachineCommand)
    .de(de_UpdateStateMachineCommand)
    .build() {
}

class ValidateStateMachineDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSStepFunctions", "ValidateStateMachineDefinition", {})
    .n("SFNClient", "ValidateStateMachineDefinitionCommand")
    .f(ValidateStateMachineDefinitionInputFilterSensitiveLog, ValidateStateMachineDefinitionOutputFilterSensitiveLog)
    .ser(se_ValidateStateMachineDefinitionCommand)
    .de(de_ValidateStateMachineDefinitionCommand)
    .build() {
}

const commands = {
    CreateActivityCommand,
    CreateStateMachineCommand,
    CreateStateMachineAliasCommand,
    DeleteActivityCommand,
    DeleteStateMachineCommand,
    DeleteStateMachineAliasCommand,
    DeleteStateMachineVersionCommand,
    DescribeActivityCommand,
    DescribeExecutionCommand,
    DescribeMapRunCommand,
    DescribeStateMachineCommand,
    DescribeStateMachineAliasCommand,
    DescribeStateMachineForExecutionCommand,
    GetActivityTaskCommand,
    GetExecutionHistoryCommand,
    ListActivitiesCommand,
    ListExecutionsCommand,
    ListMapRunsCommand,
    ListStateMachineAliasesCommand,
    ListStateMachinesCommand,
    ListStateMachineVersionsCommand,
    ListTagsForResourceCommand,
    PublishStateMachineVersionCommand,
    RedriveExecutionCommand,
    SendTaskFailureCommand,
    SendTaskHeartbeatCommand,
    SendTaskSuccessCommand,
    StartExecutionCommand,
    StartSyncExecutionCommand,
    StopExecutionCommand,
    TagResourceCommand,
    TestStateCommand,
    UntagResourceCommand,
    UpdateMapRunCommand,
    UpdateStateMachineCommand,
    UpdateStateMachineAliasCommand,
    ValidateStateMachineDefinitionCommand,
};
class SFN extends SFNClient {
}
smithyClient.createAggregatedClient(commands, SFN);

const paginateGetExecutionHistory = core.createPaginator(SFNClient, GetExecutionHistoryCommand, "nextToken", "nextToken", "maxResults");

const paginateListActivities = core.createPaginator(SFNClient, ListActivitiesCommand, "nextToken", "nextToken", "maxResults");

const paginateListExecutions = core.createPaginator(SFNClient, ListExecutionsCommand, "nextToken", "nextToken", "maxResults");

const paginateListMapRuns = core.createPaginator(SFNClient, ListMapRunsCommand, "nextToken", "nextToken", "maxResults");

const paginateListStateMachines = core.createPaginator(SFNClient, ListStateMachinesCommand, "nextToken", "nextToken", "maxResults");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.ActivityAlreadyExists = ActivityAlreadyExists;
exports.ActivityDoesNotExist = ActivityDoesNotExist;
exports.ActivityFailedEventDetailsFilterSensitiveLog = ActivityFailedEventDetailsFilterSensitiveLog;
exports.ActivityLimitExceeded = ActivityLimitExceeded;
exports.ActivityScheduleFailedEventDetailsFilterSensitiveLog = ActivityScheduleFailedEventDetailsFilterSensitiveLog;
exports.ActivityScheduledEventDetailsFilterSensitiveLog = ActivityScheduledEventDetailsFilterSensitiveLog;
exports.ActivitySucceededEventDetailsFilterSensitiveLog = ActivitySucceededEventDetailsFilterSensitiveLog;
exports.ActivityTimedOutEventDetailsFilterSensitiveLog = ActivityTimedOutEventDetailsFilterSensitiveLog;
exports.ActivityWorkerLimitExceeded = ActivityWorkerLimitExceeded;
exports.ConflictException = ConflictException;
exports.CreateActivityCommand = CreateActivityCommand;
exports.CreateStateMachineAliasCommand = CreateStateMachineAliasCommand;
exports.CreateStateMachineAliasInputFilterSensitiveLog = CreateStateMachineAliasInputFilterSensitiveLog;
exports.CreateStateMachineCommand = CreateStateMachineCommand;
exports.CreateStateMachineInputFilterSensitiveLog = CreateStateMachineInputFilterSensitiveLog;
exports.DeleteActivityCommand = DeleteActivityCommand;
exports.DeleteStateMachineAliasCommand = DeleteStateMachineAliasCommand;
exports.DeleteStateMachineCommand = DeleteStateMachineCommand;
exports.DeleteStateMachineVersionCommand = DeleteStateMachineVersionCommand;
exports.DescribeActivityCommand = DescribeActivityCommand;
exports.DescribeExecutionCommand = DescribeExecutionCommand;
exports.DescribeExecutionOutputFilterSensitiveLog = DescribeExecutionOutputFilterSensitiveLog;
exports.DescribeMapRunCommand = DescribeMapRunCommand;
exports.DescribeStateMachineAliasCommand = DescribeStateMachineAliasCommand;
exports.DescribeStateMachineAliasOutputFilterSensitiveLog = DescribeStateMachineAliasOutputFilterSensitiveLog;
exports.DescribeStateMachineCommand = DescribeStateMachineCommand;
exports.DescribeStateMachineForExecutionCommand = DescribeStateMachineForExecutionCommand;
exports.DescribeStateMachineForExecutionOutputFilterSensitiveLog = DescribeStateMachineForExecutionOutputFilterSensitiveLog;
exports.DescribeStateMachineOutputFilterSensitiveLog = DescribeStateMachineOutputFilterSensitiveLog;
exports.EncryptionType = EncryptionType;
exports.EvaluationFailedEventDetailsFilterSensitiveLog = EvaluationFailedEventDetailsFilterSensitiveLog;
exports.ExecutionAbortedEventDetailsFilterSensitiveLog = ExecutionAbortedEventDetailsFilterSensitiveLog;
exports.ExecutionAlreadyExists = ExecutionAlreadyExists;
exports.ExecutionDoesNotExist = ExecutionDoesNotExist;
exports.ExecutionFailedEventDetailsFilterSensitiveLog = ExecutionFailedEventDetailsFilterSensitiveLog;
exports.ExecutionLimitExceeded = ExecutionLimitExceeded;
exports.ExecutionNotRedrivable = ExecutionNotRedrivable;
exports.ExecutionRedriveFilter = ExecutionRedriveFilter;
exports.ExecutionRedriveStatus = ExecutionRedriveStatus;
exports.ExecutionStartedEventDetailsFilterSensitiveLog = ExecutionStartedEventDetailsFilterSensitiveLog;
exports.ExecutionStatus = ExecutionStatus;
exports.ExecutionSucceededEventDetailsFilterSensitiveLog = ExecutionSucceededEventDetailsFilterSensitiveLog;
exports.ExecutionTimedOutEventDetailsFilterSensitiveLog = ExecutionTimedOutEventDetailsFilterSensitiveLog;
exports.GetActivityTaskCommand = GetActivityTaskCommand;
exports.GetActivityTaskOutputFilterSensitiveLog = GetActivityTaskOutputFilterSensitiveLog;
exports.GetExecutionHistoryCommand = GetExecutionHistoryCommand;
exports.GetExecutionHistoryOutputFilterSensitiveLog = GetExecutionHistoryOutputFilterSensitiveLog;
exports.HistoryEventFilterSensitiveLog = HistoryEventFilterSensitiveLog;
exports.HistoryEventType = HistoryEventType;
exports.IncludedData = IncludedData;
exports.InspectionDataFilterSensitiveLog = InspectionDataFilterSensitiveLog;
exports.InspectionLevel = InspectionLevel;
exports.InvalidArn = InvalidArn;
exports.InvalidDefinition = InvalidDefinition;
exports.InvalidEncryptionConfiguration = InvalidEncryptionConfiguration;
exports.InvalidExecutionInput = InvalidExecutionInput;
exports.InvalidLoggingConfiguration = InvalidLoggingConfiguration;
exports.InvalidName = InvalidName;
exports.InvalidOutput = InvalidOutput;
exports.InvalidToken = InvalidToken;
exports.InvalidTracingConfiguration = InvalidTracingConfiguration;
exports.KmsAccessDeniedException = KmsAccessDeniedException;
exports.KmsInvalidStateException = KmsInvalidStateException;
exports.KmsKeyState = KmsKeyState;
exports.KmsThrottlingException = KmsThrottlingException;
exports.LambdaFunctionFailedEventDetailsFilterSensitiveLog = LambdaFunctionFailedEventDetailsFilterSensitiveLog;
exports.LambdaFunctionScheduleFailedEventDetailsFilterSensitiveLog = LambdaFunctionScheduleFailedEventDetailsFilterSensitiveLog;
exports.LambdaFunctionScheduledEventDetailsFilterSensitiveLog = LambdaFunctionScheduledEventDetailsFilterSensitiveLog;
exports.LambdaFunctionStartFailedEventDetailsFilterSensitiveLog = LambdaFunctionStartFailedEventDetailsFilterSensitiveLog;
exports.LambdaFunctionSucceededEventDetailsFilterSensitiveLog = LambdaFunctionSucceededEventDetailsFilterSensitiveLog;
exports.LambdaFunctionTimedOutEventDetailsFilterSensitiveLog = LambdaFunctionTimedOutEventDetailsFilterSensitiveLog;
exports.ListActivitiesCommand = ListActivitiesCommand;
exports.ListExecutionsCommand = ListExecutionsCommand;
exports.ListMapRunsCommand = ListMapRunsCommand;
exports.ListStateMachineAliasesCommand = ListStateMachineAliasesCommand;
exports.ListStateMachineVersionsCommand = ListStateMachineVersionsCommand;
exports.ListStateMachinesCommand = ListStateMachinesCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.LogLevel = LogLevel;
exports.MapRunFailedEventDetailsFilterSensitiveLog = MapRunFailedEventDetailsFilterSensitiveLog;
exports.MapRunStatus = MapRunStatus;
exports.MissingRequiredParameter = MissingRequiredParameter;
exports.PublishStateMachineVersionCommand = PublishStateMachineVersionCommand;
exports.PublishStateMachineVersionInputFilterSensitiveLog = PublishStateMachineVersionInputFilterSensitiveLog;
exports.RedriveExecutionCommand = RedriveExecutionCommand;
exports.ResourceNotFound = ResourceNotFound;
exports.SFN = SFN;
exports.SFNClient = SFNClient;
exports.SFNServiceException = SFNServiceException;
exports.SendTaskFailureCommand = SendTaskFailureCommand;
exports.SendTaskFailureInputFilterSensitiveLog = SendTaskFailureInputFilterSensitiveLog;
exports.SendTaskHeartbeatCommand = SendTaskHeartbeatCommand;
exports.SendTaskSuccessCommand = SendTaskSuccessCommand;
exports.SendTaskSuccessInputFilterSensitiveLog = SendTaskSuccessInputFilterSensitiveLog;
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
exports.StartExecutionCommand = StartExecutionCommand;
exports.StartExecutionInputFilterSensitiveLog = StartExecutionInputFilterSensitiveLog;
exports.StartSyncExecutionCommand = StartSyncExecutionCommand;
exports.StartSyncExecutionInputFilterSensitiveLog = StartSyncExecutionInputFilterSensitiveLog;
exports.StartSyncExecutionOutputFilterSensitiveLog = StartSyncExecutionOutputFilterSensitiveLog;
exports.StateEnteredEventDetailsFilterSensitiveLog = StateEnteredEventDetailsFilterSensitiveLog;
exports.StateExitedEventDetailsFilterSensitiveLog = StateExitedEventDetailsFilterSensitiveLog;
exports.StateMachineAlreadyExists = StateMachineAlreadyExists;
exports.StateMachineDeleting = StateMachineDeleting;
exports.StateMachineDoesNotExist = StateMachineDoesNotExist;
exports.StateMachineLimitExceeded = StateMachineLimitExceeded;
exports.StateMachineStatus = StateMachineStatus;
exports.StateMachineType = StateMachineType;
exports.StateMachineTypeNotSupported = StateMachineTypeNotSupported;
exports.StopExecutionCommand = StopExecutionCommand;
exports.StopExecutionInputFilterSensitiveLog = StopExecutionInputFilterSensitiveLog;
exports.SyncExecutionStatus = SyncExecutionStatus;
exports.TagResourceCommand = TagResourceCommand;
exports.TaskDoesNotExist = TaskDoesNotExist;
exports.TaskFailedEventDetailsFilterSensitiveLog = TaskFailedEventDetailsFilterSensitiveLog;
exports.TaskScheduledEventDetailsFilterSensitiveLog = TaskScheduledEventDetailsFilterSensitiveLog;
exports.TaskStartFailedEventDetailsFilterSensitiveLog = TaskStartFailedEventDetailsFilterSensitiveLog;
exports.TaskSubmitFailedEventDetailsFilterSensitiveLog = TaskSubmitFailedEventDetailsFilterSensitiveLog;
exports.TaskSubmittedEventDetailsFilterSensitiveLog = TaskSubmittedEventDetailsFilterSensitiveLog;
exports.TaskSucceededEventDetailsFilterSensitiveLog = TaskSucceededEventDetailsFilterSensitiveLog;
exports.TaskTimedOut = TaskTimedOut;
exports.TaskTimedOutEventDetailsFilterSensitiveLog = TaskTimedOutEventDetailsFilterSensitiveLog;
exports.TestExecutionStatus = TestExecutionStatus;
exports.TestStateCommand = TestStateCommand;
exports.TestStateInputFilterSensitiveLog = TestStateInputFilterSensitiveLog;
exports.TestStateOutputFilterSensitiveLog = TestStateOutputFilterSensitiveLog;
exports.TooManyTags = TooManyTags;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateMapRunCommand = UpdateMapRunCommand;
exports.UpdateStateMachineAliasCommand = UpdateStateMachineAliasCommand;
exports.UpdateStateMachineAliasInputFilterSensitiveLog = UpdateStateMachineAliasInputFilterSensitiveLog;
exports.UpdateStateMachineCommand = UpdateStateMachineCommand;
exports.UpdateStateMachineInputFilterSensitiveLog = UpdateStateMachineInputFilterSensitiveLog;
exports.ValidateStateMachineDefinitionCommand = ValidateStateMachineDefinitionCommand;
exports.ValidateStateMachineDefinitionDiagnosticFilterSensitiveLog = ValidateStateMachineDefinitionDiagnosticFilterSensitiveLog;
exports.ValidateStateMachineDefinitionInputFilterSensitiveLog = ValidateStateMachineDefinitionInputFilterSensitiveLog;
exports.ValidateStateMachineDefinitionOutputFilterSensitiveLog = ValidateStateMachineDefinitionOutputFilterSensitiveLog;
exports.ValidateStateMachineDefinitionResultCode = ValidateStateMachineDefinitionResultCode;
exports.ValidateStateMachineDefinitionSeverity = ValidateStateMachineDefinitionSeverity;
exports.ValidationException = ValidationException;
exports.ValidationExceptionReason = ValidationExceptionReason;
exports.paginateGetExecutionHistory = paginateGetExecutionHistory;
exports.paginateListActivities = paginateListActivities;
exports.paginateListExecutions = paginateListExecutions;
exports.paginateListMapRuns = paginateListMapRuns;
exports.paginateListStateMachines = paginateListStateMachines;
