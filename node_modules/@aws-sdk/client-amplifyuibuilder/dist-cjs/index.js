'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "amplifyuibuilder",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class AmplifyUIBuilderClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultAmplifyUIBuilderHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class AmplifyUIBuilderServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, AmplifyUIBuilderServiceException.prototype);
    }
}

const CodegenJobGenericDataSourceType = {
    DATA_STORE: "DataStore",
};
const CodegenGenericDataFieldDataType = {
    AWS_DATE: "AWSDate",
    AWS_DATE_TIME: "AWSDateTime",
    AWS_EMAIL: "AWSEmail",
    AWS_IP_ADDRESS: "AWSIPAddress",
    AWS_JSON: "AWSJSON",
    AWS_PHONE: "AWSPhone",
    AWS_TIME: "AWSTime",
    AWS_TIMESTAMP: "AWSTimestamp",
    AWS_URL: "AWSURL",
    BOOLEAN: "Boolean",
    ENUM: "Enum",
    FLOAT: "Float",
    ID: "ID",
    INT: "Int",
    MODEL: "Model",
    NON_MODEL: "NonModel",
    STRING: "String",
};
const GenericDataRelationshipType = {
    BELONGS_TO: "BELONGS_TO",
    HAS_MANY: "HAS_MANY",
    HAS_ONE: "HAS_ONE",
};
exports.ApiConfiguration = void 0;
(function (ApiConfiguration) {
    ApiConfiguration.visit = (value, visitor) => {
        if (value.graphQLConfig !== undefined)
            return visitor.graphQLConfig(value.graphQLConfig);
        if (value.dataStoreConfig !== undefined)
            return visitor.dataStoreConfig(value.dataStoreConfig);
        if (value.noApiConfig !== undefined)
            return visitor.noApiConfig(value.noApiConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.ApiConfiguration || (exports.ApiConfiguration = {}));
const JSModule = {
    ES2020: "es2020",
    ESNEXT: "esnext",
};
const JSScript = {
    JS: "js",
    JSX: "jsx",
    TSX: "tsx",
};
const JSTarget = {
    ES2015: "es2015",
    ES2020: "es2020",
};
exports.CodegenJobRenderConfig = void 0;
(function (CodegenJobRenderConfig) {
    CodegenJobRenderConfig.visit = (value, visitor) => {
        if (value.react !== undefined)
            return visitor.react(value.react);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.CodegenJobRenderConfig || (exports.CodegenJobRenderConfig = {}));
const CodegenJobStatus = {
    FAILED: "failed",
    IN_PROGRESS: "in_progress",
    SUCCEEDED: "succeeded",
};
class InternalServerException extends AmplifyUIBuilderServiceException {
    name = "InternalServerException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
class InvalidParameterException extends AmplifyUIBuilderServiceException {
    name = "InvalidParameterException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
class ResourceNotFoundException extends AmplifyUIBuilderServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
class ThrottlingException extends AmplifyUIBuilderServiceException {
    name = "ThrottlingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
const SortDirection = {
    ASC: "ASC",
    DESC: "DESC",
};
class ResourceConflictException extends AmplifyUIBuilderServiceException {
    name = "ResourceConflictException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceConflictException.prototype);
    }
}
class ServiceQuotaExceededException extends AmplifyUIBuilderServiceException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
const TokenProviders = {
    FIGMA: "figma",
};
const FixedPosition = {
    FIRST: "first",
};
exports.FieldPosition = void 0;
(function (FieldPosition) {
    FieldPosition.visit = (value, visitor) => {
        if (value.fixed !== undefined)
            return visitor.fixed(value.fixed);
        if (value.rightOf !== undefined)
            return visitor.rightOf(value.rightOf);
        if (value.below !== undefined)
            return visitor.below(value.below);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.FieldPosition || (exports.FieldPosition = {}));
const FormButtonsPosition = {
    BOTTOM: "bottom",
    TOP: "top",
    TOP_AND_BOTTOM: "top_and_bottom",
};
const FormDataSourceType = {
    CUSTOM: "Custom",
    DATASTORE: "DataStore",
};
const StorageAccessLevel = {
    PRIVATE: "private",
    PROTECTED: "protected",
    PUBLIC: "public",
};
const FormActionType = {
    CREATE: "create",
    UPDATE: "update",
};
const LabelDecorator = {
    NONE: "none",
    OPTIONAL: "optional",
    REQUIRED: "required",
};
exports.FormStyleConfig = void 0;
(function (FormStyleConfig) {
    FormStyleConfig.visit = (value, visitor) => {
        if (value.tokenReference !== undefined)
            return visitor.tokenReference(value.tokenReference);
        if (value.value !== undefined)
            return visitor.value(value.value);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.FormStyleConfig || (exports.FormStyleConfig = {}));
class UnauthorizedException extends AmplifyUIBuilderServiceException {
    name = "UnauthorizedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
    }
}
const ExchangeCodeForTokenRequestBodyFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.code && { code: smithyClient.SENSITIVE_STRING }),
    ...(obj.clientId && { clientId: smithyClient.SENSITIVE_STRING }),
});
const ExchangeCodeForTokenRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.request && { request: ExchangeCodeForTokenRequestBodyFilterSensitiveLog(obj.request) }),
});
const ExchangeCodeForTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.accessToken && { accessToken: smithyClient.SENSITIVE_STRING }),
    ...(obj.refreshToken && { refreshToken: smithyClient.SENSITIVE_STRING }),
});
const RefreshTokenRequestBodyFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.token && { token: smithyClient.SENSITIVE_STRING }),
    ...(obj.clientId && { clientId: smithyClient.SENSITIVE_STRING }),
});
const RefreshTokenRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.refreshTokenBody && { refreshTokenBody: RefreshTokenRequestBodyFilterSensitiveLog(obj.refreshTokenBody) }),
});
const RefreshTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.accessToken && { accessToken: smithyClient.SENSITIVE_STRING }),
});

const se_CreateComponentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/components");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = smithyClient.map({
        [_cT]: [, input[_cT] ?? uuid.v4()],
    });
    let body;
    if (input.componentToCreate !== undefined) {
        body = se_CreateComponentData(input.componentToCreate);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_CreateFormCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/forms");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = smithyClient.map({
        [_cT]: [, input[_cT] ?? uuid.v4()],
    });
    let body;
    if (input.formToCreate !== undefined) {
        body = se_CreateFormData(input.formToCreate);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_CreateThemeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/themes");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = smithyClient.map({
        [_cT]: [, input[_cT] ?? uuid.v4()],
    });
    let body;
    if (input.themeToCreate !== undefined) {
        body = se_CreateThemeData(input.themeToCreate);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_DeleteComponentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/components/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteFormCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/forms/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteThemeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/themes/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_ExchangeCodeForTokenCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tokens/{provider}");
    b.p("provider", () => input.provider, "{provider}", false);
    let body;
    if (input.request !== undefined) {
        body = smithyClient._json(input.request);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_ExportComponentsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/export/app/{appId}/environment/{environmentName}/components");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ExportFormsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/export/app/{appId}/environment/{environmentName}/forms");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ExportThemesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/export/app/{appId}/environment/{environmentName}/themes");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetCodegenJobCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/codegen-jobs/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetComponentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/components/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetFormCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/forms/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetMetadataCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/metadata");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetThemeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/themes/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListCodegenJobsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/codegen-jobs");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListComponentsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/components");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListFormsCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/forms");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListThemesCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/app/{appId}/environment/{environmentName}/themes");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = smithyClient.map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_PutMetadataFlagCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/metadata/features/{featureName}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("featureName", () => input.featureName, "{featureName}", false);
    let body;
    if (input.body !== undefined) {
        body = smithyClient._json(input.body);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_RefreshTokenCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tokens/{provider}/refresh");
    b.p("provider", () => input.provider, "{provider}", false);
    let body;
    if (input.refreshTokenBody !== undefined) {
        body = smithyClient._json(input.refreshTokenBody);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StartCodegenJobCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/codegen-jobs");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    const query = smithyClient.map({
        [_cT]: [, input[_cT] ?? uuid.v4()],
    });
    let body;
    if (input.codegenJobToCreate !== undefined) {
        body = smithyClient._json(input.codegenJobToCreate);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_TagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UntagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = smithyClient.map({
        [_tK]: [smithyClient.expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateComponentCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/components/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    const query = smithyClient.map({
        [_cT]: [, input[_cT] ?? uuid.v4()],
    });
    let body;
    if (input.updatedComponent !== undefined) {
        body = se_UpdateComponentData(input.updatedComponent);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateFormCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/forms/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    const query = smithyClient.map({
        [_cT]: [, input[_cT] ?? uuid.v4()],
    });
    let body;
    if (input.updatedForm !== undefined) {
        body = se_UpdateFormData(input.updatedForm);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateThemeCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/app/{appId}/environment/{environmentName}/themes/{id}");
    b.p("appId", () => input.appId, "{appId}", false);
    b.p("environmentName", () => input.environmentName, "{environmentName}", false);
    b.p("id", () => input.id, "{id}", false);
    const query = smithyClient.map({
        [_cT]: [, input[_cT] ?? uuid.v4()],
    });
    let body;
    if (input.updatedTheme !== undefined) {
        body = se_UpdateThemeData(input.updatedTheme);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PATCH").h(headers).q(query).b(body);
    return b.build();
};
const de_CreateComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectObject(await core$1.parseJsonBody(output.body, context));
    contents.entity = de_Component(data);
    return contents;
};
const de_CreateFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectObject(await core$1.parseJsonBody(output.body, context));
    contents.entity = de_Form(data);
    return contents;
};
const de_CreateThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectObject(await core$1.parseJsonBody(output.body, context));
    contents.entity = de_Theme(data);
    return contents;
};
const de_DeleteComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_DeleteThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_ExchangeCodeForTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        accessToken: smithyClient.expectString,
        expiresIn: smithyClient.expectInt32,
        refreshToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ExportComponentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        entities: (_) => de_ComponentList(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ExportFormsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        entities: (_) => de_FormList(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ExportThemesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        entities: (_) => de_ThemeList(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetCodegenJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectObject(await core$1.parseJsonBody(output.body, context));
    contents.job = de_CodegenJob(data);
    return contents;
};
const de_GetComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectObject(await core$1.parseJsonBody(output.body, context));
    contents.component = de_Component(data);
    return contents;
};
const de_GetFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectObject(await core$1.parseJsonBody(output.body, context));
    contents.form = de_Form(data);
    return contents;
};
const de_GetMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        features: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectObject(await core$1.parseJsonBody(output.body, context));
    contents.theme = de_Theme(data);
    return contents;
};
const de_ListCodegenJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        entities: (_) => de_CodegenJobSummaryList(_),
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListComponentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        entities: smithyClient._json,
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListFormsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        entities: smithyClient._json,
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListThemesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        entities: smithyClient._json,
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_PutMetadataFlagCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_RefreshTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        accessToken: smithyClient.expectString,
        expiresIn: smithyClient.expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartCodegenJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectObject(await core$1.parseJsonBody(output.body, context));
    contents.entity = de_CodegenJob(data);
    return contents;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UpdateComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectObject(await core$1.parseJsonBody(output.body, context));
    contents.entity = de_Component(data);
    return contents;
};
const de_UpdateFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectObject(await core$1.parseJsonBody(output.body, context));
    contents.entity = de_Form(data);
    return contents;
};
const de_UpdateThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectObject(await core$1.parseJsonBody(output.body, context));
    contents.entity = de_Theme(data);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput);
        case "ResourceConflictException":
        case "com.amazonaws.amplifyuibuilder#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.amplifyuibuilder#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.amplifyuibuilder#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "ThrottlingException":
        case "com.amazonaws.amplifyuibuilder#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput);
        case "UnauthorizedException":
        case "com.amazonaws.amplifyuibuilder#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = smithyClient.withBaseException(AmplifyUIBuilderServiceException);
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const se_ActionParameters = (input, context) => {
    return smithyClient.take(input, {
        anchor: (_) => se_ComponentProperty(_),
        fields: (_) => se_ComponentProperties(_),
        global: (_) => se_ComponentProperty(_),
        id: (_) => se_ComponentProperty(_),
        model: [],
        state: (_) => se_MutationActionSetStateParameter(_),
        target: (_) => se_ComponentProperty(_),
        type: (_) => se_ComponentProperty(_),
        url: (_) => se_ComponentProperty(_),
    });
};
const se_ComponentBindingProperties = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentBindingPropertiesValue(value);
        return acc;
    }, {});
};
const se_ComponentBindingPropertiesValue = (input, context) => {
    return smithyClient.take(input, {
        bindingProperties: (_) => se_ComponentBindingPropertiesValueProperties(_),
        defaultValue: [],
        type: [],
    });
};
const se_ComponentBindingPropertiesValueProperties = (input, context) => {
    return smithyClient.take(input, {
        bucket: [],
        defaultValue: [],
        field: [],
        key: [],
        model: [],
        predicates: (_) => se_PredicateList(_),
        slotName: [],
        userAttribute: [],
    });
};
const se_ComponentChild = (input, context) => {
    return smithyClient.take(input, {
        children: (_) => se_ComponentChildList(_),
        componentType: [],
        events: (_) => se_ComponentEvents(_),
        name: [],
        properties: (_) => se_ComponentProperties(_),
        sourceId: [],
    });
};
const se_ComponentChildList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ComponentChild(entry);
    });
};
const se_ComponentCollectionProperties = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentDataConfiguration(value);
        return acc;
    }, {});
};
const se_ComponentConditionProperty = (input, context) => {
    return smithyClient.take(input, {
        else: (_) => se_ComponentProperty(_),
        field: [],
        operand: [],
        operandType: [],
        operator: [],
        property: [],
        then: (_) => se_ComponentProperty(_),
    });
};
const se_ComponentDataConfiguration = (input, context) => {
    return smithyClient.take(input, {
        identifiers: smithyClient._json,
        model: [],
        predicate: (_) => se_Predicate(_),
        sort: smithyClient._json,
    });
};
const se_ComponentEvent = (input, context) => {
    return smithyClient.take(input, {
        action: [],
        bindingEvent: [],
        parameters: (_) => se_ActionParameters(_),
    });
};
const se_ComponentEvents = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentEvent(value);
        return acc;
    }, {});
};
const se_ComponentProperties = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentProperty(value);
        return acc;
    }, {});
};
const se_ComponentProperty = (input, context) => {
    return smithyClient.take(input, {
        bindingProperties: smithyClient._json,
        bindings: smithyClient._json,
        collectionBindingProperties: smithyClient._json,
        componentName: [],
        concat: (_) => se_ComponentPropertyList(_),
        condition: (_) => se_ComponentConditionProperty(_),
        configured: [],
        defaultValue: [],
        event: [],
        importedValue: [],
        model: [],
        property: [],
        type: [],
        userAttribute: [],
        value: [],
    });
};
const se_ComponentPropertyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ComponentProperty(entry);
    });
};
const se_CreateComponentData = (input, context) => {
    return smithyClient.take(input, {
        bindingProperties: (_) => se_ComponentBindingProperties(_),
        children: (_) => se_ComponentChildList(_),
        collectionProperties: (_) => se_ComponentCollectionProperties(_),
        componentType: [],
        events: (_) => se_ComponentEvents(_),
        name: [],
        overrides: smithyClient._json,
        properties: (_) => se_ComponentProperties(_),
        schemaVersion: [],
        sourceId: [],
        tags: smithyClient._json,
        variants: smithyClient._json,
    });
};
const se_CreateFormData = (input, context) => {
    return smithyClient.take(input, {
        cta: smithyClient._json,
        dataType: smithyClient._json,
        fields: (_) => se_FieldsMap(_),
        formActionType: [],
        labelDecorator: [],
        name: [],
        schemaVersion: [],
        sectionalElements: smithyClient._json,
        style: smithyClient._json,
        tags: smithyClient._json,
    });
};
const se_CreateThemeData = (input, context) => {
    return smithyClient.take(input, {
        name: [],
        overrides: (_) => se_ThemeValuesList(_),
        tags: smithyClient._json,
        values: (_) => se_ThemeValuesList(_),
    });
};
const se_FieldConfig = (input, context) => {
    return smithyClient.take(input, {
        excluded: [],
        inputType: (_) => se_FieldInputConfig(_),
        label: [],
        position: smithyClient._json,
        validations: smithyClient._json,
    });
};
const se_FieldInputConfig = (input, context) => {
    return smithyClient.take(input, {
        defaultChecked: [],
        defaultCountryCode: [],
        defaultValue: [],
        descriptiveText: [],
        fileUploaderConfig: smithyClient._json,
        isArray: [],
        maxValue: smithyClient.serializeFloat,
        minValue: smithyClient.serializeFloat,
        name: [],
        placeholder: [],
        readOnly: [],
        required: [],
        step: smithyClient.serializeFloat,
        type: [],
        value: [],
        valueMappings: (_) => se_ValueMappings(_),
    });
};
const se_FieldsMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_FieldConfig(value);
        return acc;
    }, {});
};
const se_FormInputValueProperty = (input, context) => {
    return smithyClient.take(input, {
        bindingProperties: smithyClient._json,
        concat: (_) => se_FormInputValuePropertyList(_),
        value: [],
    });
};
const se_FormInputValuePropertyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FormInputValueProperty(entry);
    });
};
const se_MutationActionSetStateParameter = (input, context) => {
    return smithyClient.take(input, {
        componentName: [],
        property: [],
        set: (_) => se_ComponentProperty(_),
    });
};
const se_Predicate = (input, context) => {
    return smithyClient.take(input, {
        and: (_) => se_PredicateList(_),
        field: [],
        operand: [],
        operandType: [],
        operator: [],
        or: (_) => se_PredicateList(_),
    });
};
const se_PredicateList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Predicate(entry);
    });
};
const se_ThemeValue = (input, context) => {
    return smithyClient.take(input, {
        children: (_) => se_ThemeValuesList(_),
        value: [],
    });
};
const se_ThemeValues = (input, context) => {
    return smithyClient.take(input, {
        key: [],
        value: (_) => se_ThemeValue(_),
    });
};
const se_ThemeValuesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ThemeValues(entry);
    });
};
const se_UpdateComponentData = (input, context) => {
    return smithyClient.take(input, {
        bindingProperties: (_) => se_ComponentBindingProperties(_),
        children: (_) => se_ComponentChildList(_),
        collectionProperties: (_) => se_ComponentCollectionProperties(_),
        componentType: [],
        events: (_) => se_ComponentEvents(_),
        id: [],
        name: [],
        overrides: smithyClient._json,
        properties: (_) => se_ComponentProperties(_),
        schemaVersion: [],
        sourceId: [],
        variants: smithyClient._json,
    });
};
const se_UpdateFormData = (input, context) => {
    return smithyClient.take(input, {
        cta: smithyClient._json,
        dataType: smithyClient._json,
        fields: (_) => se_FieldsMap(_),
        formActionType: [],
        labelDecorator: [],
        name: [],
        schemaVersion: [],
        sectionalElements: smithyClient._json,
        style: smithyClient._json,
    });
};
const se_UpdateThemeData = (input, context) => {
    return smithyClient.take(input, {
        id: [],
        name: [],
        overrides: (_) => se_ThemeValuesList(_),
        values: (_) => se_ThemeValuesList(_),
    });
};
const se_ValueMapping = (input, context) => {
    return smithyClient.take(input, {
        displayValue: (_) => se_FormInputValueProperty(_),
        value: (_) => se_FormInputValueProperty(_),
    });
};
const se_ValueMappingList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ValueMapping(entry);
    });
};
const se_ValueMappings = (input, context) => {
    return smithyClient.take(input, {
        bindingProperties: smithyClient._json,
        values: (_) => se_ValueMappingList(_),
    });
};
const de_ActionParameters = (output, context) => {
    return smithyClient.take(output, {
        anchor: (_) => de_ComponentProperty(_),
        fields: (_) => de_ComponentProperties(_),
        global: (_) => de_ComponentProperty(_),
        id: (_) => de_ComponentProperty(_),
        model: smithyClient.expectString,
        state: (_) => de_MutationActionSetStateParameter(_),
        target: (_) => de_ComponentProperty(_),
        type: (_) => de_ComponentProperty(_),
        url: (_) => de_ComponentProperty(_),
    });
};
const de_CodegenJob = (output, context) => {
    return smithyClient.take(output, {
        appId: smithyClient.expectString,
        asset: smithyClient._json,
        autoGenerateForms: smithyClient.expectBoolean,
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        dependencies: smithyClient._json,
        environmentName: smithyClient.expectString,
        features: smithyClient._json,
        genericDataSchema: smithyClient._json,
        id: smithyClient.expectString,
        modifiedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        renderConfig: (_) => smithyClient._json(core$1.awsExpectUnion(_)),
        status: smithyClient.expectString,
        statusMessage: smithyClient.expectString,
        tags: smithyClient._json,
    });
};
const de_CodegenJobSummary = (output, context) => {
    return smithyClient.take(output, {
        appId: smithyClient.expectString,
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        environmentName: smithyClient.expectString,
        id: smithyClient.expectString,
        modifiedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_CodegenJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CodegenJobSummary(entry);
    });
    return retVal;
};
const de_Component = (output, context) => {
    return smithyClient.take(output, {
        appId: smithyClient.expectString,
        bindingProperties: (_) => de_ComponentBindingProperties(_),
        children: (_) => de_ComponentChildList(_),
        collectionProperties: (_) => de_ComponentCollectionProperties(_),
        componentType: smithyClient.expectString,
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        environmentName: smithyClient.expectString,
        events: (_) => de_ComponentEvents(_),
        id: smithyClient.expectString,
        modifiedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        name: smithyClient.expectString,
        overrides: smithyClient._json,
        properties: (_) => de_ComponentProperties(_),
        schemaVersion: smithyClient.expectString,
        sourceId: smithyClient.expectString,
        tags: smithyClient._json,
        variants: smithyClient._json,
    });
};
const de_ComponentBindingProperties = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentBindingPropertiesValue(value);
        return acc;
    }, {});
};
const de_ComponentBindingPropertiesValue = (output, context) => {
    return smithyClient.take(output, {
        bindingProperties: (_) => de_ComponentBindingPropertiesValueProperties(_),
        defaultValue: smithyClient.expectString,
        type: smithyClient.expectString,
    });
};
const de_ComponentBindingPropertiesValueProperties = (output, context) => {
    return smithyClient.take(output, {
        bucket: smithyClient.expectString,
        defaultValue: smithyClient.expectString,
        field: smithyClient.expectString,
        key: smithyClient.expectString,
        model: smithyClient.expectString,
        predicates: (_) => de_PredicateList(_),
        slotName: smithyClient.expectString,
        userAttribute: smithyClient.expectString,
    });
};
const de_ComponentChild = (output, context) => {
    return smithyClient.take(output, {
        children: (_) => de_ComponentChildList(_),
        componentType: smithyClient.expectString,
        events: (_) => de_ComponentEvents(_),
        name: smithyClient.expectString,
        properties: (_) => de_ComponentProperties(_),
        sourceId: smithyClient.expectString,
    });
};
const de_ComponentChildList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComponentChild(entry);
    });
    return retVal;
};
const de_ComponentCollectionProperties = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentDataConfiguration(value);
        return acc;
    }, {});
};
const de_ComponentConditionProperty = (output, context) => {
    return smithyClient.take(output, {
        else: (_) => de_ComponentProperty(_),
        field: smithyClient.expectString,
        operand: smithyClient.expectString,
        operandType: smithyClient.expectString,
        operator: smithyClient.expectString,
        property: smithyClient.expectString,
        then: (_) => de_ComponentProperty(_),
    });
};
const de_ComponentDataConfiguration = (output, context) => {
    return smithyClient.take(output, {
        identifiers: smithyClient._json,
        model: smithyClient.expectString,
        predicate: (_) => de_Predicate(_),
        sort: smithyClient._json,
    });
};
const de_ComponentEvent = (output, context) => {
    return smithyClient.take(output, {
        action: smithyClient.expectString,
        bindingEvent: smithyClient.expectString,
        parameters: (_) => de_ActionParameters(_),
    });
};
const de_ComponentEvents = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentEvent(value);
        return acc;
    }, {});
};
const de_ComponentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Component(entry);
    });
    return retVal;
};
const de_ComponentProperties = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentProperty(value);
        return acc;
    }, {});
};
const de_ComponentProperty = (output, context) => {
    return smithyClient.take(output, {
        bindingProperties: smithyClient._json,
        bindings: smithyClient._json,
        collectionBindingProperties: smithyClient._json,
        componentName: smithyClient.expectString,
        concat: (_) => de_ComponentPropertyList(_),
        condition: (_) => de_ComponentConditionProperty(_),
        configured: smithyClient.expectBoolean,
        defaultValue: smithyClient.expectString,
        event: smithyClient.expectString,
        importedValue: smithyClient.expectString,
        model: smithyClient.expectString,
        property: smithyClient.expectString,
        type: smithyClient.expectString,
        userAttribute: smithyClient.expectString,
        value: smithyClient.expectString,
    });
};
const de_ComponentPropertyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComponentProperty(entry);
    });
    return retVal;
};
const de_FieldConfig = (output, context) => {
    return smithyClient.take(output, {
        excluded: smithyClient.expectBoolean,
        inputType: (_) => de_FieldInputConfig(_),
        label: smithyClient.expectString,
        position: (_) => smithyClient._json(core$1.awsExpectUnion(_)),
        validations: smithyClient._json,
    });
};
const de_FieldInputConfig = (output, context) => {
    return smithyClient.take(output, {
        defaultChecked: smithyClient.expectBoolean,
        defaultCountryCode: smithyClient.expectString,
        defaultValue: smithyClient.expectString,
        descriptiveText: smithyClient.expectString,
        fileUploaderConfig: smithyClient._json,
        isArray: smithyClient.expectBoolean,
        maxValue: smithyClient.limitedParseFloat32,
        minValue: smithyClient.limitedParseFloat32,
        name: smithyClient.expectString,
        placeholder: smithyClient.expectString,
        readOnly: smithyClient.expectBoolean,
        required: smithyClient.expectBoolean,
        step: smithyClient.limitedParseFloat32,
        type: smithyClient.expectString,
        value: smithyClient.expectString,
        valueMappings: (_) => de_ValueMappings(_),
    });
};
const de_FieldsMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_FieldConfig(value);
        return acc;
    }, {});
};
const de_Form = (output, context) => {
    return smithyClient.take(output, {
        appId: smithyClient.expectString,
        cta: smithyClient._json,
        dataType: smithyClient._json,
        environmentName: smithyClient.expectString,
        fields: (_) => de_FieldsMap(_),
        formActionType: smithyClient.expectString,
        id: smithyClient.expectString,
        labelDecorator: smithyClient.expectString,
        name: smithyClient.expectString,
        schemaVersion: smithyClient.expectString,
        sectionalElements: smithyClient._json,
        style: smithyClient._json,
        tags: smithyClient._json,
    });
};
const de_FormInputValueProperty = (output, context) => {
    return smithyClient.take(output, {
        bindingProperties: smithyClient._json,
        concat: (_) => de_FormInputValuePropertyList(_),
        value: smithyClient.expectString,
    });
};
const de_FormInputValuePropertyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FormInputValueProperty(entry);
    });
    return retVal;
};
const de_FormList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Form(entry);
    });
    return retVal;
};
const de_MutationActionSetStateParameter = (output, context) => {
    return smithyClient.take(output, {
        componentName: smithyClient.expectString,
        property: smithyClient.expectString,
        set: (_) => de_ComponentProperty(_),
    });
};
const de_Predicate = (output, context) => {
    return smithyClient.take(output, {
        and: (_) => de_PredicateList(_),
        field: smithyClient.expectString,
        operand: smithyClient.expectString,
        operandType: smithyClient.expectString,
        operator: smithyClient.expectString,
        or: (_) => de_PredicateList(_),
    });
};
const de_PredicateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Predicate(entry);
    });
    return retVal;
};
const de_Theme = (output, context) => {
    return smithyClient.take(output, {
        appId: smithyClient.expectString,
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        environmentName: smithyClient.expectString,
        id: smithyClient.expectString,
        modifiedAt: (_) => smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(_)),
        name: smithyClient.expectString,
        overrides: (_) => de_ThemeValuesList(_),
        tags: smithyClient._json,
        values: (_) => de_ThemeValuesList(_),
    });
};
const de_ThemeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Theme(entry);
    });
    return retVal;
};
const de_ThemeValue = (output, context) => {
    return smithyClient.take(output, {
        children: (_) => de_ThemeValuesList(_),
        value: smithyClient.expectString,
    });
};
const de_ThemeValues = (output, context) => {
    return smithyClient.take(output, {
        key: smithyClient.expectString,
        value: (_) => de_ThemeValue(_),
    });
};
const de_ThemeValuesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ThemeValues(entry);
    });
    return retVal;
};
const de_ValueMapping = (output, context) => {
    return smithyClient.take(output, {
        displayValue: (_) => de_FormInputValueProperty(_),
        value: (_) => de_FormInputValueProperty(_),
    });
};
const de_ValueMappingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValueMapping(entry);
    });
    return retVal;
};
const de_ValueMappings = (output, context) => {
    return smithyClient.take(output, {
        bindingProperties: smithyClient._json,
        values: (_) => de_ValueMappingList(_),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const _cT = "clientToken";
const _mR = "maxResults";
const _nT = "nextToken";
const _tK = "tagKeys";

class CreateComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "CreateComponent", {})
    .n("AmplifyUIBuilderClient", "CreateComponentCommand")
    .f(void 0, void 0)
    .ser(se_CreateComponentCommand)
    .de(de_CreateComponentCommand)
    .build() {
}

class CreateFormCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "CreateForm", {})
    .n("AmplifyUIBuilderClient", "CreateFormCommand")
    .f(void 0, void 0)
    .ser(se_CreateFormCommand)
    .de(de_CreateFormCommand)
    .build() {
}

class CreateThemeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "CreateTheme", {})
    .n("AmplifyUIBuilderClient", "CreateThemeCommand")
    .f(void 0, void 0)
    .ser(se_CreateThemeCommand)
    .de(de_CreateThemeCommand)
    .build() {
}

class DeleteComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "DeleteComponent", {})
    .n("AmplifyUIBuilderClient", "DeleteComponentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteComponentCommand)
    .de(de_DeleteComponentCommand)
    .build() {
}

class DeleteFormCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "DeleteForm", {})
    .n("AmplifyUIBuilderClient", "DeleteFormCommand")
    .f(void 0, void 0)
    .ser(se_DeleteFormCommand)
    .de(de_DeleteFormCommand)
    .build() {
}

class DeleteThemeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "DeleteTheme", {})
    .n("AmplifyUIBuilderClient", "DeleteThemeCommand")
    .f(void 0, void 0)
    .ser(se_DeleteThemeCommand)
    .de(de_DeleteThemeCommand)
    .build() {
}

class ExchangeCodeForTokenCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "ExchangeCodeForToken", {})
    .n("AmplifyUIBuilderClient", "ExchangeCodeForTokenCommand")
    .f(ExchangeCodeForTokenRequestFilterSensitiveLog, ExchangeCodeForTokenResponseFilterSensitiveLog)
    .ser(se_ExchangeCodeForTokenCommand)
    .de(de_ExchangeCodeForTokenCommand)
    .build() {
}

class ExportComponentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "ExportComponents", {})
    .n("AmplifyUIBuilderClient", "ExportComponentsCommand")
    .f(void 0, void 0)
    .ser(se_ExportComponentsCommand)
    .de(de_ExportComponentsCommand)
    .build() {
}

class ExportFormsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "ExportForms", {})
    .n("AmplifyUIBuilderClient", "ExportFormsCommand")
    .f(void 0, void 0)
    .ser(se_ExportFormsCommand)
    .de(de_ExportFormsCommand)
    .build() {
}

class ExportThemesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "ExportThemes", {})
    .n("AmplifyUIBuilderClient", "ExportThemesCommand")
    .f(void 0, void 0)
    .ser(se_ExportThemesCommand)
    .de(de_ExportThemesCommand)
    .build() {
}

class GetCodegenJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "GetCodegenJob", {})
    .n("AmplifyUIBuilderClient", "GetCodegenJobCommand")
    .f(void 0, void 0)
    .ser(se_GetCodegenJobCommand)
    .de(de_GetCodegenJobCommand)
    .build() {
}

class GetComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "GetComponent", {})
    .n("AmplifyUIBuilderClient", "GetComponentCommand")
    .f(void 0, void 0)
    .ser(se_GetComponentCommand)
    .de(de_GetComponentCommand)
    .build() {
}

class GetFormCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "GetForm", {})
    .n("AmplifyUIBuilderClient", "GetFormCommand")
    .f(void 0, void 0)
    .ser(se_GetFormCommand)
    .de(de_GetFormCommand)
    .build() {
}

class GetMetadataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "GetMetadata", {})
    .n("AmplifyUIBuilderClient", "GetMetadataCommand")
    .f(void 0, void 0)
    .ser(se_GetMetadataCommand)
    .de(de_GetMetadataCommand)
    .build() {
}

class GetThemeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "GetTheme", {})
    .n("AmplifyUIBuilderClient", "GetThemeCommand")
    .f(void 0, void 0)
    .ser(se_GetThemeCommand)
    .de(de_GetThemeCommand)
    .build() {
}

class ListCodegenJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "ListCodegenJobs", {})
    .n("AmplifyUIBuilderClient", "ListCodegenJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListCodegenJobsCommand)
    .de(de_ListCodegenJobsCommand)
    .build() {
}

class ListComponentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "ListComponents", {})
    .n("AmplifyUIBuilderClient", "ListComponentsCommand")
    .f(void 0, void 0)
    .ser(se_ListComponentsCommand)
    .de(de_ListComponentsCommand)
    .build() {
}

class ListFormsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "ListForms", {})
    .n("AmplifyUIBuilderClient", "ListFormsCommand")
    .f(void 0, void 0)
    .ser(se_ListFormsCommand)
    .de(de_ListFormsCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "ListTagsForResource", {})
    .n("AmplifyUIBuilderClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListThemesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "ListThemes", {})
    .n("AmplifyUIBuilderClient", "ListThemesCommand")
    .f(void 0, void 0)
    .ser(se_ListThemesCommand)
    .de(de_ListThemesCommand)
    .build() {
}

class PutMetadataFlagCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "PutMetadataFlag", {})
    .n("AmplifyUIBuilderClient", "PutMetadataFlagCommand")
    .f(void 0, void 0)
    .ser(se_PutMetadataFlagCommand)
    .de(de_PutMetadataFlagCommand)
    .build() {
}

class RefreshTokenCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "RefreshToken", {})
    .n("AmplifyUIBuilderClient", "RefreshTokenCommand")
    .f(RefreshTokenRequestFilterSensitiveLog, RefreshTokenResponseFilterSensitiveLog)
    .ser(se_RefreshTokenCommand)
    .de(de_RefreshTokenCommand)
    .build() {
}

class StartCodegenJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "StartCodegenJob", {})
    .n("AmplifyUIBuilderClient", "StartCodegenJobCommand")
    .f(void 0, void 0)
    .ser(se_StartCodegenJobCommand)
    .de(de_StartCodegenJobCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "TagResource", {})
    .n("AmplifyUIBuilderClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "UntagResource", {})
    .n("AmplifyUIBuilderClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "UpdateComponent", {})
    .n("AmplifyUIBuilderClient", "UpdateComponentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateComponentCommand)
    .de(de_UpdateComponentCommand)
    .build() {
}

class UpdateFormCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "UpdateForm", {})
    .n("AmplifyUIBuilderClient", "UpdateFormCommand")
    .f(void 0, void 0)
    .ser(se_UpdateFormCommand)
    .de(de_UpdateFormCommand)
    .build() {
}

class UpdateThemeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmplifyUIBuilder", "UpdateTheme", {})
    .n("AmplifyUIBuilderClient", "UpdateThemeCommand")
    .f(void 0, void 0)
    .ser(se_UpdateThemeCommand)
    .de(de_UpdateThemeCommand)
    .build() {
}

const commands = {
    CreateComponentCommand,
    CreateFormCommand,
    CreateThemeCommand,
    DeleteComponentCommand,
    DeleteFormCommand,
    DeleteThemeCommand,
    ExchangeCodeForTokenCommand,
    ExportComponentsCommand,
    ExportFormsCommand,
    ExportThemesCommand,
    GetCodegenJobCommand,
    GetComponentCommand,
    GetFormCommand,
    GetMetadataCommand,
    GetThemeCommand,
    ListCodegenJobsCommand,
    ListComponentsCommand,
    ListFormsCommand,
    ListTagsForResourceCommand,
    ListThemesCommand,
    PutMetadataFlagCommand,
    RefreshTokenCommand,
    StartCodegenJobCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateComponentCommand,
    UpdateFormCommand,
    UpdateThemeCommand,
};
class AmplifyUIBuilder extends AmplifyUIBuilderClient {
}
smithyClient.createAggregatedClient(commands, AmplifyUIBuilder);

const paginateExportComponents = core.createPaginator(AmplifyUIBuilderClient, ExportComponentsCommand, "nextToken", "nextToken", "");

const paginateExportForms = core.createPaginator(AmplifyUIBuilderClient, ExportFormsCommand, "nextToken", "nextToken", "");

const paginateExportThemes = core.createPaginator(AmplifyUIBuilderClient, ExportThemesCommand, "nextToken", "nextToken", "");

const paginateListCodegenJobs = core.createPaginator(AmplifyUIBuilderClient, ListCodegenJobsCommand, "nextToken", "nextToken", "maxResults");

const paginateListComponents = core.createPaginator(AmplifyUIBuilderClient, ListComponentsCommand, "nextToken", "nextToken", "maxResults");

const paginateListForms = core.createPaginator(AmplifyUIBuilderClient, ListFormsCommand, "nextToken", "nextToken", "maxResults");

const paginateListThemes = core.createPaginator(AmplifyUIBuilderClient, ListThemesCommand, "nextToken", "nextToken", "maxResults");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AmplifyUIBuilder = AmplifyUIBuilder;
exports.AmplifyUIBuilderClient = AmplifyUIBuilderClient;
exports.AmplifyUIBuilderServiceException = AmplifyUIBuilderServiceException;
exports.CodegenGenericDataFieldDataType = CodegenGenericDataFieldDataType;
exports.CodegenJobGenericDataSourceType = CodegenJobGenericDataSourceType;
exports.CodegenJobStatus = CodegenJobStatus;
exports.CreateComponentCommand = CreateComponentCommand;
exports.CreateFormCommand = CreateFormCommand;
exports.CreateThemeCommand = CreateThemeCommand;
exports.DeleteComponentCommand = DeleteComponentCommand;
exports.DeleteFormCommand = DeleteFormCommand;
exports.DeleteThemeCommand = DeleteThemeCommand;
exports.ExchangeCodeForTokenCommand = ExchangeCodeForTokenCommand;
exports.ExchangeCodeForTokenRequestBodyFilterSensitiveLog = ExchangeCodeForTokenRequestBodyFilterSensitiveLog;
exports.ExchangeCodeForTokenRequestFilterSensitiveLog = ExchangeCodeForTokenRequestFilterSensitiveLog;
exports.ExchangeCodeForTokenResponseFilterSensitiveLog = ExchangeCodeForTokenResponseFilterSensitiveLog;
exports.ExportComponentsCommand = ExportComponentsCommand;
exports.ExportFormsCommand = ExportFormsCommand;
exports.ExportThemesCommand = ExportThemesCommand;
exports.FixedPosition = FixedPosition;
exports.FormActionType = FormActionType;
exports.FormButtonsPosition = FormButtonsPosition;
exports.FormDataSourceType = FormDataSourceType;
exports.GenericDataRelationshipType = GenericDataRelationshipType;
exports.GetCodegenJobCommand = GetCodegenJobCommand;
exports.GetComponentCommand = GetComponentCommand;
exports.GetFormCommand = GetFormCommand;
exports.GetMetadataCommand = GetMetadataCommand;
exports.GetThemeCommand = GetThemeCommand;
exports.InternalServerException = InternalServerException;
exports.InvalidParameterException = InvalidParameterException;
exports.JSModule = JSModule;
exports.JSScript = JSScript;
exports.JSTarget = JSTarget;
exports.LabelDecorator = LabelDecorator;
exports.ListCodegenJobsCommand = ListCodegenJobsCommand;
exports.ListComponentsCommand = ListComponentsCommand;
exports.ListFormsCommand = ListFormsCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListThemesCommand = ListThemesCommand;
exports.PutMetadataFlagCommand = PutMetadataFlagCommand;
exports.RefreshTokenCommand = RefreshTokenCommand;
exports.RefreshTokenRequestBodyFilterSensitiveLog = RefreshTokenRequestBodyFilterSensitiveLog;
exports.RefreshTokenRequestFilterSensitiveLog = RefreshTokenRequestFilterSensitiveLog;
exports.RefreshTokenResponseFilterSensitiveLog = RefreshTokenResponseFilterSensitiveLog;
exports.ResourceConflictException = ResourceConflictException;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
exports.SortDirection = SortDirection;
exports.StartCodegenJobCommand = StartCodegenJobCommand;
exports.StorageAccessLevel = StorageAccessLevel;
exports.TagResourceCommand = TagResourceCommand;
exports.ThrottlingException = ThrottlingException;
exports.TokenProviders = TokenProviders;
exports.UnauthorizedException = UnauthorizedException;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateComponentCommand = UpdateComponentCommand;
exports.UpdateFormCommand = UpdateFormCommand;
exports.UpdateThemeCommand = UpdateThemeCommand;
exports.paginateExportComponents = paginateExportComponents;
exports.paginateExportForms = paginateExportForms;
exports.paginateExportThemes = paginateExportThemes;
exports.paginateListCodegenJobs = paginateListCodegenJobs;
exports.paginateListComponents = paginateListComponents;
exports.paginateListForms = paginateListForms;
exports.paginateListThemes = paginateListThemes;
