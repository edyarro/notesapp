'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var utilWaiter = require('@smithy/util-waiter');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "ecr",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class ECRClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultECRHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class ECRServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, ECRServiceException.prototype);
    }
}

const LayerFailureCode = {
    InvalidLayerDigest: "InvalidLayerDigest",
    MissingLayerDigest: "MissingLayerDigest",
};
const LayerAvailability = {
    AVAILABLE: "AVAILABLE",
    UNAVAILABLE: "UNAVAILABLE",
};
class InvalidParameterException extends ECRServiceException {
    name = "InvalidParameterException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
class RepositoryNotFoundException extends ECRServiceException {
    name = "RepositoryNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "RepositoryNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RepositoryNotFoundException.prototype);
    }
}
class ServerException extends ECRServiceException {
    name = "ServerException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "ServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ServerException.prototype);
    }
}
const ImageFailureCode = {
    ImageNotFound: "ImageNotFound",
    ImageReferencedByManifestList: "ImageReferencedByManifestList",
    ImageTagDoesNotMatchDigest: "ImageTagDoesNotMatchDigest",
    InvalidImageDigest: "InvalidImageDigest",
    InvalidImageTag: "InvalidImageTag",
    KmsError: "KmsError",
    MissingDigestAndTag: "MissingDigestAndTag",
    UpstreamAccessDenied: "UpstreamAccessDenied",
    UpstreamTooManyRequests: "UpstreamTooManyRequests",
    UpstreamUnavailable: "UpstreamUnavailable",
};
class LimitExceededException extends ECRServiceException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class UnableToGetUpstreamImageException extends ECRServiceException {
    name = "UnableToGetUpstreamImageException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnableToGetUpstreamImageException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnableToGetUpstreamImageException.prototype);
    }
}
const ScanningConfigurationFailureCode = {
    REPOSITORY_NOT_FOUND: "REPOSITORY_NOT_FOUND",
};
const ScanningRepositoryFilterType = {
    WILDCARD: "WILDCARD",
};
const ScanFrequency = {
    CONTINUOUS_SCAN: "CONTINUOUS_SCAN",
    MANUAL: "MANUAL",
    SCAN_ON_PUSH: "SCAN_ON_PUSH",
};
class ValidationException extends ECRServiceException {
    name = "ValidationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
class EmptyUploadException extends ECRServiceException {
    name = "EmptyUploadException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "EmptyUploadException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, EmptyUploadException.prototype);
    }
}
class InvalidLayerException extends ECRServiceException {
    name = "InvalidLayerException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidLayerException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidLayerException.prototype);
    }
}
class KmsException extends ECRServiceException {
    name = "KmsException";
    $fault = "client";
    kmsError;
    constructor(opts) {
        super({
            name: "KmsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KmsException.prototype);
        this.kmsError = opts.kmsError;
    }
}
class LayerAlreadyExistsException extends ECRServiceException {
    name = "LayerAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LayerAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LayerAlreadyExistsException.prototype);
    }
}
class LayerPartTooSmallException extends ECRServiceException {
    name = "LayerPartTooSmallException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LayerPartTooSmallException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LayerPartTooSmallException.prototype);
    }
}
class UploadNotFoundException extends ECRServiceException {
    name = "UploadNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UploadNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UploadNotFoundException.prototype);
    }
}
const UpstreamRegistry = {
    AzureContainerRegistry: "azure-container-registry",
    DockerHub: "docker-hub",
    Ecr: "ecr",
    EcrPublic: "ecr-public",
    GitHubContainerRegistry: "github-container-registry",
    GitLabContainerRegistry: "gitlab-container-registry",
    K8s: "k8s",
    Quay: "quay",
};
class PullThroughCacheRuleAlreadyExistsException extends ECRServiceException {
    name = "PullThroughCacheRuleAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PullThroughCacheRuleAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PullThroughCacheRuleAlreadyExistsException.prototype);
    }
}
class SecretNotFoundException extends ECRServiceException {
    name = "SecretNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "SecretNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, SecretNotFoundException.prototype);
    }
}
class UnableToAccessSecretException extends ECRServiceException {
    name = "UnableToAccessSecretException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnableToAccessSecretException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnableToAccessSecretException.prototype);
    }
}
class UnableToDecryptSecretValueException extends ECRServiceException {
    name = "UnableToDecryptSecretValueException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnableToDecryptSecretValueException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnableToDecryptSecretValueException.prototype);
    }
}
class UnsupportedUpstreamRegistryException extends ECRServiceException {
    name = "UnsupportedUpstreamRegistryException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedUpstreamRegistryException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedUpstreamRegistryException.prototype);
    }
}
const EncryptionType = {
    AES256: "AES256",
    KMS: "KMS",
    KMS_DSSE: "KMS_DSSE",
};
const ImageTagMutability = {
    IMMUTABLE: "IMMUTABLE",
    IMMUTABLE_WITH_EXCLUSION: "IMMUTABLE_WITH_EXCLUSION",
    MUTABLE: "MUTABLE",
    MUTABLE_WITH_EXCLUSION: "MUTABLE_WITH_EXCLUSION",
};
const ImageTagMutabilityExclusionFilterType = {
    WILDCARD: "WILDCARD",
};
class InvalidTagParameterException extends ECRServiceException {
    name = "InvalidTagParameterException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidTagParameterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidTagParameterException.prototype);
    }
}
class RepositoryAlreadyExistsException extends ECRServiceException {
    name = "RepositoryAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "RepositoryAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RepositoryAlreadyExistsException.prototype);
    }
}
class TooManyTagsException extends ECRServiceException {
    name = "TooManyTagsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
const RCTAppliedFor = {
    PULL_THROUGH_CACHE: "PULL_THROUGH_CACHE",
    REPLICATION: "REPLICATION",
};
class TemplateAlreadyExistsException extends ECRServiceException {
    name = "TemplateAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TemplateAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TemplateAlreadyExistsException.prototype);
    }
}
class LifecyclePolicyNotFoundException extends ECRServiceException {
    name = "LifecyclePolicyNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LifecyclePolicyNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LifecyclePolicyNotFoundException.prototype);
    }
}
class PullThroughCacheRuleNotFoundException extends ECRServiceException {
    name = "PullThroughCacheRuleNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PullThroughCacheRuleNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PullThroughCacheRuleNotFoundException.prototype);
    }
}
class RegistryPolicyNotFoundException extends ECRServiceException {
    name = "RegistryPolicyNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "RegistryPolicyNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RegistryPolicyNotFoundException.prototype);
    }
}
class RepositoryNotEmptyException extends ECRServiceException {
    name = "RepositoryNotEmptyException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "RepositoryNotEmptyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RepositoryNotEmptyException.prototype);
    }
}
class TemplateNotFoundException extends ECRServiceException {
    name = "TemplateNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TemplateNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TemplateNotFoundException.prototype);
    }
}
class RepositoryPolicyNotFoundException extends ECRServiceException {
    name = "RepositoryPolicyNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "RepositoryPolicyNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RepositoryPolicyNotFoundException.prototype);
    }
}
const ReplicationStatus = {
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
class ImageNotFoundException extends ECRServiceException {
    name = "ImageNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ImageNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ImageNotFoundException.prototype);
    }
}
const TagStatus = {
    ANY: "ANY",
    TAGGED: "TAGGED",
    UNTAGGED: "UNTAGGED",
};
const FindingSeverity = {
    CRITICAL: "CRITICAL",
    HIGH: "HIGH",
    INFORMATIONAL: "INFORMATIONAL",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    UNDEFINED: "UNDEFINED",
};
const ScanStatus = {
    ACTIVE: "ACTIVE",
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    FINDINGS_UNAVAILABLE: "FINDINGS_UNAVAILABLE",
    IN_PROGRESS: "IN_PROGRESS",
    LIMIT_EXCEEDED: "LIMIT_EXCEEDED",
    PENDING: "PENDING",
    SCAN_ELIGIBILITY_EXPIRED: "SCAN_ELIGIBILITY_EXPIRED",
    UNSUPPORTED_IMAGE: "UNSUPPORTED_IMAGE",
};
class ScanNotFoundException extends ECRServiceException {
    name = "ScanNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ScanNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ScanNotFoundException.prototype);
    }
}
const RepositoryFilterType = {
    PREFIX_MATCH: "PREFIX_MATCH",
};
class LayerInaccessibleException extends ECRServiceException {
    name = "LayerInaccessibleException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LayerInaccessibleException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LayerInaccessibleException.prototype);
    }
}
class LayersNotFoundException extends ECRServiceException {
    name = "LayersNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LayersNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LayersNotFoundException.prototype);
    }
}
class UnableToGetUpstreamLayerException extends ECRServiceException {
    name = "UnableToGetUpstreamLayerException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnableToGetUpstreamLayerException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnableToGetUpstreamLayerException.prototype);
    }
}
const ImageActionType = {
    EXPIRE: "EXPIRE",
};
const LifecyclePolicyPreviewStatus = {
    COMPLETE: "COMPLETE",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
class LifecyclePolicyPreviewNotFoundException extends ECRServiceException {
    name = "LifecyclePolicyPreviewNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LifecyclePolicyPreviewNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LifecyclePolicyPreviewNotFoundException.prototype);
    }
}
const ScanType = {
    BASIC: "BASIC",
    ENHANCED: "ENHANCED",
};
class ImageAlreadyExistsException extends ECRServiceException {
    name = "ImageAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ImageAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ImageAlreadyExistsException.prototype);
    }
}
class ImageDigestDoesNotMatchException extends ECRServiceException {
    name = "ImageDigestDoesNotMatchException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ImageDigestDoesNotMatchException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ImageDigestDoesNotMatchException.prototype);
    }
}
class ImageTagAlreadyExistsException extends ECRServiceException {
    name = "ImageTagAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ImageTagAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ImageTagAlreadyExistsException.prototype);
    }
}
class ReferencedImagesNotFoundException extends ECRServiceException {
    name = "ReferencedImagesNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ReferencedImagesNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ReferencedImagesNotFoundException.prototype);
    }
}
class UnsupportedImageTypeException extends ECRServiceException {
    name = "UnsupportedImageTypeException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedImageTypeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedImageTypeException.prototype);
    }
}
class LifecyclePolicyPreviewInProgressException extends ECRServiceException {
    name = "LifecyclePolicyPreviewInProgressException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LifecyclePolicyPreviewInProgressException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LifecyclePolicyPreviewInProgressException.prototype);
    }
}
class InvalidLayerPartException extends ECRServiceException {
    name = "InvalidLayerPartException";
    $fault = "client";
    registryId;
    repositoryName;
    uploadId;
    lastValidByteReceived;
    constructor(opts) {
        super({
            name: "InvalidLayerPartException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidLayerPartException.prototype);
        this.registryId = opts.registryId;
        this.repositoryName = opts.repositoryName;
        this.uploadId = opts.uploadId;
        this.lastValidByteReceived = opts.lastValidByteReceived;
    }
}

const se_BatchCheckLayerAvailabilityCommand = async (input, context) => {
    const headers = sharedHeaders("BatchCheckLayerAvailability");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchDeleteImageCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteImage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchGetImageCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetImage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchGetRepositoryScanningConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetRepositoryScanningConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CompleteLayerUploadCommand = async (input, context) => {
    const headers = sharedHeaders("CompleteLayerUpload");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePullThroughCacheRuleCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePullThroughCacheRule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRepository");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateRepositoryCreationTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRepositoryCreationTemplate");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLifecyclePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLifecyclePolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeletePullThroughCacheRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePullThroughCacheRule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRegistryPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRegistryPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRepository");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRepositoryCreationTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRepositoryCreationTemplate");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRepositoryPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRepositoryPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImageReplicationStatusCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImageReplicationStatus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImagesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImages");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImageScanFindingsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImageScanFindings");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePullThroughCacheRulesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePullThroughCacheRules");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeRegistryCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRegistry");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeRepositoriesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRepositories");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeRepositoryCreationTemplatesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRepositoryCreationTemplates");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAccountSettingCommand = async (input, context) => {
    const headers = sharedHeaders("GetAccountSetting");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAuthorizationTokenCommand = async (input, context) => {
    const headers = sharedHeaders("GetAuthorizationToken");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDownloadUrlForLayerCommand = async (input, context) => {
    const headers = sharedHeaders("GetDownloadUrlForLayer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLifecyclePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetLifecyclePolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLifecyclePolicyPreviewCommand = async (input, context) => {
    const headers = sharedHeaders("GetLifecyclePolicyPreview");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetRegistryPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetRegistryPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetRegistryScanningConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetRegistryScanningConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetRepositoryPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetRepositoryPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_InitiateLayerUploadCommand = async (input, context) => {
    const headers = sharedHeaders("InitiateLayerUpload");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListImagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListImages");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutAccountSettingCommand = async (input, context) => {
    const headers = sharedHeaders("PutAccountSetting");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutImageCommand = async (input, context) => {
    const headers = sharedHeaders("PutImage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutImageScanningConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutImageScanningConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutImageTagMutabilityCommand = async (input, context) => {
    const headers = sharedHeaders("PutImageTagMutability");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutLifecyclePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutLifecyclePolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutRegistryPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutRegistryPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutRegistryScanningConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutRegistryScanningConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutReplicationConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutReplicationConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetRepositoryPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("SetRepositoryPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartImageScanCommand = async (input, context) => {
    const headers = sharedHeaders("StartImageScan");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartLifecyclePolicyPreviewCommand = async (input, context) => {
    const headers = sharedHeaders("StartLifecyclePolicyPreview");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdatePullThroughCacheRuleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePullThroughCacheRule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateRepositoryCreationTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRepositoryCreationTemplate");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UploadLayerPartCommand = async (input, context) => {
    const headers = sharedHeaders("UploadLayerPart");
    let body;
    body = JSON.stringify(se_UploadLayerPartRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ValidatePullThroughCacheRuleCommand = async (input, context) => {
    const headers = sharedHeaders("ValidatePullThroughCacheRule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_BatchCheckLayerAvailabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDeleteImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchGetImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchGetRepositoryScanningConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CompleteLayerUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePullThroughCacheRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreatePullThroughCacheRuleResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateRepositoryResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateRepositoryCreationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateRepositoryCreationTemplateResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteLifecyclePolicyResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeletePullThroughCacheRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeletePullThroughCacheRuleResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteRegistryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteRepositoryResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteRepositoryCreationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteRepositoryCreationTemplateResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteRepositoryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImageReplicationStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeImagesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImageScanFindingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeImageScanFindingsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePullThroughCacheRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribePullThroughCacheRulesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRegistryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRepositoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeRepositoriesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRepositoryCreationTemplatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeRepositoryCreationTemplatesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAccountSettingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAuthorizationTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetAuthorizationTokenResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDownloadUrlForLayerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetLifecyclePolicyResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLifecyclePolicyPreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetLifecyclePolicyPreviewResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetRegistryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetRegistryScanningConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetRepositoryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_InitiateLayerUploadCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutAccountSettingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutImageScanningConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutImageTagMutabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutRegistryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutRegistryScanningConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutReplicationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetRepositoryPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartImageScanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartLifecyclePolicyPreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdatePullThroughCacheRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdatePullThroughCacheRuleResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateRepositoryCreationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateRepositoryCreationTemplateResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UploadLayerPartCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ValidatePullThroughCacheRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.ecr#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput);
        case "RepositoryNotFoundException":
        case "com.amazonaws.ecr#RepositoryNotFoundException":
            throw await de_RepositoryNotFoundExceptionRes(parsedOutput);
        case "ServerException":
        case "com.amazonaws.ecr#ServerException":
            throw await de_ServerExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.ecr#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "UnableToGetUpstreamImageException":
        case "com.amazonaws.ecr#UnableToGetUpstreamImageException":
            throw await de_UnableToGetUpstreamImageExceptionRes(parsedOutput);
        case "ValidationException":
        case "com.amazonaws.ecr#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput);
        case "EmptyUploadException":
        case "com.amazonaws.ecr#EmptyUploadException":
            throw await de_EmptyUploadExceptionRes(parsedOutput);
        case "InvalidLayerException":
        case "com.amazonaws.ecr#InvalidLayerException":
            throw await de_InvalidLayerExceptionRes(parsedOutput);
        case "KmsException":
        case "com.amazonaws.ecr#KmsException":
            throw await de_KmsExceptionRes(parsedOutput);
        case "LayerAlreadyExistsException":
        case "com.amazonaws.ecr#LayerAlreadyExistsException":
            throw await de_LayerAlreadyExistsExceptionRes(parsedOutput);
        case "LayerPartTooSmallException":
        case "com.amazonaws.ecr#LayerPartTooSmallException":
            throw await de_LayerPartTooSmallExceptionRes(parsedOutput);
        case "UploadNotFoundException":
        case "com.amazonaws.ecr#UploadNotFoundException":
            throw await de_UploadNotFoundExceptionRes(parsedOutput);
        case "PullThroughCacheRuleAlreadyExistsException":
        case "com.amazonaws.ecr#PullThroughCacheRuleAlreadyExistsException":
            throw await de_PullThroughCacheRuleAlreadyExistsExceptionRes(parsedOutput);
        case "SecretNotFoundException":
        case "com.amazonaws.ecr#SecretNotFoundException":
            throw await de_SecretNotFoundExceptionRes(parsedOutput);
        case "UnableToAccessSecretException":
        case "com.amazonaws.ecr#UnableToAccessSecretException":
            throw await de_UnableToAccessSecretExceptionRes(parsedOutput);
        case "UnableToDecryptSecretValueException":
        case "com.amazonaws.ecr#UnableToDecryptSecretValueException":
            throw await de_UnableToDecryptSecretValueExceptionRes(parsedOutput);
        case "UnsupportedUpstreamRegistryException":
        case "com.amazonaws.ecr#UnsupportedUpstreamRegistryException":
            throw await de_UnsupportedUpstreamRegistryExceptionRes(parsedOutput);
        case "InvalidTagParameterException":
        case "com.amazonaws.ecr#InvalidTagParameterException":
            throw await de_InvalidTagParameterExceptionRes(parsedOutput);
        case "RepositoryAlreadyExistsException":
        case "com.amazonaws.ecr#RepositoryAlreadyExistsException":
            throw await de_RepositoryAlreadyExistsExceptionRes(parsedOutput);
        case "TooManyTagsException":
        case "com.amazonaws.ecr#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput);
        case "TemplateAlreadyExistsException":
        case "com.amazonaws.ecr#TemplateAlreadyExistsException":
            throw await de_TemplateAlreadyExistsExceptionRes(parsedOutput);
        case "LifecyclePolicyNotFoundException":
        case "com.amazonaws.ecr#LifecyclePolicyNotFoundException":
            throw await de_LifecyclePolicyNotFoundExceptionRes(parsedOutput);
        case "PullThroughCacheRuleNotFoundException":
        case "com.amazonaws.ecr#PullThroughCacheRuleNotFoundException":
            throw await de_PullThroughCacheRuleNotFoundExceptionRes(parsedOutput);
        case "RegistryPolicyNotFoundException":
        case "com.amazonaws.ecr#RegistryPolicyNotFoundException":
            throw await de_RegistryPolicyNotFoundExceptionRes(parsedOutput);
        case "RepositoryNotEmptyException":
        case "com.amazonaws.ecr#RepositoryNotEmptyException":
            throw await de_RepositoryNotEmptyExceptionRes(parsedOutput);
        case "TemplateNotFoundException":
        case "com.amazonaws.ecr#TemplateNotFoundException":
            throw await de_TemplateNotFoundExceptionRes(parsedOutput);
        case "RepositoryPolicyNotFoundException":
        case "com.amazonaws.ecr#RepositoryPolicyNotFoundException":
            throw await de_RepositoryPolicyNotFoundExceptionRes(parsedOutput);
        case "ImageNotFoundException":
        case "com.amazonaws.ecr#ImageNotFoundException":
            throw await de_ImageNotFoundExceptionRes(parsedOutput);
        case "ScanNotFoundException":
        case "com.amazonaws.ecr#ScanNotFoundException":
            throw await de_ScanNotFoundExceptionRes(parsedOutput);
        case "LayerInaccessibleException":
        case "com.amazonaws.ecr#LayerInaccessibleException":
            throw await de_LayerInaccessibleExceptionRes(parsedOutput);
        case "LayersNotFoundException":
        case "com.amazonaws.ecr#LayersNotFoundException":
            throw await de_LayersNotFoundExceptionRes(parsedOutput);
        case "UnableToGetUpstreamLayerException":
        case "com.amazonaws.ecr#UnableToGetUpstreamLayerException":
            throw await de_UnableToGetUpstreamLayerExceptionRes(parsedOutput);
        case "LifecyclePolicyPreviewNotFoundException":
        case "com.amazonaws.ecr#LifecyclePolicyPreviewNotFoundException":
            throw await de_LifecyclePolicyPreviewNotFoundExceptionRes(parsedOutput);
        case "ImageAlreadyExistsException":
        case "com.amazonaws.ecr#ImageAlreadyExistsException":
            throw await de_ImageAlreadyExistsExceptionRes(parsedOutput);
        case "ImageDigestDoesNotMatchException":
        case "com.amazonaws.ecr#ImageDigestDoesNotMatchException":
            throw await de_ImageDigestDoesNotMatchExceptionRes(parsedOutput);
        case "ImageTagAlreadyExistsException":
        case "com.amazonaws.ecr#ImageTagAlreadyExistsException":
            throw await de_ImageTagAlreadyExistsExceptionRes(parsedOutput);
        case "ReferencedImagesNotFoundException":
        case "com.amazonaws.ecr#ReferencedImagesNotFoundException":
            throw await de_ReferencedImagesNotFoundExceptionRes(parsedOutput);
        case "UnsupportedImageTypeException":
        case "com.amazonaws.ecr#UnsupportedImageTypeException":
            throw await de_UnsupportedImageTypeExceptionRes(parsedOutput);
        case "LifecyclePolicyPreviewInProgressException":
        case "com.amazonaws.ecr#LifecyclePolicyPreviewInProgressException":
            throw await de_LifecyclePolicyPreviewInProgressExceptionRes(parsedOutput);
        case "InvalidLayerPartException":
        case "com.amazonaws.ecr#InvalidLayerPartException":
            throw await de_InvalidLayerPartExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_EmptyUploadExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new EmptyUploadException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ImageAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ImageAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ImageDigestDoesNotMatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ImageDigestDoesNotMatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ImageNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ImageNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ImageTagAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ImageTagAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidLayerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidLayerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidLayerPartExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidLayerPartException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidTagParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidTagParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_KmsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new KmsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LayerAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LayerAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LayerInaccessibleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LayerInaccessibleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LayerPartTooSmallExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LayerPartTooSmallException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LayersNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LayersNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LifecyclePolicyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LifecyclePolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LifecyclePolicyPreviewInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LifecyclePolicyPreviewInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LifecyclePolicyPreviewNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LifecyclePolicyPreviewNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PullThroughCacheRuleAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new PullThroughCacheRuleAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PullThroughCacheRuleNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new PullThroughCacheRuleNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ReferencedImagesNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ReferencedImagesNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_RegistryPolicyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new RegistryPolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_RepositoryAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new RepositoryAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_RepositoryNotEmptyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new RepositoryNotEmptyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_RepositoryNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new RepositoryNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_RepositoryPolicyNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new RepositoryPolicyNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ScanNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ScanNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_SecretNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new SecretNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TemplateAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TemplateAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TemplateNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TemplateNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnableToAccessSecretExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnableToAccessSecretException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnableToDecryptSecretValueExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnableToDecryptSecretValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnableToGetUpstreamImageExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnableToGetUpstreamImageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnableToGetUpstreamLayerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnableToGetUpstreamLayerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnsupportedImageTypeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnsupportedImageTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnsupportedUpstreamRegistryExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnsupportedUpstreamRegistryException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UploadNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UploadNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_UploadLayerPartRequest = (input, context) => {
    return smithyClient.take(input, {
        layerPartBlob: context.base64Encoder,
        partFirstByte: [],
        partLastByte: [],
        registryId: [],
        repositoryName: [],
        uploadId: [],
    });
};
const de_AuthorizationData = (output, context) => {
    return smithyClient.take(output, {
        authorizationToken: smithyClient.expectString,
        expiresAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        proxyEndpoint: smithyClient.expectString,
    });
};
const de_AuthorizationDataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AuthorizationData(entry);
    });
    return retVal;
};
const de_AwsEcrContainerImageDetails = (output, context) => {
    return smithyClient.take(output, {
        architecture: smithyClient.expectString,
        author: smithyClient.expectString,
        imageHash: smithyClient.expectString,
        imageTags: smithyClient._json,
        inUseCount: smithyClient.expectLong,
        lastInUseAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        platform: smithyClient.expectString,
        pushedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        registry: smithyClient.expectString,
        repositoryName: smithyClient.expectString,
    });
};
const de_CreatePullThroughCacheRuleResponse = (output, context) => {
    return smithyClient.take(output, {
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        credentialArn: smithyClient.expectString,
        customRoleArn: smithyClient.expectString,
        ecrRepositoryPrefix: smithyClient.expectString,
        registryId: smithyClient.expectString,
        upstreamRegistry: smithyClient.expectString,
        upstreamRegistryUrl: smithyClient.expectString,
        upstreamRepositoryPrefix: smithyClient.expectString,
    });
};
const de_CreateRepositoryCreationTemplateResponse = (output, context) => {
    return smithyClient.take(output, {
        registryId: smithyClient.expectString,
        repositoryCreationTemplate: (_) => de_RepositoryCreationTemplate(_),
    });
};
const de_CreateRepositoryResponse = (output, context) => {
    return smithyClient.take(output, {
        repository: (_) => de_Repository(_),
    });
};
const de_CvssScore = (output, context) => {
    return smithyClient.take(output, {
        baseScore: smithyClient.limitedParseDouble,
        scoringVector: smithyClient.expectString,
        source: smithyClient.expectString,
        version: smithyClient.expectString,
    });
};
const de_CvssScoreDetails = (output, context) => {
    return smithyClient.take(output, {
        adjustments: smithyClient._json,
        score: smithyClient.limitedParseDouble,
        scoreSource: smithyClient.expectString,
        scoringVector: smithyClient.expectString,
        version: smithyClient.expectString,
    });
};
const de_CvssScoreList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CvssScore(entry);
    });
    return retVal;
};
const de_DeleteLifecyclePolicyResponse = (output, context) => {
    return smithyClient.take(output, {
        lastEvaluatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        lifecyclePolicyText: smithyClient.expectString,
        registryId: smithyClient.expectString,
        repositoryName: smithyClient.expectString,
    });
};
const de_DeletePullThroughCacheRuleResponse = (output, context) => {
    return smithyClient.take(output, {
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        credentialArn: smithyClient.expectString,
        customRoleArn: smithyClient.expectString,
        ecrRepositoryPrefix: smithyClient.expectString,
        registryId: smithyClient.expectString,
        upstreamRegistryUrl: smithyClient.expectString,
        upstreamRepositoryPrefix: smithyClient.expectString,
    });
};
const de_DeleteRepositoryCreationTemplateResponse = (output, context) => {
    return smithyClient.take(output, {
        registryId: smithyClient.expectString,
        repositoryCreationTemplate: (_) => de_RepositoryCreationTemplate(_),
    });
};
const de_DeleteRepositoryResponse = (output, context) => {
    return smithyClient.take(output, {
        repository: (_) => de_Repository(_),
    });
};
const de_DescribeImageScanFindingsResponse = (output, context) => {
    return smithyClient.take(output, {
        imageId: smithyClient._json,
        imageScanFindings: (_) => de_ImageScanFindings(_),
        imageScanStatus: smithyClient._json,
        nextToken: smithyClient.expectString,
        registryId: smithyClient.expectString,
        repositoryName: smithyClient.expectString,
    });
};
const de_DescribeImagesResponse = (output, context) => {
    return smithyClient.take(output, {
        imageDetails: (_) => de_ImageDetailList(_),
        nextToken: smithyClient.expectString,
    });
};
const de_DescribePullThroughCacheRulesResponse = (output, context) => {
    return smithyClient.take(output, {
        nextToken: smithyClient.expectString,
        pullThroughCacheRules: (_) => de_PullThroughCacheRuleList(_),
    });
};
const de_DescribeRepositoriesResponse = (output, context) => {
    return smithyClient.take(output, {
        nextToken: smithyClient.expectString,
        repositories: (_) => de_RepositoryList(_),
    });
};
const de_DescribeRepositoryCreationTemplatesResponse = (output, context) => {
    return smithyClient.take(output, {
        nextToken: smithyClient.expectString,
        registryId: smithyClient.expectString,
        repositoryCreationTemplates: (_) => de_RepositoryCreationTemplateList(_),
    });
};
const de_EnhancedImageScanFinding = (output, context) => {
    return smithyClient.take(output, {
        awsAccountId: smithyClient.expectString,
        description: smithyClient.expectString,
        exploitAvailable: smithyClient.expectString,
        findingArn: smithyClient.expectString,
        firstObservedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        fixAvailable: smithyClient.expectString,
        lastObservedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        packageVulnerabilityDetails: (_) => de_PackageVulnerabilityDetails(_),
        remediation: smithyClient._json,
        resources: (_) => de_ResourceList(_),
        score: smithyClient.limitedParseDouble,
        scoreDetails: (_) => de_ScoreDetails(_),
        severity: smithyClient.expectString,
        status: smithyClient.expectString,
        title: smithyClient.expectString,
        type: smithyClient.expectString,
        updatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_EnhancedImageScanFindingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnhancedImageScanFinding(entry);
    });
    return retVal;
};
const de_GetAuthorizationTokenResponse = (output, context) => {
    return smithyClient.take(output, {
        authorizationData: (_) => de_AuthorizationDataList(_),
    });
};
const de_GetLifecyclePolicyPreviewResponse = (output, context) => {
    return smithyClient.take(output, {
        lifecyclePolicyText: smithyClient.expectString,
        nextToken: smithyClient.expectString,
        previewResults: (_) => de_LifecyclePolicyPreviewResultList(_),
        registryId: smithyClient.expectString,
        repositoryName: smithyClient.expectString,
        status: smithyClient.expectString,
        summary: smithyClient._json,
    });
};
const de_GetLifecyclePolicyResponse = (output, context) => {
    return smithyClient.take(output, {
        lastEvaluatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        lifecyclePolicyText: smithyClient.expectString,
        registryId: smithyClient.expectString,
        repositoryName: smithyClient.expectString,
    });
};
const de_ImageDetail = (output, context) => {
    return smithyClient.take(output, {
        artifactMediaType: smithyClient.expectString,
        imageDigest: smithyClient.expectString,
        imageManifestMediaType: smithyClient.expectString,
        imagePushedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        imageScanFindingsSummary: (_) => de_ImageScanFindingsSummary(_),
        imageScanStatus: smithyClient._json,
        imageSizeInBytes: smithyClient.expectLong,
        imageTags: smithyClient._json,
        lastRecordedPullTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        registryId: smithyClient.expectString,
        repositoryName: smithyClient.expectString,
    });
};
const de_ImageDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageDetail(entry);
    });
    return retVal;
};
const de_ImageScanFindings = (output, context) => {
    return smithyClient.take(output, {
        enhancedFindings: (_) => de_EnhancedImageScanFindingList(_),
        findingSeverityCounts: smithyClient._json,
        findings: smithyClient._json,
        imageScanCompletedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        vulnerabilitySourceUpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_ImageScanFindingsSummary = (output, context) => {
    return smithyClient.take(output, {
        findingSeverityCounts: smithyClient._json,
        imageScanCompletedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        vulnerabilitySourceUpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_LifecyclePolicyPreviewResult = (output, context) => {
    return smithyClient.take(output, {
        action: smithyClient._json,
        appliedRulePriority: smithyClient.expectInt32,
        imageDigest: smithyClient.expectString,
        imagePushedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        imageTags: smithyClient._json,
    });
};
const de_LifecyclePolicyPreviewResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LifecyclePolicyPreviewResult(entry);
    });
    return retVal;
};
const de_PackageVulnerabilityDetails = (output, context) => {
    return smithyClient.take(output, {
        cvss: (_) => de_CvssScoreList(_),
        referenceUrls: smithyClient._json,
        relatedVulnerabilities: smithyClient._json,
        source: smithyClient.expectString,
        sourceUrl: smithyClient.expectString,
        vendorCreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        vendorSeverity: smithyClient.expectString,
        vendorUpdatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        vulnerabilityId: smithyClient.expectString,
        vulnerablePackages: smithyClient._json,
    });
};
const de_PullThroughCacheRule = (output, context) => {
    return smithyClient.take(output, {
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        credentialArn: smithyClient.expectString,
        customRoleArn: smithyClient.expectString,
        ecrRepositoryPrefix: smithyClient.expectString,
        registryId: smithyClient.expectString,
        updatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        upstreamRegistry: smithyClient.expectString,
        upstreamRegistryUrl: smithyClient.expectString,
        upstreamRepositoryPrefix: smithyClient.expectString,
    });
};
const de_PullThroughCacheRuleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PullThroughCacheRule(entry);
    });
    return retVal;
};
const de_Repository = (output, context) => {
    return smithyClient.take(output, {
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        encryptionConfiguration: smithyClient._json,
        imageScanningConfiguration: smithyClient._json,
        imageTagMutability: smithyClient.expectString,
        imageTagMutabilityExclusionFilters: smithyClient._json,
        registryId: smithyClient.expectString,
        repositoryArn: smithyClient.expectString,
        repositoryName: smithyClient.expectString,
        repositoryUri: smithyClient.expectString,
    });
};
const de_RepositoryCreationTemplate = (output, context) => {
    return smithyClient.take(output, {
        appliedFor: smithyClient._json,
        createdAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        customRoleArn: smithyClient.expectString,
        description: smithyClient.expectString,
        encryptionConfiguration: smithyClient._json,
        imageTagMutability: smithyClient.expectString,
        imageTagMutabilityExclusionFilters: smithyClient._json,
        lifecyclePolicy: smithyClient.expectString,
        prefix: smithyClient.expectString,
        repositoryPolicy: smithyClient.expectString,
        resourceTags: smithyClient._json,
        updatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_RepositoryCreationTemplateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RepositoryCreationTemplate(entry);
    });
    return retVal;
};
const de_RepositoryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Repository(entry);
    });
    return retVal;
};
const de_Resource = (output, context) => {
    return smithyClient.take(output, {
        details: (_) => de_ResourceDetails(_),
        id: smithyClient.expectString,
        tags: smithyClient._json,
        type: smithyClient.expectString,
    });
};
const de_ResourceDetails = (output, context) => {
    return smithyClient.take(output, {
        awsEcrContainerImage: (_) => de_AwsEcrContainerImageDetails(_),
    });
};
const de_ResourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Resource(entry);
    });
    return retVal;
};
const de_ScoreDetails = (output, context) => {
    return smithyClient.take(output, {
        cvss: (_) => de_CvssScoreDetails(_),
    });
};
const de_UpdatePullThroughCacheRuleResponse = (output, context) => {
    return smithyClient.take(output, {
        credentialArn: smithyClient.expectString,
        customRoleArn: smithyClient.expectString,
        ecrRepositoryPrefix: smithyClient.expectString,
        registryId: smithyClient.expectString,
        updatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        upstreamRepositoryPrefix: smithyClient.expectString,
    });
};
const de_UpdateRepositoryCreationTemplateResponse = (output, context) => {
    return smithyClient.take(output, {
        registryId: smithyClient.expectString,
        repositoryCreationTemplate: (_) => de_RepositoryCreationTemplate(_),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(ECRServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AmazonEC2ContainerRegistry_V20150921.${operation}`,
    };
}

class BatchCheckLayerAvailabilityCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "BatchCheckLayerAvailability", {})
    .n("ECRClient", "BatchCheckLayerAvailabilityCommand")
    .f(void 0, void 0)
    .ser(se_BatchCheckLayerAvailabilityCommand)
    .de(de_BatchCheckLayerAvailabilityCommand)
    .build() {
}

class BatchDeleteImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "BatchDeleteImage", {})
    .n("ECRClient", "BatchDeleteImageCommand")
    .f(void 0, void 0)
    .ser(se_BatchDeleteImageCommand)
    .de(de_BatchDeleteImageCommand)
    .build() {
}

class BatchGetImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "BatchGetImage", {})
    .n("ECRClient", "BatchGetImageCommand")
    .f(void 0, void 0)
    .ser(se_BatchGetImageCommand)
    .de(de_BatchGetImageCommand)
    .build() {
}

class BatchGetRepositoryScanningConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "BatchGetRepositoryScanningConfiguration", {})
    .n("ECRClient", "BatchGetRepositoryScanningConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_BatchGetRepositoryScanningConfigurationCommand)
    .de(de_BatchGetRepositoryScanningConfigurationCommand)
    .build() {
}

class CompleteLayerUploadCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "CompleteLayerUpload", {})
    .n("ECRClient", "CompleteLayerUploadCommand")
    .f(void 0, void 0)
    .ser(se_CompleteLayerUploadCommand)
    .de(de_CompleteLayerUploadCommand)
    .build() {
}

class CreatePullThroughCacheRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "CreatePullThroughCacheRule", {})
    .n("ECRClient", "CreatePullThroughCacheRuleCommand")
    .f(void 0, void 0)
    .ser(se_CreatePullThroughCacheRuleCommand)
    .de(de_CreatePullThroughCacheRuleCommand)
    .build() {
}

class CreateRepositoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "CreateRepository", {})
    .n("ECRClient", "CreateRepositoryCommand")
    .f(void 0, void 0)
    .ser(se_CreateRepositoryCommand)
    .de(de_CreateRepositoryCommand)
    .build() {
}

class CreateRepositoryCreationTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "CreateRepositoryCreationTemplate", {})
    .n("ECRClient", "CreateRepositoryCreationTemplateCommand")
    .f(void 0, void 0)
    .ser(se_CreateRepositoryCreationTemplateCommand)
    .de(de_CreateRepositoryCreationTemplateCommand)
    .build() {
}

class DeleteLifecyclePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DeleteLifecyclePolicy", {})
    .n("ECRClient", "DeleteLifecyclePolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLifecyclePolicyCommand)
    .de(de_DeleteLifecyclePolicyCommand)
    .build() {
}

class DeletePullThroughCacheRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DeletePullThroughCacheRule", {})
    .n("ECRClient", "DeletePullThroughCacheRuleCommand")
    .f(void 0, void 0)
    .ser(se_DeletePullThroughCacheRuleCommand)
    .de(de_DeletePullThroughCacheRuleCommand)
    .build() {
}

class DeleteRegistryPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DeleteRegistryPolicy", {})
    .n("ECRClient", "DeleteRegistryPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRegistryPolicyCommand)
    .de(de_DeleteRegistryPolicyCommand)
    .build() {
}

class DeleteRepositoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DeleteRepository", {})
    .n("ECRClient", "DeleteRepositoryCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRepositoryCommand)
    .de(de_DeleteRepositoryCommand)
    .build() {
}

class DeleteRepositoryCreationTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DeleteRepositoryCreationTemplate", {})
    .n("ECRClient", "DeleteRepositoryCreationTemplateCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRepositoryCreationTemplateCommand)
    .de(de_DeleteRepositoryCreationTemplateCommand)
    .build() {
}

class DeleteRepositoryPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DeleteRepositoryPolicy", {})
    .n("ECRClient", "DeleteRepositoryPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRepositoryPolicyCommand)
    .de(de_DeleteRepositoryPolicyCommand)
    .build() {
}

class DescribeImageReplicationStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DescribeImageReplicationStatus", {})
    .n("ECRClient", "DescribeImageReplicationStatusCommand")
    .f(void 0, void 0)
    .ser(se_DescribeImageReplicationStatusCommand)
    .de(de_DescribeImageReplicationStatusCommand)
    .build() {
}

class DescribeImageScanFindingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DescribeImageScanFindings", {})
    .n("ECRClient", "DescribeImageScanFindingsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeImageScanFindingsCommand)
    .de(de_DescribeImageScanFindingsCommand)
    .build() {
}

class DescribeImagesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DescribeImages", {})
    .n("ECRClient", "DescribeImagesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeImagesCommand)
    .de(de_DescribeImagesCommand)
    .build() {
}

class DescribePullThroughCacheRulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DescribePullThroughCacheRules", {})
    .n("ECRClient", "DescribePullThroughCacheRulesCommand")
    .f(void 0, void 0)
    .ser(se_DescribePullThroughCacheRulesCommand)
    .de(de_DescribePullThroughCacheRulesCommand)
    .build() {
}

class DescribeRegistryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DescribeRegistry", {})
    .n("ECRClient", "DescribeRegistryCommand")
    .f(void 0, void 0)
    .ser(se_DescribeRegistryCommand)
    .de(de_DescribeRegistryCommand)
    .build() {
}

class DescribeRepositoriesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DescribeRepositories", {})
    .n("ECRClient", "DescribeRepositoriesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeRepositoriesCommand)
    .de(de_DescribeRepositoriesCommand)
    .build() {
}

class DescribeRepositoryCreationTemplatesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "DescribeRepositoryCreationTemplates", {})
    .n("ECRClient", "DescribeRepositoryCreationTemplatesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeRepositoryCreationTemplatesCommand)
    .de(de_DescribeRepositoryCreationTemplatesCommand)
    .build() {
}

class GetAccountSettingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "GetAccountSetting", {})
    .n("ECRClient", "GetAccountSettingCommand")
    .f(void 0, void 0)
    .ser(se_GetAccountSettingCommand)
    .de(de_GetAccountSettingCommand)
    .build() {
}

class GetAuthorizationTokenCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "GetAuthorizationToken", {})
    .n("ECRClient", "GetAuthorizationTokenCommand")
    .f(void 0, void 0)
    .ser(se_GetAuthorizationTokenCommand)
    .de(de_GetAuthorizationTokenCommand)
    .build() {
}

class GetDownloadUrlForLayerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "GetDownloadUrlForLayer", {})
    .n("ECRClient", "GetDownloadUrlForLayerCommand")
    .f(void 0, void 0)
    .ser(se_GetDownloadUrlForLayerCommand)
    .de(de_GetDownloadUrlForLayerCommand)
    .build() {
}

class GetLifecyclePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "GetLifecyclePolicy", {})
    .n("ECRClient", "GetLifecyclePolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetLifecyclePolicyCommand)
    .de(de_GetLifecyclePolicyCommand)
    .build() {
}

class GetLifecyclePolicyPreviewCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "GetLifecyclePolicyPreview", {})
    .n("ECRClient", "GetLifecyclePolicyPreviewCommand")
    .f(void 0, void 0)
    .ser(se_GetLifecyclePolicyPreviewCommand)
    .de(de_GetLifecyclePolicyPreviewCommand)
    .build() {
}

class GetRegistryPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "GetRegistryPolicy", {})
    .n("ECRClient", "GetRegistryPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetRegistryPolicyCommand)
    .de(de_GetRegistryPolicyCommand)
    .build() {
}

class GetRegistryScanningConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "GetRegistryScanningConfiguration", {})
    .n("ECRClient", "GetRegistryScanningConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_GetRegistryScanningConfigurationCommand)
    .de(de_GetRegistryScanningConfigurationCommand)
    .build() {
}

class GetRepositoryPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "GetRepositoryPolicy", {})
    .n("ECRClient", "GetRepositoryPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetRepositoryPolicyCommand)
    .de(de_GetRepositoryPolicyCommand)
    .build() {
}

class InitiateLayerUploadCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "InitiateLayerUpload", {})
    .n("ECRClient", "InitiateLayerUploadCommand")
    .f(void 0, void 0)
    .ser(se_InitiateLayerUploadCommand)
    .de(de_InitiateLayerUploadCommand)
    .build() {
}

class ListImagesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "ListImages", {})
    .n("ECRClient", "ListImagesCommand")
    .f(void 0, void 0)
    .ser(se_ListImagesCommand)
    .de(de_ListImagesCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "ListTagsForResource", {})
    .n("ECRClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class PutAccountSettingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "PutAccountSetting", {})
    .n("ECRClient", "PutAccountSettingCommand")
    .f(void 0, void 0)
    .ser(se_PutAccountSettingCommand)
    .de(de_PutAccountSettingCommand)
    .build() {
}

class PutImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "PutImage", {})
    .n("ECRClient", "PutImageCommand")
    .f(void 0, void 0)
    .ser(se_PutImageCommand)
    .de(de_PutImageCommand)
    .build() {
}

class PutImageScanningConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "PutImageScanningConfiguration", {})
    .n("ECRClient", "PutImageScanningConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_PutImageScanningConfigurationCommand)
    .de(de_PutImageScanningConfigurationCommand)
    .build() {
}

class PutImageTagMutabilityCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "PutImageTagMutability", {})
    .n("ECRClient", "PutImageTagMutabilityCommand")
    .f(void 0, void 0)
    .ser(se_PutImageTagMutabilityCommand)
    .de(de_PutImageTagMutabilityCommand)
    .build() {
}

class PutLifecyclePolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "PutLifecyclePolicy", {})
    .n("ECRClient", "PutLifecyclePolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutLifecyclePolicyCommand)
    .de(de_PutLifecyclePolicyCommand)
    .build() {
}

class PutRegistryPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "PutRegistryPolicy", {})
    .n("ECRClient", "PutRegistryPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutRegistryPolicyCommand)
    .de(de_PutRegistryPolicyCommand)
    .build() {
}

class PutRegistryScanningConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "PutRegistryScanningConfiguration", {})
    .n("ECRClient", "PutRegistryScanningConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_PutRegistryScanningConfigurationCommand)
    .de(de_PutRegistryScanningConfigurationCommand)
    .build() {
}

class PutReplicationConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "PutReplicationConfiguration", {})
    .n("ECRClient", "PutReplicationConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_PutReplicationConfigurationCommand)
    .de(de_PutReplicationConfigurationCommand)
    .build() {
}

class SetRepositoryPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "SetRepositoryPolicy", {})
    .n("ECRClient", "SetRepositoryPolicyCommand")
    .f(void 0, void 0)
    .ser(se_SetRepositoryPolicyCommand)
    .de(de_SetRepositoryPolicyCommand)
    .build() {
}

class StartImageScanCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "StartImageScan", {})
    .n("ECRClient", "StartImageScanCommand")
    .f(void 0, void 0)
    .ser(se_StartImageScanCommand)
    .de(de_StartImageScanCommand)
    .build() {
}

class StartLifecyclePolicyPreviewCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "StartLifecyclePolicyPreview", {})
    .n("ECRClient", "StartLifecyclePolicyPreviewCommand")
    .f(void 0, void 0)
    .ser(se_StartLifecyclePolicyPreviewCommand)
    .de(de_StartLifecyclePolicyPreviewCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "TagResource", {})
    .n("ECRClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "UntagResource", {})
    .n("ECRClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdatePullThroughCacheRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "UpdatePullThroughCacheRule", {})
    .n("ECRClient", "UpdatePullThroughCacheRuleCommand")
    .f(void 0, void 0)
    .ser(se_UpdatePullThroughCacheRuleCommand)
    .de(de_UpdatePullThroughCacheRuleCommand)
    .build() {
}

class UpdateRepositoryCreationTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "UpdateRepositoryCreationTemplate", {})
    .n("ECRClient", "UpdateRepositoryCreationTemplateCommand")
    .f(void 0, void 0)
    .ser(se_UpdateRepositoryCreationTemplateCommand)
    .de(de_UpdateRepositoryCreationTemplateCommand)
    .build() {
}

class UploadLayerPartCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "UploadLayerPart", {})
    .n("ECRClient", "UploadLayerPartCommand")
    .f(void 0, void 0)
    .ser(se_UploadLayerPartCommand)
    .de(de_UploadLayerPartCommand)
    .build() {
}

class ValidatePullThroughCacheRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2ContainerRegistry_V20150921", "ValidatePullThroughCacheRule", {})
    .n("ECRClient", "ValidatePullThroughCacheRuleCommand")
    .f(void 0, void 0)
    .ser(se_ValidatePullThroughCacheRuleCommand)
    .de(de_ValidatePullThroughCacheRuleCommand)
    .build() {
}

const commands = {
    BatchCheckLayerAvailabilityCommand,
    BatchDeleteImageCommand,
    BatchGetImageCommand,
    BatchGetRepositoryScanningConfigurationCommand,
    CompleteLayerUploadCommand,
    CreatePullThroughCacheRuleCommand,
    CreateRepositoryCommand,
    CreateRepositoryCreationTemplateCommand,
    DeleteLifecyclePolicyCommand,
    DeletePullThroughCacheRuleCommand,
    DeleteRegistryPolicyCommand,
    DeleteRepositoryCommand,
    DeleteRepositoryCreationTemplateCommand,
    DeleteRepositoryPolicyCommand,
    DescribeImageReplicationStatusCommand,
    DescribeImagesCommand,
    DescribeImageScanFindingsCommand,
    DescribePullThroughCacheRulesCommand,
    DescribeRegistryCommand,
    DescribeRepositoriesCommand,
    DescribeRepositoryCreationTemplatesCommand,
    GetAccountSettingCommand,
    GetAuthorizationTokenCommand,
    GetDownloadUrlForLayerCommand,
    GetLifecyclePolicyCommand,
    GetLifecyclePolicyPreviewCommand,
    GetRegistryPolicyCommand,
    GetRegistryScanningConfigurationCommand,
    GetRepositoryPolicyCommand,
    InitiateLayerUploadCommand,
    ListImagesCommand,
    ListTagsForResourceCommand,
    PutAccountSettingCommand,
    PutImageCommand,
    PutImageScanningConfigurationCommand,
    PutImageTagMutabilityCommand,
    PutLifecyclePolicyCommand,
    PutRegistryPolicyCommand,
    PutRegistryScanningConfigurationCommand,
    PutReplicationConfigurationCommand,
    SetRepositoryPolicyCommand,
    StartImageScanCommand,
    StartLifecyclePolicyPreviewCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdatePullThroughCacheRuleCommand,
    UpdateRepositoryCreationTemplateCommand,
    UploadLayerPartCommand,
    ValidatePullThroughCacheRuleCommand,
};
class ECR extends ECRClient {
}
smithyClient.createAggregatedClient(commands, ECR);

const paginateDescribeImageScanFindings = core.createPaginator(ECRClient, DescribeImageScanFindingsCommand, "nextToken", "nextToken", "maxResults");

const paginateDescribeImages = core.createPaginator(ECRClient, DescribeImagesCommand, "nextToken", "nextToken", "maxResults");

const paginateDescribePullThroughCacheRules = core.createPaginator(ECRClient, DescribePullThroughCacheRulesCommand, "nextToken", "nextToken", "maxResults");

const paginateDescribeRepositories = core.createPaginator(ECRClient, DescribeRepositoriesCommand, "nextToken", "nextToken", "maxResults");

const paginateDescribeRepositoryCreationTemplates = core.createPaginator(ECRClient, DescribeRepositoryCreationTemplatesCommand, "nextToken", "nextToken", "maxResults");

const paginateGetLifecyclePolicyPreview = core.createPaginator(ECRClient, GetLifecyclePolicyPreviewCommand, "nextToken", "nextToken", "maxResults");

const paginateListImages = core.createPaginator(ECRClient, ListImagesCommand, "nextToken", "nextToken", "maxResults");

const checkState$1 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeImageScanFindingsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.imageScanStatus.status;
            };
            if (returnComparator() === "COMPLETE") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.imageScanStatus.status;
            };
            if (returnComparator() === "FAILED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForImageScanComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
};
const waitUntilImageScanComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
    return utilWaiter.checkExceptions(result);
};

const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new GetLifecyclePolicyPreviewCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.status;
            };
            if (returnComparator() === "COMPLETE") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.status;
            };
            if (returnComparator() === "FAILED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForLifecyclePolicyPreviewComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilLifecyclePolicyPreviewComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return utilWaiter.checkExceptions(result);
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.BatchCheckLayerAvailabilityCommand = BatchCheckLayerAvailabilityCommand;
exports.BatchDeleteImageCommand = BatchDeleteImageCommand;
exports.BatchGetImageCommand = BatchGetImageCommand;
exports.BatchGetRepositoryScanningConfigurationCommand = BatchGetRepositoryScanningConfigurationCommand;
exports.CompleteLayerUploadCommand = CompleteLayerUploadCommand;
exports.CreatePullThroughCacheRuleCommand = CreatePullThroughCacheRuleCommand;
exports.CreateRepositoryCommand = CreateRepositoryCommand;
exports.CreateRepositoryCreationTemplateCommand = CreateRepositoryCreationTemplateCommand;
exports.DeleteLifecyclePolicyCommand = DeleteLifecyclePolicyCommand;
exports.DeletePullThroughCacheRuleCommand = DeletePullThroughCacheRuleCommand;
exports.DeleteRegistryPolicyCommand = DeleteRegistryPolicyCommand;
exports.DeleteRepositoryCommand = DeleteRepositoryCommand;
exports.DeleteRepositoryCreationTemplateCommand = DeleteRepositoryCreationTemplateCommand;
exports.DeleteRepositoryPolicyCommand = DeleteRepositoryPolicyCommand;
exports.DescribeImageReplicationStatusCommand = DescribeImageReplicationStatusCommand;
exports.DescribeImageScanFindingsCommand = DescribeImageScanFindingsCommand;
exports.DescribeImagesCommand = DescribeImagesCommand;
exports.DescribePullThroughCacheRulesCommand = DescribePullThroughCacheRulesCommand;
exports.DescribeRegistryCommand = DescribeRegistryCommand;
exports.DescribeRepositoriesCommand = DescribeRepositoriesCommand;
exports.DescribeRepositoryCreationTemplatesCommand = DescribeRepositoryCreationTemplatesCommand;
exports.ECR = ECR;
exports.ECRClient = ECRClient;
exports.ECRServiceException = ECRServiceException;
exports.EmptyUploadException = EmptyUploadException;
exports.EncryptionType = EncryptionType;
exports.FindingSeverity = FindingSeverity;
exports.GetAccountSettingCommand = GetAccountSettingCommand;
exports.GetAuthorizationTokenCommand = GetAuthorizationTokenCommand;
exports.GetDownloadUrlForLayerCommand = GetDownloadUrlForLayerCommand;
exports.GetLifecyclePolicyCommand = GetLifecyclePolicyCommand;
exports.GetLifecyclePolicyPreviewCommand = GetLifecyclePolicyPreviewCommand;
exports.GetRegistryPolicyCommand = GetRegistryPolicyCommand;
exports.GetRegistryScanningConfigurationCommand = GetRegistryScanningConfigurationCommand;
exports.GetRepositoryPolicyCommand = GetRepositoryPolicyCommand;
exports.ImageActionType = ImageActionType;
exports.ImageAlreadyExistsException = ImageAlreadyExistsException;
exports.ImageDigestDoesNotMatchException = ImageDigestDoesNotMatchException;
exports.ImageFailureCode = ImageFailureCode;
exports.ImageNotFoundException = ImageNotFoundException;
exports.ImageTagAlreadyExistsException = ImageTagAlreadyExistsException;
exports.ImageTagMutability = ImageTagMutability;
exports.ImageTagMutabilityExclusionFilterType = ImageTagMutabilityExclusionFilterType;
exports.InitiateLayerUploadCommand = InitiateLayerUploadCommand;
exports.InvalidLayerException = InvalidLayerException;
exports.InvalidLayerPartException = InvalidLayerPartException;
exports.InvalidParameterException = InvalidParameterException;
exports.InvalidTagParameterException = InvalidTagParameterException;
exports.KmsException = KmsException;
exports.LayerAlreadyExistsException = LayerAlreadyExistsException;
exports.LayerAvailability = LayerAvailability;
exports.LayerFailureCode = LayerFailureCode;
exports.LayerInaccessibleException = LayerInaccessibleException;
exports.LayerPartTooSmallException = LayerPartTooSmallException;
exports.LayersNotFoundException = LayersNotFoundException;
exports.LifecyclePolicyNotFoundException = LifecyclePolicyNotFoundException;
exports.LifecyclePolicyPreviewInProgressException = LifecyclePolicyPreviewInProgressException;
exports.LifecyclePolicyPreviewNotFoundException = LifecyclePolicyPreviewNotFoundException;
exports.LifecyclePolicyPreviewStatus = LifecyclePolicyPreviewStatus;
exports.LimitExceededException = LimitExceededException;
exports.ListImagesCommand = ListImagesCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.PullThroughCacheRuleAlreadyExistsException = PullThroughCacheRuleAlreadyExistsException;
exports.PullThroughCacheRuleNotFoundException = PullThroughCacheRuleNotFoundException;
exports.PutAccountSettingCommand = PutAccountSettingCommand;
exports.PutImageCommand = PutImageCommand;
exports.PutImageScanningConfigurationCommand = PutImageScanningConfigurationCommand;
exports.PutImageTagMutabilityCommand = PutImageTagMutabilityCommand;
exports.PutLifecyclePolicyCommand = PutLifecyclePolicyCommand;
exports.PutRegistryPolicyCommand = PutRegistryPolicyCommand;
exports.PutRegistryScanningConfigurationCommand = PutRegistryScanningConfigurationCommand;
exports.PutReplicationConfigurationCommand = PutReplicationConfigurationCommand;
exports.RCTAppliedFor = RCTAppliedFor;
exports.ReferencedImagesNotFoundException = ReferencedImagesNotFoundException;
exports.RegistryPolicyNotFoundException = RegistryPolicyNotFoundException;
exports.ReplicationStatus = ReplicationStatus;
exports.RepositoryAlreadyExistsException = RepositoryAlreadyExistsException;
exports.RepositoryFilterType = RepositoryFilterType;
exports.RepositoryNotEmptyException = RepositoryNotEmptyException;
exports.RepositoryNotFoundException = RepositoryNotFoundException;
exports.RepositoryPolicyNotFoundException = RepositoryPolicyNotFoundException;
exports.ScanFrequency = ScanFrequency;
exports.ScanNotFoundException = ScanNotFoundException;
exports.ScanStatus = ScanStatus;
exports.ScanType = ScanType;
exports.ScanningConfigurationFailureCode = ScanningConfigurationFailureCode;
exports.ScanningRepositoryFilterType = ScanningRepositoryFilterType;
exports.SecretNotFoundException = SecretNotFoundException;
exports.ServerException = ServerException;
exports.SetRepositoryPolicyCommand = SetRepositoryPolicyCommand;
exports.StartImageScanCommand = StartImageScanCommand;
exports.StartLifecyclePolicyPreviewCommand = StartLifecyclePolicyPreviewCommand;
exports.TagResourceCommand = TagResourceCommand;
exports.TagStatus = TagStatus;
exports.TemplateAlreadyExistsException = TemplateAlreadyExistsException;
exports.TemplateNotFoundException = TemplateNotFoundException;
exports.TooManyTagsException = TooManyTagsException;
exports.UnableToAccessSecretException = UnableToAccessSecretException;
exports.UnableToDecryptSecretValueException = UnableToDecryptSecretValueException;
exports.UnableToGetUpstreamImageException = UnableToGetUpstreamImageException;
exports.UnableToGetUpstreamLayerException = UnableToGetUpstreamLayerException;
exports.UnsupportedImageTypeException = UnsupportedImageTypeException;
exports.UnsupportedUpstreamRegistryException = UnsupportedUpstreamRegistryException;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdatePullThroughCacheRuleCommand = UpdatePullThroughCacheRuleCommand;
exports.UpdateRepositoryCreationTemplateCommand = UpdateRepositoryCreationTemplateCommand;
exports.UploadLayerPartCommand = UploadLayerPartCommand;
exports.UploadNotFoundException = UploadNotFoundException;
exports.UpstreamRegistry = UpstreamRegistry;
exports.ValidatePullThroughCacheRuleCommand = ValidatePullThroughCacheRuleCommand;
exports.ValidationException = ValidationException;
exports.paginateDescribeImageScanFindings = paginateDescribeImageScanFindings;
exports.paginateDescribeImages = paginateDescribeImages;
exports.paginateDescribePullThroughCacheRules = paginateDescribePullThroughCacheRules;
exports.paginateDescribeRepositories = paginateDescribeRepositories;
exports.paginateDescribeRepositoryCreationTemplates = paginateDescribeRepositoryCreationTemplates;
exports.paginateGetLifecyclePolicyPreview = paginateGetLifecyclePolicyPreview;
exports.paginateListImages = paginateListImages;
exports.waitForImageScanComplete = waitForImageScanComplete;
exports.waitForLifecyclePolicyPreviewComplete = waitForLifecyclePolicyPreviewComplete;
exports.waitUntilImageScanComplete = waitUntilImageScanComplete;
exports.waitUntilLifecyclePolicyPreviewComplete = waitUntilLifecyclePolicyPreviewComplete;
