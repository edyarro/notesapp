'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');
var utilWaiter = require('@smithy/util-waiter');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "cloudcontrolapi",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class CloudControlClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultCloudControlHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class CloudControlServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, CloudControlServiceException.prototype);
    }
}

class AlreadyExistsException extends CloudControlServiceException {
    name = "AlreadyExistsException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "AlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
const HandlerErrorCode = {
    ACCESS_DENIED: "AccessDenied",
    ALREADY_EXISTS: "AlreadyExists",
    GENERAL_SERVICE_EXCEPTION: "GeneralServiceException",
    INTERNAL_FAILURE: "InternalFailure",
    INVALID_CREDENTIALS: "InvalidCredentials",
    INVALID_REQUEST: "InvalidRequest",
    NETWORK_FAILURE: "NetworkFailure",
    NOT_FOUND: "NotFound",
    NOT_STABILIZED: "NotStabilized",
    NOT_UPDATABLE: "NotUpdatable",
    RESOURCE_CONFLICT: "ResourceConflict",
    SERVICE_INTERNAL_ERROR: "ServiceInternalError",
    SERVICE_LIMIT_EXCEEDED: "ServiceLimitExceeded",
    SERVICE_TIMEOUT: "ServiceTimeout",
    THROTTLING: "Throttling",
    UNAUTHORIZED_TAGGING_OPERATION: "UnauthorizedTaggingOperation",
};
const Operation = {
    CREATE: "CREATE",
    DELETE: "DELETE",
    UPDATE: "UPDATE",
};
const OperationStatus = {
    CANCEL_COMPLETE: "CANCEL_COMPLETE",
    CANCEL_IN_PROGRESS: "CANCEL_IN_PROGRESS",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
    SUCCESS: "SUCCESS",
};
class ConcurrentModificationException extends CloudControlServiceException {
    name = "ConcurrentModificationException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
class RequestTokenNotFoundException extends CloudControlServiceException {
    name = "RequestTokenNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "RequestTokenNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RequestTokenNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
class ClientTokenConflictException extends CloudControlServiceException {
    name = "ClientTokenConflictException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ClientTokenConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ClientTokenConflictException.prototype);
        this.Message = opts.Message;
    }
}
class ConcurrentOperationException extends CloudControlServiceException {
    name = "ConcurrentOperationException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConcurrentOperationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentOperationException.prototype);
        this.Message = opts.Message;
    }
}
class GeneralServiceException extends CloudControlServiceException {
    name = "GeneralServiceException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "GeneralServiceException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, GeneralServiceException.prototype);
        this.Message = opts.Message;
    }
}
class HandlerFailureException extends CloudControlServiceException {
    name = "HandlerFailureException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "HandlerFailureException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, HandlerFailureException.prototype);
        this.Message = opts.Message;
    }
}
class HandlerInternalFailureException extends CloudControlServiceException {
    name = "HandlerInternalFailureException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "HandlerInternalFailureException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, HandlerInternalFailureException.prototype);
        this.Message = opts.Message;
    }
}
class InvalidCredentialsException extends CloudControlServiceException {
    name = "InvalidCredentialsException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "InvalidCredentialsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidCredentialsException.prototype);
        this.Message = opts.Message;
    }
}
class InvalidRequestException extends CloudControlServiceException {
    name = "InvalidRequestException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
class NetworkFailureException extends CloudControlServiceException {
    name = "NetworkFailureException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "NetworkFailureException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, NetworkFailureException.prototype);
        this.Message = opts.Message;
    }
}
class NotStabilizedException extends CloudControlServiceException {
    name = "NotStabilizedException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "NotStabilizedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotStabilizedException.prototype);
        this.Message = opts.Message;
    }
}
class NotUpdatableException extends CloudControlServiceException {
    name = "NotUpdatableException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "NotUpdatableException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotUpdatableException.prototype);
        this.Message = opts.Message;
    }
}
class PrivateTypeException extends CloudControlServiceException {
    name = "PrivateTypeException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "PrivateTypeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PrivateTypeException.prototype);
        this.Message = opts.Message;
    }
}
class ResourceConflictException extends CloudControlServiceException {
    name = "ResourceConflictException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceConflictException.prototype);
        this.Message = opts.Message;
    }
}
class ResourceNotFoundException extends CloudControlServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
class ServiceInternalErrorException extends CloudControlServiceException {
    name = "ServiceInternalErrorException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "ServiceInternalErrorException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceInternalErrorException.prototype);
        this.Message = opts.Message;
    }
}
class ServiceLimitExceededException extends CloudControlServiceException {
    name = "ServiceLimitExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ServiceLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
class ThrottlingException extends CloudControlServiceException {
    name = "ThrottlingException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
class TypeNotFoundException extends CloudControlServiceException {
    name = "TypeNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "TypeNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TypeNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
class UnsupportedActionException extends CloudControlServiceException {
    name = "UnsupportedActionException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "UnsupportedActionException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedActionException.prototype);
        this.Message = opts.Message;
    }
}
const ProgressEventFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ResourceModel && { ResourceModel: smithyClient.SENSITIVE_STRING }),
});
const CancelResourceRequestOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ProgressEvent && { ProgressEvent: ProgressEventFilterSensitiveLog(obj.ProgressEvent) }),
});
const CreateResourceInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DesiredState && { DesiredState: smithyClient.SENSITIVE_STRING }),
});
const CreateResourceOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ProgressEvent && { ProgressEvent: ProgressEventFilterSensitiveLog(obj.ProgressEvent) }),
});
const DeleteResourceOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ProgressEvent && { ProgressEvent: ProgressEventFilterSensitiveLog(obj.ProgressEvent) }),
});
const ResourceDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Properties && { Properties: smithyClient.SENSITIVE_STRING }),
});
const GetResourceOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ResourceDescription && {
        ResourceDescription: ResourceDescriptionFilterSensitiveLog(obj.ResourceDescription),
    }),
});
const GetResourceRequestStatusOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ProgressEvent && { ProgressEvent: ProgressEventFilterSensitiveLog(obj.ProgressEvent) }),
});
const ListResourceRequestsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ResourceRequestStatusSummaries && {
        ResourceRequestStatusSummaries: obj.ResourceRequestStatusSummaries.map((item) => ProgressEventFilterSensitiveLog(item)),
    }),
});
const ListResourcesInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ResourceModel && { ResourceModel: smithyClient.SENSITIVE_STRING }),
});
const ListResourcesOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ResourceDescriptions && {
        ResourceDescriptions: obj.ResourceDescriptions.map((item) => ResourceDescriptionFilterSensitiveLog(item)),
    }),
});
const UpdateResourceInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PatchDocument && { PatchDocument: smithyClient.SENSITIVE_STRING }),
});
const UpdateResourceOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ProgressEvent && { ProgressEvent: ProgressEventFilterSensitiveLog(obj.ProgressEvent) }),
});

const se_CancelResourceRequestCommand = async (input, context) => {
    const headers = sharedHeaders("CancelResourceRequest");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateResourceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateResource");
    let body;
    body = JSON.stringify(se_CreateResourceInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteResourceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResource");
    let body;
    body = JSON.stringify(se_DeleteResourceInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetResourceCommand = async (input, context) => {
    const headers = sharedHeaders("GetResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetResourceRequestStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourceRequestStatus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListResourceRequestsCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceRequests");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListResources");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateResource");
    let body;
    body = JSON.stringify(se_UpdateResourceInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_CancelResourceRequestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CancelResourceRequestOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateResourceOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteResourceOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetResourceRequestStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetResourceRequestStatusOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListResourceRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListResourceRequestsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateResourceOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.cloudcontrol#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput);
        case "RequestTokenNotFoundException":
        case "com.amazonaws.cloudcontrol#RequestTokenNotFoundException":
            throw await de_RequestTokenNotFoundExceptionRes(parsedOutput);
        case "AlreadyExistsException":
        case "com.amazonaws.cloudcontrol#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput);
        case "ClientTokenConflictException":
        case "com.amazonaws.cloudcontrol#ClientTokenConflictException":
            throw await de_ClientTokenConflictExceptionRes(parsedOutput);
        case "ConcurrentOperationException":
        case "com.amazonaws.cloudcontrol#ConcurrentOperationException":
            throw await de_ConcurrentOperationExceptionRes(parsedOutput);
        case "GeneralServiceException":
        case "com.amazonaws.cloudcontrol#GeneralServiceException":
            throw await de_GeneralServiceExceptionRes(parsedOutput);
        case "HandlerFailureException":
        case "com.amazonaws.cloudcontrol#HandlerFailureException":
            throw await de_HandlerFailureExceptionRes(parsedOutput);
        case "HandlerInternalFailureException":
        case "com.amazonaws.cloudcontrol#HandlerInternalFailureException":
            throw await de_HandlerInternalFailureExceptionRes(parsedOutput);
        case "InvalidCredentialsException":
        case "com.amazonaws.cloudcontrol#InvalidCredentialsException":
            throw await de_InvalidCredentialsExceptionRes(parsedOutput);
        case "InvalidRequestException":
        case "com.amazonaws.cloudcontrol#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput);
        case "NetworkFailureException":
        case "com.amazonaws.cloudcontrol#NetworkFailureException":
            throw await de_NetworkFailureExceptionRes(parsedOutput);
        case "NotStabilizedException":
        case "com.amazonaws.cloudcontrol#NotStabilizedException":
            throw await de_NotStabilizedExceptionRes(parsedOutput);
        case "NotUpdatableException":
        case "com.amazonaws.cloudcontrol#NotUpdatableException":
            throw await de_NotUpdatableExceptionRes(parsedOutput);
        case "PrivateTypeException":
        case "com.amazonaws.cloudcontrol#PrivateTypeException":
            throw await de_PrivateTypeExceptionRes(parsedOutput);
        case "ResourceConflictException":
        case "com.amazonaws.cloudcontrol#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.cloudcontrol#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "ServiceInternalErrorException":
        case "com.amazonaws.cloudcontrol#ServiceInternalErrorException":
            throw await de_ServiceInternalErrorExceptionRes(parsedOutput);
        case "ServiceLimitExceededException":
        case "com.amazonaws.cloudcontrol#ServiceLimitExceededException":
            throw await de_ServiceLimitExceededExceptionRes(parsedOutput);
        case "ThrottlingException":
        case "com.amazonaws.cloudcontrol#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudcontrol#TypeNotFoundException":
            throw await de_TypeNotFoundExceptionRes(parsedOutput);
        case "UnsupportedActionException":
        case "com.amazonaws.cloudcontrol#UnsupportedActionException":
            throw await de_UnsupportedActionExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ClientTokenConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ClientTokenConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConcurrentOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConcurrentOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_GeneralServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new GeneralServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_HandlerFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new HandlerFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_HandlerInternalFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new HandlerInternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidCredentialsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidCredentialsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_NetworkFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new NetworkFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_NotStabilizedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new NotStabilizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_NotUpdatableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new NotUpdatableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PrivateTypeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new PrivateTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_RequestTokenNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new RequestTokenNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceInternalErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceInternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TypeNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TypeNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnsupportedActionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnsupportedActionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_CreateResourceInput = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        DesiredState: [],
        RoleArn: [],
        TypeName: [],
        TypeVersionId: [],
    });
};
const se_DeleteResourceInput = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        Identifier: [],
        RoleArn: [],
        TypeName: [],
        TypeVersionId: [],
    });
};
const se_UpdateResourceInput = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        Identifier: [],
        PatchDocument: [],
        RoleArn: [],
        TypeName: [],
        TypeVersionId: [],
    });
};
const de_CancelResourceRequestOutput = (output, context) => {
    return smithyClient.take(output, {
        ProgressEvent: (_) => de_ProgressEvent(_),
    });
};
const de_CreateResourceOutput = (output, context) => {
    return smithyClient.take(output, {
        ProgressEvent: (_) => de_ProgressEvent(_),
    });
};
const de_DeleteResourceOutput = (output, context) => {
    return smithyClient.take(output, {
        ProgressEvent: (_) => de_ProgressEvent(_),
    });
};
const de_GetResourceRequestStatusOutput = (output, context) => {
    return smithyClient.take(output, {
        HooksProgressEvent: (_) => de_HooksProgressEvent(_),
        ProgressEvent: (_) => de_ProgressEvent(_),
    });
};
const de_HookProgressEvent = (output, context) => {
    return smithyClient.take(output, {
        FailureMode: smithyClient.expectString,
        HookEventTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        HookStatus: smithyClient.expectString,
        HookStatusMessage: smithyClient.expectString,
        HookTypeArn: smithyClient.expectString,
        HookTypeName: smithyClient.expectString,
        HookTypeVersionId: smithyClient.expectString,
        InvocationPoint: smithyClient.expectString,
    });
};
const de_HooksProgressEvent = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HookProgressEvent(entry);
    });
    return retVal;
};
const de_ListResourceRequestsOutput = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        ResourceRequestStatusSummaries: (_) => de_ResourceRequestStatusSummaries(_),
    });
};
const de_ProgressEvent = (output, context) => {
    return smithyClient.take(output, {
        ErrorCode: smithyClient.expectString,
        EventTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        HooksRequestToken: smithyClient.expectString,
        Identifier: smithyClient.expectString,
        Operation: smithyClient.expectString,
        OperationStatus: smithyClient.expectString,
        RequestToken: smithyClient.expectString,
        ResourceModel: smithyClient.expectString,
        RetryAfter: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        StatusMessage: smithyClient.expectString,
        TypeName: smithyClient.expectString,
    });
};
const de_ResourceRequestStatusSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProgressEvent(entry);
    });
    return retVal;
};
const de_UpdateResourceOutput = (output, context) => {
    return smithyClient.take(output, {
        ProgressEvent: (_) => de_ProgressEvent(_),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(CloudControlServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `CloudApiService.${operation}`,
    };
}

class CancelResourceRequestCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudApiService", "CancelResourceRequest", {})
    .n("CloudControlClient", "CancelResourceRequestCommand")
    .f(void 0, CancelResourceRequestOutputFilterSensitiveLog)
    .ser(se_CancelResourceRequestCommand)
    .de(de_CancelResourceRequestCommand)
    .build() {
}

class CreateResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudApiService", "CreateResource", {})
    .n("CloudControlClient", "CreateResourceCommand")
    .f(CreateResourceInputFilterSensitiveLog, CreateResourceOutputFilterSensitiveLog)
    .ser(se_CreateResourceCommand)
    .de(de_CreateResourceCommand)
    .build() {
}

class DeleteResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudApiService", "DeleteResource", {})
    .n("CloudControlClient", "DeleteResourceCommand")
    .f(void 0, DeleteResourceOutputFilterSensitiveLog)
    .ser(se_DeleteResourceCommand)
    .de(de_DeleteResourceCommand)
    .build() {
}

class GetResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudApiService", "GetResource", {})
    .n("CloudControlClient", "GetResourceCommand")
    .f(void 0, GetResourceOutputFilterSensitiveLog)
    .ser(se_GetResourceCommand)
    .de(de_GetResourceCommand)
    .build() {
}

class GetResourceRequestStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudApiService", "GetResourceRequestStatus", {})
    .n("CloudControlClient", "GetResourceRequestStatusCommand")
    .f(void 0, GetResourceRequestStatusOutputFilterSensitiveLog)
    .ser(se_GetResourceRequestStatusCommand)
    .de(de_GetResourceRequestStatusCommand)
    .build() {
}

class ListResourceRequestsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudApiService", "ListResourceRequests", {})
    .n("CloudControlClient", "ListResourceRequestsCommand")
    .f(void 0, ListResourceRequestsOutputFilterSensitiveLog)
    .ser(se_ListResourceRequestsCommand)
    .de(de_ListResourceRequestsCommand)
    .build() {
}

class ListResourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudApiService", "ListResources", {})
    .n("CloudControlClient", "ListResourcesCommand")
    .f(ListResourcesInputFilterSensitiveLog, ListResourcesOutputFilterSensitiveLog)
    .ser(se_ListResourcesCommand)
    .de(de_ListResourcesCommand)
    .build() {
}

class UpdateResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("CloudApiService", "UpdateResource", {})
    .n("CloudControlClient", "UpdateResourceCommand")
    .f(UpdateResourceInputFilterSensitiveLog, UpdateResourceOutputFilterSensitiveLog)
    .ser(se_UpdateResourceCommand)
    .de(de_UpdateResourceCommand)
    .build() {
}

const commands = {
    CancelResourceRequestCommand,
    CreateResourceCommand,
    DeleteResourceCommand,
    GetResourceCommand,
    GetResourceRequestStatusCommand,
    ListResourceRequestsCommand,
    ListResourcesCommand,
    UpdateResourceCommand,
};
class CloudControl extends CloudControlClient {
}
smithyClient.createAggregatedClient(commands, CloudControl);

const paginateListResourceRequests = core.createPaginator(CloudControlClient, ListResourceRequestsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListResources = core.createPaginator(CloudControlClient, ListResourcesCommand, "NextToken", "NextToken", "MaxResults");

const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new GetResourceRequestStatusCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.ProgressEvent.OperationStatus;
            };
            if (returnComparator() === "SUCCESS") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.ProgressEvent.OperationStatus;
            };
            if (returnComparator() === "FAILED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.ProgressEvent.OperationStatus;
            };
            if (returnComparator() === "CANCEL_COMPLETE") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForResourceRequestSuccess = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilResourceRequestSuccess = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return utilWaiter.checkExceptions(result);
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AlreadyExistsException = AlreadyExistsException;
exports.CancelResourceRequestCommand = CancelResourceRequestCommand;
exports.CancelResourceRequestOutputFilterSensitiveLog = CancelResourceRequestOutputFilterSensitiveLog;
exports.ClientTokenConflictException = ClientTokenConflictException;
exports.CloudControl = CloudControl;
exports.CloudControlClient = CloudControlClient;
exports.CloudControlServiceException = CloudControlServiceException;
exports.ConcurrentModificationException = ConcurrentModificationException;
exports.ConcurrentOperationException = ConcurrentOperationException;
exports.CreateResourceCommand = CreateResourceCommand;
exports.CreateResourceInputFilterSensitiveLog = CreateResourceInputFilterSensitiveLog;
exports.CreateResourceOutputFilterSensitiveLog = CreateResourceOutputFilterSensitiveLog;
exports.DeleteResourceCommand = DeleteResourceCommand;
exports.DeleteResourceOutputFilterSensitiveLog = DeleteResourceOutputFilterSensitiveLog;
exports.GeneralServiceException = GeneralServiceException;
exports.GetResourceCommand = GetResourceCommand;
exports.GetResourceOutputFilterSensitiveLog = GetResourceOutputFilterSensitiveLog;
exports.GetResourceRequestStatusCommand = GetResourceRequestStatusCommand;
exports.GetResourceRequestStatusOutputFilterSensitiveLog = GetResourceRequestStatusOutputFilterSensitiveLog;
exports.HandlerErrorCode = HandlerErrorCode;
exports.HandlerFailureException = HandlerFailureException;
exports.HandlerInternalFailureException = HandlerInternalFailureException;
exports.InvalidCredentialsException = InvalidCredentialsException;
exports.InvalidRequestException = InvalidRequestException;
exports.ListResourceRequestsCommand = ListResourceRequestsCommand;
exports.ListResourceRequestsOutputFilterSensitiveLog = ListResourceRequestsOutputFilterSensitiveLog;
exports.ListResourcesCommand = ListResourcesCommand;
exports.ListResourcesInputFilterSensitiveLog = ListResourcesInputFilterSensitiveLog;
exports.ListResourcesOutputFilterSensitiveLog = ListResourcesOutputFilterSensitiveLog;
exports.NetworkFailureException = NetworkFailureException;
exports.NotStabilizedException = NotStabilizedException;
exports.NotUpdatableException = NotUpdatableException;
exports.Operation = Operation;
exports.OperationStatus = OperationStatus;
exports.PrivateTypeException = PrivateTypeException;
exports.ProgressEventFilterSensitiveLog = ProgressEventFilterSensitiveLog;
exports.RequestTokenNotFoundException = RequestTokenNotFoundException;
exports.ResourceConflictException = ResourceConflictException;
exports.ResourceDescriptionFilterSensitiveLog = ResourceDescriptionFilterSensitiveLog;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ServiceInternalErrorException = ServiceInternalErrorException;
exports.ServiceLimitExceededException = ServiceLimitExceededException;
exports.ThrottlingException = ThrottlingException;
exports.TypeNotFoundException = TypeNotFoundException;
exports.UnsupportedActionException = UnsupportedActionException;
exports.UpdateResourceCommand = UpdateResourceCommand;
exports.UpdateResourceInputFilterSensitiveLog = UpdateResourceInputFilterSensitiveLog;
exports.UpdateResourceOutputFilterSensitiveLog = UpdateResourceOutputFilterSensitiveLog;
exports.paginateListResourceRequests = paginateListResourceRequests;
exports.paginateListResources = paginateListResources;
exports.waitForResourceRequestSuccess = waitForResourceRequestSuccess;
exports.waitUntilResourceRequestSuccess = waitUntilResourceRequestSuccess;
