"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseMappingGroups = parseMappingGroups;
exports.mappingsByEnvironment = mappingsByEnvironment;
const refactoring_1 = require("../../../api/refactoring");
const toolkit_error_1 = require("../../../toolkit/toolkit-error");
function parseMappingGroups(s) {
    const mappingGroups = doParse();
    // Validate that there are no duplicate destinations.
    // By construction, there are no duplicate sources, already.
    for (let group of mappingGroups) {
        const destinations = new Set();
        for (const destination of Object.values(group.resources)) {
            if (destinations.has(destination)) {
                throw new toolkit_error_1.ToolkitError(`Duplicate destination resource '${destination}' in environment ${group.account}/${group.region}`);
            }
            destinations.add(destination);
        }
    }
    return mappingGroups;
    function doParse() {
        const content = JSON.parse(s);
        if (content.environments || !Array.isArray(content.environments)) {
            return content.environments;
        }
        else {
            throw new toolkit_error_1.ToolkitError("Expected an 'environments' array");
        }
    }
}
async function mappingsByEnvironment(stackArtifacts, sdkProvider, ignoreModifications) {
    const groups = await (0, refactoring_1.groupStacks)(sdkProvider, stackArtifacts, []);
    return groups.map((group) => {
        const context = new refactoring_1.RefactoringContext({
            ...group,
            ignoreModifications,
        });
        return {
            environment: context.environment,
            mappings: Object.fromEntries(context.mappings.map((m) => [m.source.toLocationString(), m.destination.toLocationString()])),
        };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwcGluZy1oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFwcGluZy1oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUEsZ0RBNEJDO0FBT0Qsc0RBa0JDO0FBeERELDBEQUEyRTtBQUMzRSxrRUFBOEQ7QUFFOUQsU0FBZ0Isa0JBQWtCLENBQUMsQ0FBUztJQUMxQyxNQUFNLGFBQWEsR0FBRyxPQUFPLEVBQUUsQ0FBQztJQUVoQyxxREFBcUQ7SUFDckQsNERBQTREO0lBQzVELEtBQUssSUFBSSxLQUFLLElBQUksYUFBYSxFQUFFLENBQUM7UUFDaEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQUV2QyxLQUFLLE1BQU0sV0FBVyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7WUFDekQsSUFBSSxZQUFZLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7Z0JBQ2xDLE1BQU0sSUFBSSw0QkFBWSxDQUNwQixtQ0FBbUMsV0FBVyxvQkFBb0IsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQ2xHLENBQUM7WUFDSixDQUFDO1lBQ0QsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNoQyxDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU8sYUFBYSxDQUFDO0lBRXJCLFNBQVMsT0FBTztRQUNkLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxPQUFPLENBQUMsWUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQztZQUNqRSxPQUFPLE9BQU8sQ0FBQyxZQUFZLENBQUM7UUFDOUIsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLElBQUksNEJBQVksQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQzdELENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQU9NLEtBQUssVUFBVSxxQkFBcUIsQ0FDekMsY0FBbUQsRUFDbkQsV0FBd0IsRUFDeEIsbUJBQTZCO0lBRTdCLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSx5QkFBVyxFQUFDLFdBQVcsRUFBRSxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbEUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDMUIsTUFBTSxPQUFPLEdBQUcsSUFBSSxnQ0FBa0IsQ0FBQztZQUNyQyxHQUFHLEtBQUs7WUFDUixtQkFBbUI7U0FDcEIsQ0FBQyxDQUFDO1FBQ0gsT0FBTztZQUNMLFdBQVcsRUFBRSxPQUFPLENBQUMsV0FBVztZQUNoQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FDMUIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQzdGO1NBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlICogYXMgY3hhcGkgZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB0eXBlIHsgTWFwcGluZ0dyb3VwIH0gZnJvbSAnLi4nO1xuaW1wb3J0IHR5cGUgeyBTZGtQcm92aWRlciB9IGZyb20gJy4uLy4uLy4uL2FwaS9hd3MtYXV0aC9zZGstcHJvdmlkZXInO1xuaW1wb3J0IHsgZ3JvdXBTdGFja3MsIFJlZmFjdG9yaW5nQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2FwaS9yZWZhY3RvcmluZyc7XG5pbXBvcnQgeyBUb29sa2l0RXJyb3IgfSBmcm9tICcuLi8uLi8uLi90b29sa2l0L3Rvb2xraXQtZXJyb3InO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNYXBwaW5nR3JvdXBzKHM6IHN0cmluZykge1xuICBjb25zdCBtYXBwaW5nR3JvdXBzID0gZG9QYXJzZSgpO1xuXG4gIC8vIFZhbGlkYXRlIHRoYXQgdGhlcmUgYXJlIG5vIGR1cGxpY2F0ZSBkZXN0aW5hdGlvbnMuXG4gIC8vIEJ5IGNvbnN0cnVjdGlvbiwgdGhlcmUgYXJlIG5vIGR1cGxpY2F0ZSBzb3VyY2VzLCBhbHJlYWR5LlxuICBmb3IgKGxldCBncm91cCBvZiBtYXBwaW5nR3JvdXBzKSB7XG4gICAgY29uc3QgZGVzdGluYXRpb25zID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgICBmb3IgKGNvbnN0IGRlc3RpbmF0aW9uIG9mIE9iamVjdC52YWx1ZXMoZ3JvdXAucmVzb3VyY2VzKSkge1xuICAgICAgaWYgKGRlc3RpbmF0aW9ucy5oYXMoZGVzdGluYXRpb24pKSB7XG4gICAgICAgIHRocm93IG5ldyBUb29sa2l0RXJyb3IoXG4gICAgICAgICAgYER1cGxpY2F0ZSBkZXN0aW5hdGlvbiByZXNvdXJjZSAnJHtkZXN0aW5hdGlvbn0nIGluIGVudmlyb25tZW50ICR7Z3JvdXAuYWNjb3VudH0vJHtncm91cC5yZWdpb259YCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlc3RpbmF0aW9ucy5hZGQoZGVzdGluYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXBwaW5nR3JvdXBzO1xuXG4gIGZ1bmN0aW9uIGRvUGFyc2UoKTogTWFwcGluZ0dyb3VwW10ge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBKU09OLnBhcnNlKHMpO1xuICAgIGlmIChjb250ZW50LmVudmlyb25tZW50cyB8fCAhQXJyYXkuaXNBcnJheShjb250ZW50LmVudmlyb25tZW50cykpIHtcbiAgICAgIHJldHVybiBjb250ZW50LmVudmlyb25tZW50cztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFRvb2xraXRFcnJvcihcIkV4cGVjdGVkIGFuICdlbnZpcm9ubWVudHMnIGFycmF5XCIpO1xuICAgIH1cbiAgfVxufVxuXG5pbnRlcmZhY2UgRW52aXJvbm1lbnRTcGVjaWZpY01hcHBpbmdzIHtcbiAgcmVhZG9ubHkgZW52aXJvbm1lbnQ6IGN4YXBpLkVudmlyb25tZW50O1xuICByZWFkb25seSBtYXBwaW5nczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1hcHBpbmdzQnlFbnZpcm9ubWVudChcbiAgc3RhY2tBcnRpZmFjdHM6IGN4YXBpLkNsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdFtdLFxuICBzZGtQcm92aWRlcjogU2RrUHJvdmlkZXIsXG4gIGlnbm9yZU1vZGlmaWNhdGlvbnM/OiBib29sZWFuLFxuKTogUHJvbWlzZTxFbnZpcm9ubWVudFNwZWNpZmljTWFwcGluZ3NbXT4ge1xuICBjb25zdCBncm91cHMgPSBhd2FpdCBncm91cFN0YWNrcyhzZGtQcm92aWRlciwgc3RhY2tBcnRpZmFjdHMsIFtdKTtcbiAgcmV0dXJuIGdyb3Vwcy5tYXAoKGdyb3VwKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IG5ldyBSZWZhY3RvcmluZ0NvbnRleHQoe1xuICAgICAgLi4uZ3JvdXAsXG4gICAgICBpZ25vcmVNb2RpZmljYXRpb25zLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBlbnZpcm9ubWVudDogY29udGV4dC5lbnZpcm9ubWVudCxcbiAgICAgIG1hcHBpbmdzOiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgIGNvbnRleHQubWFwcGluZ3MubWFwKChtKSA9PiBbbS5zb3VyY2UudG9Mb2NhdGlvblN0cmluZygpLCBtLmRlc3RpbmF0aW9uLnRvTG9jYXRpb25TdHJpbmcoKV0pLFxuICAgICAgKSxcbiAgICB9O1xuICB9KTtcbn1cblxuIl19