"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareDiff = prepareDiff;
exports.appendObject = appendObject;
const fs = require("fs-extra");
const uuid = require("uuid");
const __1 = require("..");
const cfnApi = require("../../../api/deployments/cfn-api");
const resource_import_1 = require("../../../api/resource-import");
const toolkit_error_1 = require("../../../toolkit/toolkit-error");
const util_1 = require("../../../util");
const mapping_helpers_1 = require("../../refactor/private/mapping-helpers");
function prepareDiff(ioHelper, stacks, deployments, sdkProvider, options) {
    switch (options.method?.method ?? __1.DiffMethod.ChangeSet().method) {
        case 'local-file':
            return localFileDiff(stacks, options);
        case 'template-only':
            return cfnDiff(ioHelper, stacks, deployments, options, sdkProvider, false);
        case 'change-set':
            return cfnDiff(ioHelper, stacks, deployments, options, sdkProvider, true);
        default:
            throw new toolkit_error_1.ToolkitError((0, util_1.formatErrorMessage)(`Unknown diff method ${options.method}`));
    }
}
async function localFileDiff(stacks, options) {
    const methodOptions = (options.method?.options ?? {});
    // Compare single stack against fixed template
    if (stacks.stackCount !== 1) {
        throw new toolkit_error_1.ToolkitError('Can only select one stack when comparing to fixed template. Use --exclusively to avoid selecting multiple stacks.');
    }
    if (!(await fs.pathExists(methodOptions.path))) {
        throw new toolkit_error_1.ToolkitError(`There is no file at ${methodOptions.path}`);
    }
    const file = fs.readFileSync(methodOptions.path).toString();
    const template = (0, util_1.deserializeStructure)(file);
    return [{
            oldTemplate: template,
            newTemplate: stacks.firstStack,
        }];
}
async function cfnDiff(ioHelper, stacks, deployments, options, sdkProvider, includeChangeSet) {
    const templateInfos = [];
    const methodOptions = (options.method?.options ?? {});
    const allMappings = options.includeMoves
        ? await (0, mapping_helpers_1.mappingsByEnvironment)(stacks.stackArtifacts, sdkProvider, true)
        : [];
    // Compare N stacks against deployed templates
    for (const stack of stacks.stackArtifacts) {
        const templateWithNestedStacks = await deployments.readCurrentTemplateWithNestedStacks(stack, methodOptions.compareAgainstProcessedTemplate);
        const currentTemplate = templateWithNestedStacks.deployedRootTemplate;
        const nestedStacks = templateWithNestedStacks.nestedStacks;
        const migrator = new resource_import_1.ResourceMigrator({ deployments, ioHelper });
        const resourcesToImport = await migrator.tryGetResources(await deployments.resolveEnvironment(stack));
        if (resourcesToImport) {
            (0, resource_import_1.removeNonImportResources)(stack);
        }
        const changeSet = includeChangeSet ? await changeSetDiff(ioHelper, deployments, stack, sdkProvider, resourcesToImport, methodOptions.parameters, methodOptions.fallbackToTemplate, methodOptions.importExistingResources) : undefined;
        const mappings = allMappings.find(m => m.environment.region === stack.environment.region && m.environment.account === stack.environment.account)?.mappings ?? {};
        templateInfos.push({
            oldTemplate: currentTemplate,
            newTemplate: stack,
            isImport: !!resourcesToImport,
            nestedStacks,
            changeSet,
            mappings,
        });
    }
    return templateInfos;
}
async function changeSetDiff(ioHelper, deployments, stack, sdkProvider, resourcesToImport, parameters = {}, fallBackToTemplate = true, importExistingResources = false) {
    let stackExists = false;
    try {
        stackExists = await deployments.stackExists({
            stack,
            deployName: stack.stackName,
            tryLookupRole: true,
        });
    }
    catch (e) {
        if (!fallBackToTemplate) {
            throw new toolkit_error_1.ToolkitError(`describeStacks call failed with ${e} for ${stack.stackName}, set fallBackToTemplate to true or use DiffMethod.templateOnly to base the diff on template differences.`);
        }
        await ioHelper.defaults.debug(`Checking if the stack ${stack.stackName} exists before creating the changeset has failed, will base the diff on template differences.\n`);
        await ioHelper.defaults.debug((0, util_1.formatErrorMessage)(e));
        stackExists = false;
    }
    if (stackExists) {
        return cfnApi.createDiffChangeSet(ioHelper, {
            stack,
            uuid: uuid.v4(),
            deployments,
            willExecute: false,
            sdkProvider,
            parameters: parameters,
            resourcesToImport,
            failOnError: !fallBackToTemplate,
            importExistingResources,
        });
    }
    else {
        if (!fallBackToTemplate) {
            throw new toolkit_error_1.ToolkitError(`the stack '${stack.stackName}' has not been deployed to CloudFormation, set fallBackToTemplate to true or use DiffMethod.templateOnly to base the diff on template differences.`);
        }
        await ioHelper.defaults.debug(`the stack '${stack.stackName}' has not been deployed to CloudFormation, skipping changeset creation.`);
        return;
    }
}
/**
 * Appends all properties from obj2 to obj1.
 * obj2 values take priority in the case of collisions.
 *
 * @param obj1 - The object to modify
 * @param obj2 - The object to consume
 *
 * @returns obj1 with all properties from obj2
 */
function appendObject(obj1, obj2) {
    // Directly modify obj1 by adding all properties from obj2
    for (const key in obj2) {
        obj1[key] = obj2[key];
    }
    // Return the modified obj1
    return obj1;
}
//# sourceMappingURL=data:application/json;base64,