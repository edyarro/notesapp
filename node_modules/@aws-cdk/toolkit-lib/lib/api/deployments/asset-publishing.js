"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasePublishProgressListener = exports.PublishingAws = void 0;
exports.publishAssets = publishAssets;
const cdk_assets_lib_1 = require("@aws-cdk/cdk-assets-lib");
const cx_api_1 = require("@aws-cdk/cx-api");
const toolkit_error_1 = require("../../toolkit/toolkit-error");
const plugin_1 = require("../plugin");
/**
 * Use cdk-assets to publish all assets in the given manifest.
 *
 * @deprecated used in legacy deployments only, should be migrated at some point
 */
async function publishAssets(manifest, sdk, targetEnv, options, ioHelper) {
    // This shouldn't really happen (it's a programming error), but we don't have
    // the types here to guide us. Do an runtime validation to be super super sure.
    if (targetEnv.account === undefined ||
        targetEnv.account === cx_api_1.UNKNOWN_ACCOUNT ||
        targetEnv.region === undefined ||
        targetEnv.account === cx_api_1.UNKNOWN_REGION) {
        throw new toolkit_error_1.ToolkitError(`Asset publishing requires resolved account and region, got ${JSON.stringify(targetEnv)}`);
    }
    const publisher = new cdk_assets_lib_1.AssetPublishing(manifest, {
        aws: new PublishingAws(sdk, targetEnv),
        progressListener: new PublishingProgressListener(ioHelper),
        throwOnError: false,
        publishInParallel: options.parallel ?? true,
        buildAssets: true,
        publishAssets: true,
        quiet: false,
    });
    await publisher.publish({ allowCrossAccount: options.allowCrossAccount });
    if (publisher.hasFailures) {
        throw new toolkit_error_1.ToolkitError('Failed to publish one or more assets. See the error messages above for more information.');
    }
}
class PublishingAws {
    aws;
    targetEnv;
    sdkCache = new Map();
    constructor(
    /**
     * The base SDK to work with
     */
    aws, 
    /**
     * Environment where the stack we're deploying is going
     */
    targetEnv) {
        this.aws = aws;
        this.targetEnv = targetEnv;
    }
    async discoverPartition() {
        return (await this.aws.baseCredentialsPartition(this.targetEnv, plugin_1.Mode.ForWriting)) ?? 'aws';
    }
    async discoverDefaultRegion() {
        return this.targetEnv.region;
    }
    async discoverCurrentAccount() {
        const account = await this.aws.defaultAccount();
        return (account ?? {
            accountId: '<unknown account>',
            partition: 'aws',
        });
    }
    async discoverTargetAccount(options) {
        return (await this.sdk(options)).currentAccount();
    }
    async s3Client(options) {
        return (await this.sdk(options)).s3();
    }
    async ecrClient(options) {
        return (await this.sdk(options)).ecr();
    }
    async secretsManagerClient(options) {
        return (await this.sdk(options)).secretsManager();
    }
    /**
     * Get an SDK appropriate for the given client options
     */
    async sdk(options) {
        const env = {
            ...this.targetEnv,
            region: options.region ?? this.targetEnv.region, // Default: same region as the stack
        };
        const cacheKeyMap = {
            env, // region, name, account
            assumeRuleArn: options.assumeRoleArn,
            assumeRoleExternalId: options.assumeRoleExternalId,
            quiet: options.quiet,
        };
        if (options.assumeRoleAdditionalOptions) {
            cacheKeyMap.assumeRoleAdditionalOptions = options.assumeRoleAdditionalOptions;
        }
        const cacheKey = JSON.stringify(cacheKeyMap);
        const maybeSdk = this.sdkCache.get(cacheKey);
        if (maybeSdk) {
            return maybeSdk;
        }
        const sdk = (await this.aws.forEnvironment(env, plugin_1.Mode.ForWriting, {
            assumeRoleArn: options.assumeRoleArn,
            assumeRoleExternalId: options.assumeRoleExternalId,
            assumeRoleAdditionalOptions: options.assumeRoleAdditionalOptions,
        }, options.quiet)).sdk;
        this.sdkCache.set(cacheKey, sdk);
        return sdk;
    }
}
exports.PublishingAws = PublishingAws;
const EVENT_TO_MSG_LEVEL = {
    build: 'debug',
    cached: 'debug',
    check: 'debug',
    debug: 'debug',
    fail: 'error',
    found: 'debug',
    start: 'info',
    success: 'info',
    upload: 'debug',
    shell_open: 'debug',
    shell_stderr: false,
    shell_stdout: false,
    shell_close: false,
};
class BasePublishProgressListener {
    ioHelper;
    constructor(ioHelper) {
        this.ioHelper = ioHelper;
    }
    onPublishEvent(type, event) {
        const level = EVENT_TO_MSG_LEVEL[type];
        if (level) {
            void this.ioHelper.defaults[level](this.getMessage(type, event));
        }
    }
}
exports.BasePublishProgressListener = BasePublishProgressListener;
class PublishingProgressListener extends BasePublishProgressListener {
    getMessage(type, event) {
        return `[${event.percentComplete}%] ${type}: ${event.message}`;
    }
}
//# sourceMappingURL=data:application/json;base64,