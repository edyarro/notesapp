"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebsiteNoticeDataSource = exports.WebsiteNoticeDataSourceProps = void 0;
const https = require("node:https");
const toolkit_error_1 = require("../../toolkit/toolkit-error");
const util_1 = require("../../util");
/**
 * A data source that fetches notices from the CDK notices data source
 */
class WebsiteNoticeDataSourceProps {
    /**
     * The URL to load notices from.
     *
     * Note this must be a valid JSON document in the CDK notices data schema.
     *
     * @see https://github.com/cdklabs/aws-cdk-notices
     *
     * @default - Official CDK notices
     */
    url;
    /**
     * The agent responsible for making the network requests.
     *
     * Use this so set up a proxy connection.
     *
     * @default - Uses the shared global node agent
     */
    agent;
}
exports.WebsiteNoticeDataSourceProps = WebsiteNoticeDataSourceProps;
class WebsiteNoticeDataSource {
    ioHelper;
    /**
     * The URL notices are loaded from.
     */
    url;
    agent;
    constructor(ioHelper, props = {}) {
        this.ioHelper = ioHelper;
        this.agent = props.agent;
        this.url = props.url ?? 'https://cli.cdk.dev-tools.aws.dev/notices.json';
    }
    async fetch() {
        // We are observing lots of timeouts when running in a massively parallel
        // integration test environment, so wait for a longer timeout there.
        //
        // In production, have a short timeout to not hold up the user experience.
        const timeout = process.env.TESTING_CDK ? 30_000 : 3_000;
        const options = {
            agent: this.agent,
        };
        const notices = await new Promise((resolve, reject) => {
            let req;
            let timer = setTimeout(() => {
                if (req) {
                    req.destroy(new toolkit_error_1.ToolkitError('Request timed out'));
                }
            }, timeout);
            timer.unref();
            try {
                req = https.get(this.url, options, res => {
                    if (res.statusCode === 200) {
                        res.setEncoding('utf8');
                        let rawData = '';
                        res.on('data', (chunk) => {
                            rawData += chunk;
                        });
                        res.on('end', () => {
                            try {
                                const data = JSON.parse(rawData).notices;
                                if (!data) {
                                    throw new toolkit_error_1.ToolkitError("'notices' key is missing from received data");
                                }
                                resolve(data ?? []);
                            }
                            catch (e) {
                                reject(toolkit_error_1.ToolkitError.withCause(`Parse error: ${(0, util_1.formatErrorMessage)(e)}`, e));
                            }
                        });
                        res.on('error', e => {
                            reject(toolkit_error_1.ToolkitError.withCause((0, util_1.formatErrorMessage)(e), e));
                        });
                    }
                    else {
                        reject(new toolkit_error_1.ToolkitError(`${(0, util_1.humanHttpStatusError)(res.statusCode)} (Status code: ${res.statusCode})`));
                    }
                });
                req.on('error', e => {
                    reject(toolkit_error_1.ToolkitError.withCause((0, util_1.humanNetworkError)(e), e));
                });
            }
            catch (e) {
                reject(toolkit_error_1.ToolkitError.withCause((0, util_1.formatErrorMessage)(e), e));
            }
        });
        await this.ioHelper.defaults.debug('Notices refreshed');
        return notices;
    }
}
exports.WebsiteNoticeDataSource = WebsiteNoticeDataSource;
//# sourceMappingURL=data:application/json;base64,