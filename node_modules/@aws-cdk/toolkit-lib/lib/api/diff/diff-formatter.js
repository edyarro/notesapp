"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiffFormatter = void 0;
const node_util_1 = require("node:util");
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cloudformation_diff_1 = require("@aws-cdk/cloudformation-diff");
const chalk = require("chalk");
const payloads_1 = require("../../payloads");
const streams_1 = require("../streams");
/**
 * Class for formatting the diff output
 */
class DiffFormatter {
    oldTemplate;
    newTemplate;
    stackName;
    changeSet;
    nestedStacks;
    isImport;
    mappings;
    /**
     * Stores the TemplateDiffs that get calculated in this DiffFormatter,
     * indexed by the stack name.
     */
    _diffs = {};
    constructor(props) {
        this.oldTemplate = props.templateInfo.oldTemplate;
        this.newTemplate = props.templateInfo.newTemplate;
        this.stackName = props.templateInfo.newTemplate.displayName ?? props.templateInfo.newTemplate.stackName;
        this.changeSet = props.templateInfo.changeSet;
        this.nestedStacks = props.templateInfo.nestedStacks;
        this.isImport = props.templateInfo.isImport ?? false;
        this.mappings = props.templateInfo.mappings ?? {};
    }
    get diffs() {
        return this._diffs;
    }
    /**
     * Get or creates the diff of a stack.
     * If it creates the diff, it stores the result in a map for
     * easier retrieval later.
     */
    diff(stackName, oldTemplate, mappings = {}) {
        const realStackName = stackName ?? this.stackName;
        if (!this._diffs[realStackName]) {
            const templateDiff = (0, cloudformation_diff_1.fullDiff)(oldTemplate ?? this.oldTemplate, this.newTemplate.template, this.changeSet, this.isImport);
            const setMove = (change, direction, location) => {
                if (location != null) {
                    const [sourceStackName, sourceLogicalId] = location.split('.');
                    change.move = {
                        direction,
                        stackName: sourceStackName,
                        resourceLogicalId: sourceLogicalId,
                    };
                }
            };
            templateDiff.resources.forEachDifference((id, change) => {
                const location = `${realStackName}.${id}`;
                if (change.isAddition && Object.values(mappings).includes(location)) {
                    setMove(change, 'from', Object.keys(mappings).find(k => mappings[k] === location));
                }
                else if (change.isRemoval && Object.keys(mappings).includes(location)) {
                    setMove(change, 'to', mappings[location]);
                }
            });
            this._diffs[realStackName] = templateDiff;
        }
        return this._diffs[realStackName];
    }
    /**
     * Return whether the diff has security-impacting changes that need confirmation.
     *
     * If no stackName is given, then the root stack name is used.
     */
    permissionType() {
        const diff = this.diff();
        if (diff.permissionsBroadened) {
            return payloads_1.PermissionChangeType.BROADENING;
        }
        else if (diff.permissionsAnyChanges) {
            return payloads_1.PermissionChangeType.NON_BROADENING;
        }
        else {
            return payloads_1.PermissionChangeType.NONE;
        }
    }
    /**
     * Format the stack diff
     */
    formatStackDiff(options = {}) {
        return this.formatStackDiffHelper(this.oldTemplate, this.stackName, this.nestedStacks, options, this.mappings);
    }
    formatStackDiffHelper(oldTemplate, stackName, nestedStackTemplates, options, mappings = {}) {
        let diff = this.diff(stackName, oldTemplate, mappings);
        // The stack diff is formatted via `Formatter`, which takes in a stream
        // and sends its output directly to that stream. To facilitate use of the
        // global CliIoHost, we create our own stream to capture the output of
        // `Formatter` and return the output as a string for the consumer of
        // `formatStackDiff` to decide what to do with it.
        const stream = new streams_1.StringWriteStream();
        let numStacksWithChanges = 0;
        let formattedDiff = '';
        let filteredChangesCount = 0;
        try {
            // must output the stack name if there are differences, even if quiet
            if (stackName && (!options.quiet || !diff.isEmpty)) {
                stream.write((0, node_util_1.format)(`Stack ${chalk.bold(stackName)}\n`));
            }
            if (!options.quiet && this.isImport) {
                stream.write('Parameters and rules created during migration do not affect resource configuration.\n');
            }
            // detect and filter out mangled characters from the diff
            if (diff.differenceCount && !options.strict) {
                const mangledNewTemplate = JSON.parse((0, cloudformation_diff_1.mangleLikeCloudFormation)(JSON.stringify(this.newTemplate.template)));
                const mangledDiff = (0, cloudformation_diff_1.fullDiff)(this.oldTemplate, mangledNewTemplate, this.changeSet);
                filteredChangesCount = Math.max(0, diff.differenceCount - mangledDiff.differenceCount);
                if (filteredChangesCount > 0) {
                    diff = mangledDiff;
                }
            }
            // filter out 'AWS::CDK::Metadata' resources from the template
            // filter out 'CheckBootstrapVersion' rules from the template
            if (!options.strict) {
                obscureDiff(diff);
            }
            if (!diff.isEmpty) {
                numStacksWithChanges++;
                // formatDifferences updates the stream with the formatted stack diff
                (0, cloudformation_diff_1.formatDifferences)(stream, diff, {
                    ...logicalIdMapFromTemplate(this.oldTemplate),
                    ...buildLogicalToPathMap(this.newTemplate),
                }, options.contextLines);
            }
            else if (!options.quiet) {
                stream.write(chalk.green('There were no differences\n'));
            }
            if (filteredChangesCount > 0) {
                stream.write(chalk.yellow(`Omitted ${filteredChangesCount} changes because they are likely mangled non-ASCII characters. Use --strict to print them.\n`));
            }
        }
        finally {
            // store the stream containing a formatted stack diff
            formattedDiff = stream.toString();
            stream.end();
        }
        for (const nestedStackLogicalId of Object.keys(nestedStackTemplates ?? {})) {
            if (!nestedStackTemplates) {
                break;
            }
            const nestedStack = nestedStackTemplates[nestedStackLogicalId];
            this.newTemplate._template = nestedStack.generatedTemplate;
            const nextDiff = this.formatStackDiffHelper(nestedStack.deployedTemplate, nestedStack.physicalName ?? nestedStackLogicalId, nestedStack.nestedStackTemplates, options, this.mappings);
            numStacksWithChanges += nextDiff.numStacksWithChanges;
            formattedDiff += nextDiff.formattedDiff;
        }
        return {
            numStacksWithChanges,
            formattedDiff,
        };
    }
    /**
     * Format the security diff
     */
    formatSecurityDiff() {
        const diff = this.diff();
        // The security diff is formatted via `Formatter`, which takes in a stream
        // and sends its output directly to that stream. To faciliate use of the
        // global CliIoHost, we create our own stream to capture the output of
        // `Formatter` and return the output as a string for the consumer of
        // `formatSecurityDiff` to decide what to do with it.
        const stream = new streams_1.StringWriteStream();
        stream.write((0, node_util_1.format)(`Stack ${chalk.bold(this.stackName)}\n`));
        try {
            // formatSecurityChanges updates the stream with the formatted security diff
            (0, cloudformation_diff_1.formatSecurityChanges)(stream, diff, buildLogicalToPathMap(this.newTemplate));
        }
        finally {
            stream.end();
        }
        // store the stream containing a formatted stack diff
        const formattedDiff = stream.toString();
        return { formattedDiff, permissionChangeType: this.permissionType() };
    }
}
exports.DiffFormatter = DiffFormatter;
function buildLogicalToPathMap(stack) {
    const map = {};
    for (const md of stack.findMetadataByType(cxschema.ArtifactMetadataEntryType.LOGICAL_ID)) {
        map[md.data] = md.path;
    }
    return map;
}
function logicalIdMapFromTemplate(template) {
    const ret = {};
    for (const [logicalId, resource] of Object.entries(template.Resources ?? {})) {
        const path = resource?.Metadata?.['aws:cdk:path'];
        if (path) {
            ret[logicalId] = path;
        }
    }
    return ret;
}
/**
 * Remove any template elements that we don't want to show users.
 * This is currently:
 * - AWS::CDK::Metadata resource
 * - CheckBootstrapVersion Rule
 */
function obscureDiff(diff) {
    if (diff.unknown) {
        // see https://github.com/aws/aws-cdk/issues/17942
        diff.unknown = diff.unknown.filter(change => {
            if (!change) {
                return true;
            }
            if (change.newValue?.CheckBootstrapVersion) {
                return false;
            }
            if (change.oldValue?.CheckBootstrapVersion) {
                return false;
            }
            return true;
        });
    }
    if (diff.resources) {
        diff.resources = diff.resources.filter(change => {
            if (!change) {
                return true;
            }
            if (change.newResourceType === 'AWS::CDK::Metadata') {
                return false;
            }
            if (change.oldResourceType === 'AWS::CDK::Metadata') {
                return false;
            }
            return true;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,