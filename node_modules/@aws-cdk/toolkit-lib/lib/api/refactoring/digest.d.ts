import type { CloudFormationStack } from './cloudformation';
export type GraphDirection = 'direct' | 'opposite';
/**
 * Computes the digest for each resource in the template.
 *
 * Conceptually, the digest is computed as:
 *
 *     digest(resource) = hash(type + properties + dependencies.map(d))
 *
 * where `hash` is a cryptographic hash function. In other words, the digest of a
 * resource is computed from its type, its own properties (that is, excluding
 * properties that refer to other resources), and the digests of each of its
 * dependencies.
 *
 * The digest of a resource, defined recursively this way, remains stable even if
 * one or more of its dependencies gets renamed. Since the resources in a
 * CloudFormation template form a directed acyclic graph, this function is
 * well-defined.
 */
export declare function computeResourceDigests(stacks: CloudFormationStack[], direction?: GraphDirection): Record<string, string>;
export declare function hashObject(obj: any): string;
//# sourceMappingURL=digest.d.ts.map