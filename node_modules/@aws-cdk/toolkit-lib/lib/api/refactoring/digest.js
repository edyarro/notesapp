"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeResourceDigests = computeResourceDigests;
exports.hashObject = hashObject;
const crypto = require("node:crypto");
const graph_1 = require("./graph");
/**
 * Computes the digest for each resource in the template.
 *
 * Conceptually, the digest is computed as:
 *
 *     digest(resource) = hash(type + properties + dependencies.map(d))
 *
 * where `hash` is a cryptographic hash function. In other words, the digest of a
 * resource is computed from its type, its own properties (that is, excluding
 * properties that refer to other resources), and the digests of each of its
 * dependencies.
 *
 * The digest of a resource, defined recursively this way, remains stable even if
 * one or more of its dependencies gets renamed. Since the resources in a
 * CloudFormation template form a directed acyclic graph, this function is
 * well-defined.
 */
function computeResourceDigests(stacks, direction = 'direct') {
    const exports = Object.fromEntries(stacks.flatMap((s) => Object.values(s.template.Outputs ?? {})
        .filter((o) => o.Export != null && typeof o.Export.Name === 'string')
        .map((o) => [o.Export.Name, { stackName: s.stackName, value: o.Value }])));
    const resources = Object.fromEntries(stacks.flatMap((s) => {
        return Object.entries(s.template.Resources ?? {})
            .filter(([_, res]) => res.Type !== 'AWS::CDK::Metadata')
            .map(([id, res]) => [`${s.stackName}.${id}`, res]);
    }));
    const graph = direction == 'direct'
        ? graph_1.ResourceGraph.fromStacks(stacks)
        : graph_1.ResourceGraph.fromStacks(stacks).opposite();
    return computeDigestsInTopologicalOrder(graph, resources, exports);
}
function computeDigestsInTopologicalOrder(graph, resources, exports) {
    const nodes = graph.sortedNodes.filter(n => resources[n] != null);
    const result = {};
    for (const id of nodes) {
        const resource = resources[id];
        const depDigests = Array.from(graph.outNeighbors(id)).map((d) => result[d]);
        const propertiesHash = hashObject(stripReferences(stripConstructPath(resource), exports));
        const toHash = resource.Type + propertiesHash + depDigests.join('');
        result[id] = crypto.createHash('sha256').update(toHash).digest('hex');
    }
    return result;
}
function hashObject(obj) {
    const hash = crypto.createHash('sha256');
    function addToHash(value) {
        if (value == null) {
            addToHash('null');
        }
        else if (typeof value === 'object') {
            if (Array.isArray(value)) {
                value.forEach(addToHash);
            }
            else {
                Object.keys(value)
                    .sort()
                    .forEach((key) => {
                    hash.update(key);
                    addToHash(value[key]);
                });
            }
        }
        else {
            hash.update(typeof value + value.toString());
        }
    }
    addToHash(obj);
    return hash.digest('hex');
}
/**
 * Removes sub-properties containing Ref or Fn::GetAtt to avoid hashing
 * references themselves but keeps the property structure.
 */
function stripReferences(value, exports) {
    if (!value || typeof value !== 'object')
        return value;
    if (Array.isArray(value)) {
        return value.map(x => stripReferences(x, exports));
    }
    if ('Ref' in value) {
        return { __cloud_ref__: 'Ref' };
    }
    if ('Fn::GetAtt' in value) {
        return { __cloud_ref__: 'Fn::GetAtt' };
    }
    if ('DependsOn' in value) {
        return { __cloud_ref__: 'DependsOn' };
    }
    if ('Fn::ImportValue' in value) {
        const v = exports[value['Fn::ImportValue']].value;
        // Treat Fn::ImportValue as if it were a reference with the same stack
        if ('Ref' in v) {
            return { __cloud_ref__: 'Ref' };
        }
        else if ('Fn::GetAtt' in v) {
            return { __cloud_ref__: 'Fn::GetAtt' };
        }
    }
    const result = {};
    for (const [k, v] of Object.entries(value)) {
        result[k] = stripReferences(v, exports);
    }
    return result;
}
function stripConstructPath(resource) {
    if (resource?.Metadata?.['aws:cdk:path'] == null) {
        return resource;
    }
    const copy = JSON.parse(JSON.stringify(resource));
    delete copy.Metadata['aws:cdk:path'];
    return copy;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlnZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlnZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBeUJBLHdEQXlCQztBQW1CRCxnQ0F3QkM7QUE3RkQsc0NBQXNDO0FBRXRDLG1DQUF3QztBQU14Qzs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUNILFNBQWdCLHNCQUFzQixDQUFDLE1BQTZCLEVBQUUsWUFBNEIsUUFBUTtJQUN4RyxNQUFNLE9BQU8sR0FBdUQsTUFBTSxDQUFDLFdBQVcsQ0FDcEYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ25CLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1NBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7U0FDcEUsR0FBRyxDQUNGLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDSixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBZ0QsQ0FDN0csQ0FDSixDQUNGLENBQUM7SUFFRixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUNsQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDbkIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQzthQUM5QyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxvQkFBb0IsQ0FBQzth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QztJQUNILENBQUM7SUFDRCxNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7SUFDdkIsS0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUMzQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsZUFBZSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELFNBQVMsa0JBQWtCLENBQUMsUUFBYTtJQUN2QyxJQUFJLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNqRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbEQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3JDLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNyeXB0byBmcm9tICdub2RlOmNyeXB0byc7XG5pbXBvcnQgdHlwZSB7IENsb3VkRm9ybWF0aW9uUmVzb3VyY2UsIENsb3VkRm9ybWF0aW9uU3RhY2sgfSBmcm9tICcuL2Nsb3VkZm9ybWF0aW9uJztcbmltcG9ydCB7IFJlc291cmNlR3JhcGggfSBmcm9tICcuL2dyYXBoJztcblxuZXhwb3J0IHR5cGUgR3JhcGhEaXJlY3Rpb24gPVxuICAnZGlyZWN0JyAvLyBFZGdlIEEgLT4gQiBtZWFuIHRoYXQgQSBkZXBlbmRzIG9uIEJcbiAgfCAnb3Bwb3NpdGUnOyAvLyBFZGdlIEEgLT4gQiBtZWFuIHRoYXQgQiBkZXBlbmRzIG9uIEFcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgZGlnZXN0IGZvciBlYWNoIHJlc291cmNlIGluIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiBDb25jZXB0dWFsbHksIHRoZSBkaWdlc3QgaXMgY29tcHV0ZWQgYXM6XG4gKlxuICogICAgIGRpZ2VzdChyZXNvdXJjZSkgPSBoYXNoKHR5cGUgKyBwcm9wZXJ0aWVzICsgZGVwZW5kZW5jaWVzLm1hcChkKSlcbiAqXG4gKiB3aGVyZSBgaGFzaGAgaXMgYSBjcnlwdG9ncmFwaGljIGhhc2ggZnVuY3Rpb24uIEluIG90aGVyIHdvcmRzLCB0aGUgZGlnZXN0IG9mIGFcbiAqIHJlc291cmNlIGlzIGNvbXB1dGVkIGZyb20gaXRzIHR5cGUsIGl0cyBvd24gcHJvcGVydGllcyAodGhhdCBpcywgZXhjbHVkaW5nXG4gKiBwcm9wZXJ0aWVzIHRoYXQgcmVmZXIgdG8gb3RoZXIgcmVzb3VyY2VzKSwgYW5kIHRoZSBkaWdlc3RzIG9mIGVhY2ggb2YgaXRzXG4gKiBkZXBlbmRlbmNpZXMuXG4gKlxuICogVGhlIGRpZ2VzdCBvZiBhIHJlc291cmNlLCBkZWZpbmVkIHJlY3Vyc2l2ZWx5IHRoaXMgd2F5LCByZW1haW5zIHN0YWJsZSBldmVuIGlmXG4gKiBvbmUgb3IgbW9yZSBvZiBpdHMgZGVwZW5kZW5jaWVzIGdldHMgcmVuYW1lZC4gU2luY2UgdGhlIHJlc291cmNlcyBpbiBhXG4gKiBDbG91ZEZvcm1hdGlvbiB0ZW1wbGF0ZSBmb3JtIGEgZGlyZWN0ZWQgYWN5Y2xpYyBncmFwaCwgdGhpcyBmdW5jdGlvbiBpc1xuICogd2VsbC1kZWZpbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVJlc291cmNlRGlnZXN0cyhzdGFja3M6IENsb3VkRm9ybWF0aW9uU3RhY2tbXSwgZGlyZWN0aW9uOiBHcmFwaERpcmVjdGlvbiA9ICdkaXJlY3QnKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gIGNvbnN0IGV4cG9ydHM6IHsgW3A6IHN0cmluZ106IHsgc3RhY2tOYW1lOiBzdHJpbmc7IHZhbHVlOiBhbnkgfSB9ID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgIHN0YWNrcy5mbGF0TWFwKChzKSA9PlxuICAgICAgT2JqZWN0LnZhbHVlcyhzLnRlbXBsYXRlLk91dHB1dHMgPz8ge30pXG4gICAgICAgIC5maWx0ZXIoKG8pID0+IG8uRXhwb3J0ICE9IG51bGwgJiYgdHlwZW9mIG8uRXhwb3J0Lk5hbWUgPT09ICdzdHJpbmcnKVxuICAgICAgICAubWFwKFxuICAgICAgICAgIChvKSA9PlxuICAgICAgICAgICAgW28uRXhwb3J0Lk5hbWUsIHsgc3RhY2tOYW1lOiBzLnN0YWNrTmFtZSwgdmFsdWU6IG8uVmFsdWUgfV0gYXMgW3N0cmluZywgeyBzdGFja05hbWU6IHN0cmluZzsgdmFsdWU6IGFueSB9XSxcbiAgICAgICAgKSxcbiAgICApLFxuICApO1xuXG4gIGNvbnN0IHJlc291cmNlcyA9IE9iamVjdC5mcm9tRW50cmllcyhcbiAgICBzdGFja3MuZmxhdE1hcCgocykgPT4ge1xuICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHMudGVtcGxhdGUuUmVzb3VyY2VzID8/IHt9KVxuICAgICAgICAuZmlsdGVyKChbXywgcmVzXSkgPT4gcmVzLlR5cGUgIT09ICdBV1M6OkNESzo6TWV0YWRhdGEnKVxuICAgICAgICAubWFwKChbaWQsIHJlc10pID0+IFtgJHtzLnN0YWNrTmFtZX0uJHtpZH1gLCByZXNdIGFzIFtzdHJpbmcsIENsb3VkRm9ybWF0aW9uUmVzb3VyY2VdKTtcbiAgICB9KSxcbiAgKTtcblxuICBjb25zdCBncmFwaCA9IGRpcmVjdGlvbiA9PSAnZGlyZWN0J1xuICAgID8gUmVzb3VyY2VHcmFwaC5mcm9tU3RhY2tzKHN0YWNrcylcbiAgICA6IFJlc291cmNlR3JhcGguZnJvbVN0YWNrcyhzdGFja3MpLm9wcG9zaXRlKCk7XG5cbiAgcmV0dXJuIGNvbXB1dGVEaWdlc3RzSW5Ub3BvbG9naWNhbE9yZGVyKGdyYXBoLCByZXNvdXJjZXMsIGV4cG9ydHMpO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlRGlnZXN0c0luVG9wb2xvZ2ljYWxPcmRlcihcbiAgZ3JhcGg6IFJlc291cmNlR3JhcGgsXG4gIHJlc291cmNlczogUmVjb3JkPHN0cmluZywgQ2xvdWRGb3JtYXRpb25SZXNvdXJjZT4sXG4gIGV4cG9ydHM6IFJlY29yZDxzdHJpbmcsIHsgc3RhY2tOYW1lOiBzdHJpbmc7IHZhbHVlOiBhbnkgfT4pOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgY29uc3Qgbm9kZXMgPSBncmFwaC5zb3J0ZWROb2Rlcy5maWx0ZXIobiA9PiByZXNvdXJjZXNbbl0gIT0gbnVsbCk7XG4gIGNvbnN0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICBmb3IgKGNvbnN0IGlkIG9mIG5vZGVzKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZXNbaWRdO1xuICAgIGNvbnN0IGRlcERpZ2VzdHMgPSBBcnJheS5mcm9tKGdyYXBoLm91dE5laWdoYm9ycyhpZCkpLm1hcCgoZCkgPT4gcmVzdWx0W2RdKTtcbiAgICBjb25zdCBwcm9wZXJ0aWVzSGFzaCA9IGhhc2hPYmplY3Qoc3RyaXBSZWZlcmVuY2VzKHN0cmlwQ29uc3RydWN0UGF0aChyZXNvdXJjZSksIGV4cG9ydHMpKTtcbiAgICBjb25zdCB0b0hhc2ggPSByZXNvdXJjZS5UeXBlICsgcHJvcGVydGllc0hhc2ggKyBkZXBEaWdlc3RzLmpvaW4oJycpO1xuICAgIHJlc3VsdFtpZF0gPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHRvSGFzaCkuZGlnZXN0KCdoZXgnKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNoT2JqZWN0KG9iajogYW55KTogc3RyaW5nIHtcbiAgY29uc3QgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKTtcblxuICBmdW5jdGlvbiBhZGRUb0hhc2godmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBhZGRUb0hhc2goJ251bGwnKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGFkZFRvSGFzaCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSlcbiAgICAgICAgICAuc29ydCgpXG4gICAgICAgICAgLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgaGFzaC51cGRhdGUoa2V5KTtcbiAgICAgICAgICAgIGFkZFRvSGFzaCh2YWx1ZVtrZXldKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaGFzaC51cGRhdGUodHlwZW9mIHZhbHVlICsgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgfVxuICB9XG5cbiAgYWRkVG9IYXNoKG9iaik7XG4gIHJldHVybiBoYXNoLmRpZ2VzdCgnaGV4Jyk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBzdWItcHJvcGVydGllcyBjb250YWluaW5nIFJlZiBvciBGbjo6R2V0QXR0IHRvIGF2b2lkIGhhc2hpbmdcbiAqIHJlZmVyZW5jZXMgdGhlbXNlbHZlcyBidXQga2VlcHMgdGhlIHByb3BlcnR5IHN0cnVjdHVyZS5cbiAqL1xuZnVuY3Rpb24gc3RyaXBSZWZlcmVuY2VzKHZhbHVlOiBhbnksIGV4cG9ydHM6IHsgW3A6IHN0cmluZ106IHsgc3RhY2tOYW1lOiBzdHJpbmc7IHZhbHVlOiBhbnkgfSB9KTogYW55IHtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSByZXR1cm4gdmFsdWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoeCA9PiBzdHJpcFJlZmVyZW5jZXMoeCwgZXhwb3J0cykpO1xuICB9XG4gIGlmICgnUmVmJyBpbiB2YWx1ZSkge1xuICAgIHJldHVybiB7IF9fY2xvdWRfcmVmX186ICdSZWYnIH07XG4gIH1cbiAgaWYgKCdGbjo6R2V0QXR0JyBpbiB2YWx1ZSkge1xuICAgIHJldHVybiB7IF9fY2xvdWRfcmVmX186ICdGbjo6R2V0QXR0JyB9O1xuICB9XG4gIGlmICgnRGVwZW5kc09uJyBpbiB2YWx1ZSkge1xuICAgIHJldHVybiB7IF9fY2xvdWRfcmVmX186ICdEZXBlbmRzT24nIH07XG4gIH1cbiAgaWYgKCdGbjo6SW1wb3J0VmFsdWUnIGluIHZhbHVlKSB7XG4gICAgY29uc3QgdiA9IGV4cG9ydHNbdmFsdWVbJ0ZuOjpJbXBvcnRWYWx1ZSddXS52YWx1ZTtcbiAgICAvLyBUcmVhdCBGbjo6SW1wb3J0VmFsdWUgYXMgaWYgaXQgd2VyZSBhIHJlZmVyZW5jZSB3aXRoIHRoZSBzYW1lIHN0YWNrXG4gICAgaWYgKCdSZWYnIGluIHYpIHtcbiAgICAgIHJldHVybiB7IF9fY2xvdWRfcmVmX186ICdSZWYnIH07XG4gICAgfSBlbHNlIGlmICgnRm46OkdldEF0dCcgaW4gdikge1xuICAgICAgcmV0dXJuIHsgX19jbG91ZF9yZWZfXzogJ0ZuOjpHZXRBdHQnIH07XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlc3VsdDogYW55ID0ge307XG4gIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHZhbHVlKSkge1xuICAgIHJlc3VsdFtrXSA9IHN0cmlwUmVmZXJlbmNlcyh2LCBleHBvcnRzKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBzdHJpcENvbnN0cnVjdFBhdGgocmVzb3VyY2U6IGFueSk6IGFueSB7XG4gIGlmIChyZXNvdXJjZT8uTWV0YWRhdGE/LlsnYXdzOmNkazpwYXRoJ10gPT0gbnVsbCkge1xuICAgIHJldHVybiByZXNvdXJjZTtcbiAgfVxuXG4gIGNvbnN0IGNvcHkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlc291cmNlKSk7XG4gIGRlbGV0ZSBjb3B5Lk1ldGFkYXRhWydhd3M6Y2RrOnBhdGgnXTtcbiAgcmV0dXJuIGNvcHk7XG59XG4iXX0=