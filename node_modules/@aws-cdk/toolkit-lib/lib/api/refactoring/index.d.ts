import type { TypedMapping } from '@aws-cdk/cloudformation-diff';
import type * as cxapi from '@aws-cdk/cx-api';
import type { SdkProvider } from '../aws-auth/private';
import type { CloudFormationStack } from './cloudformation';
import { ResourceMapping } from './cloudformation';
import type { MappingGroup } from '../../actions';
export * from './exclude';
export * from './context';
interface StackGroup {
    environment: cxapi.Environment;
    localStacks: CloudFormationStack[];
    deployedStacks: CloudFormationStack[];
}
export declare function usePrescribedMappings(mappingGroups: MappingGroup[], sdkProvider: SdkProvider): Promise<ResourceMapping[]>;
export declare function getDeployedStacks(sdkProvider: SdkProvider, environment: cxapi.Environment): Promise<CloudFormationStack[]>;
export declare function formatEnvironmentSectionHeader(environment: cxapi.Environment): string;
export declare function formatTypedMappings(mappings: TypedMapping[]): string;
export declare function formatAmbiguousMappings(paths: [string[], string[]][]): string;
/**
 * Returns a list of stack groups, each containing the local stacks and the deployed stacks that match the given patterns.
 */
export declare function groupStacks(sdkProvider: SdkProvider, localStacks: CloudFormationStack[], additionalStackNames: string[]): Promise<StackGroup[]>;
//# sourceMappingURL=index.d.ts.map