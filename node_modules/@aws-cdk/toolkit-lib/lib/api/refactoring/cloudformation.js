"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceMapping = exports.ResourceLocation = void 0;
/**
 * This class mirrors the `ResourceLocation` interface from CloudFormation,
 * but is richer, since it has a reference to the stack object, rather than
 * merely the stack name.
 */
class ResourceLocation {
    stack;
    logicalResourceId;
    constructor(stack, logicalResourceId) {
        this.stack = stack;
        this.logicalResourceId = logicalResourceId;
    }
    toPath() {
        const resource = this.stack.template.Resources?.[this.logicalResourceId];
        const result = resource?.Metadata?.['aws:cdk:path'];
        if (result != null) {
            return result;
        }
        // If the path is not available, we can use stack name and logical ID
        return this.toLocationString();
    }
    toLocationString() {
        return `${this.stack.stackName}.${this.logicalResourceId}`;
    }
    getType() {
        const resource = this.stack.template.Resources?.[this.logicalResourceId ?? ''];
        return resource?.Type ?? 'Unknown';
    }
    equalTo(other) {
        return this.logicalResourceId === other.logicalResourceId && this.stack.stackName === other.stack.stackName;
    }
}
exports.ResourceLocation = ResourceLocation;
/**
 * A mapping between a source and a destination location.
 */
class ResourceMapping {
    source;
    destination;
    constructor(source, destination) {
        this.source = source;
        this.destination = destination;
    }
    toTypedMapping() {
        return {
            // the type is the same in both source and destination,
            // so we can use either one
            type: this.source.getType(),
            sourcePath: this.source.toPath(),
            destinationPath: this.destination.toPath(),
        };
    }
}
exports.ResourceMapping = ResourceMapping;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRmb3JtYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjbG91ZGZvcm1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUF1QkE7Ozs7R0FJRztBQUNILE1BQWEsZ0JBQWdCO0lBQ0M7SUFBNEM7SUFBeEUsWUFBNEIsS0FBMEIsRUFBa0IsaUJBQXlCO1FBQXJFLFVBQUssR0FBTCxLQUFLLENBQXFCO1FBQWtCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBUTtJQUNqRyxDQUFDO0lBRU0sTUFBTTtRQUNYLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sTUFBTSxHQUFHLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVwRCxJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNuQixPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDO1FBRUQscUVBQXFFO1FBQ3JFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVNLGdCQUFnQjtRQUNyQixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDN0QsQ0FBQztJQUVNLE9BQU87UUFDWixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFDLENBQUM7UUFDL0UsT0FBTyxRQUFRLEVBQUUsSUFBSSxJQUFJLFNBQVMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sT0FBTyxDQUFDLEtBQXVCO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixLQUFLLEtBQUssQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztJQUM5RyxDQUFDO0NBQ0Y7QUE1QkQsNENBNEJDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLGVBQWU7SUFDRTtJQUEwQztJQUF0RSxZQUE0QixNQUF3QixFQUFrQixXQUE2QjtRQUF2RSxXQUFNLEdBQU4sTUFBTSxDQUFrQjtRQUFrQixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFDbkcsQ0FBQztJQUVNLGNBQWM7UUFDbkIsT0FBTztZQUNMLHVEQUF1RDtZQUN2RCwyQkFBMkI7WUFDM0IsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO1lBQzNCLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNoQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7U0FDM0MsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQWJELDBDQWFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBUeXBlZE1hcHBpbmcgfSBmcm9tICdAYXdzLWNkay9jbG91ZGZvcm1hdGlvbi1kaWZmJztcbmltcG9ydCB0eXBlICogYXMgY3hhcGkgZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcblxuZXhwb3J0IGludGVyZmFjZSBDbG91ZEZvcm1hdGlvblJlc291cmNlIHtcbiAgVHlwZTogc3RyaW5nO1xuICBQcm9wZXJ0aWVzPzogYW55O1xuICBNZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIERlcGVuZHNPbj86IHN0cmluZyB8IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsb3VkRm9ybWF0aW9uVGVtcGxhdGUge1xuICBSZXNvdXJjZXM/OiB7XG4gICAgW2xvZ2ljYWxJZDogc3RyaW5nXTogQ2xvdWRGb3JtYXRpb25SZXNvdXJjZTtcbiAgfTtcbiAgT3V0cHV0cz86IFJlY29yZDxzdHJpbmcsIGFueT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvdWRGb3JtYXRpb25TdGFjayB7XG4gIHJlYWRvbmx5IGVudmlyb25tZW50OiBjeGFwaS5FbnZpcm9ubWVudDtcbiAgcmVhZG9ubHkgc3RhY2tOYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHRlbXBsYXRlOiBDbG91ZEZvcm1hdGlvblRlbXBsYXRlO1xufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgbWlycm9ycyB0aGUgYFJlc291cmNlTG9jYXRpb25gIGludGVyZmFjZSBmcm9tIENsb3VkRm9ybWF0aW9uLFxuICogYnV0IGlzIHJpY2hlciwgc2luY2UgaXQgaGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBzdGFjayBvYmplY3QsIHJhdGhlciB0aGFuXG4gKiBtZXJlbHkgdGhlIHN0YWNrIG5hbWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZUxvY2F0aW9uIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHN0YWNrOiBDbG91ZEZvcm1hdGlvblN0YWNrLCBwdWJsaWMgcmVhZG9ubHkgbG9naWNhbFJlc291cmNlSWQ6IHN0cmluZykge1xuICB9XG5cbiAgcHVibGljIHRvUGF0aCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IHJlc291cmNlID0gdGhpcy5zdGFjay50ZW1wbGF0ZS5SZXNvdXJjZXM/Llt0aGlzLmxvZ2ljYWxSZXNvdXJjZUlkXTtcbiAgICBjb25zdCByZXN1bHQgPSByZXNvdXJjZT8uTWV0YWRhdGE/LlsnYXdzOmNkazpwYXRoJ107XG5cbiAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHBhdGggaXMgbm90IGF2YWlsYWJsZSwgd2UgY2FuIHVzZSBzdGFjayBuYW1lIGFuZCBsb2dpY2FsIElEXG4gICAgcmV0dXJuIHRoaXMudG9Mb2NhdGlvblN0cmluZygpO1xuICB9XG5cbiAgcHVibGljIHRvTG9jYXRpb25TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMuc3RhY2suc3RhY2tOYW1lfS4ke3RoaXMubG9naWNhbFJlc291cmNlSWR9YDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUeXBlKCk6IHN0cmluZyB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSB0aGlzLnN0YWNrLnRlbXBsYXRlLlJlc291cmNlcz8uW3RoaXMubG9naWNhbFJlc291cmNlSWQgPz8gJyddO1xuICAgIHJldHVybiByZXNvdXJjZT8uVHlwZSA/PyAnVW5rbm93bic7XG4gIH1cblxuICBwdWJsaWMgZXF1YWxUbyhvdGhlcjogUmVzb3VyY2VMb2NhdGlvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmxvZ2ljYWxSZXNvdXJjZUlkID09PSBvdGhlci5sb2dpY2FsUmVzb3VyY2VJZCAmJiB0aGlzLnN0YWNrLnN0YWNrTmFtZSA9PT0gb3RoZXIuc3RhY2suc3RhY2tOYW1lO1xuICB9XG59XG5cbi8qKlxuICogQSBtYXBwaW5nIGJldHdlZW4gYSBzb3VyY2UgYW5kIGEgZGVzdGluYXRpb24gbG9jYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZU1hcHBpbmcge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgc291cmNlOiBSZXNvdXJjZUxvY2F0aW9uLCBwdWJsaWMgcmVhZG9ubHkgZGVzdGluYXRpb246IFJlc291cmNlTG9jYXRpb24pIHtcbiAgfVxuXG4gIHB1YmxpYyB0b1R5cGVkTWFwcGluZygpOiBUeXBlZE1hcHBpbmcge1xuICAgIHJldHVybiB7XG4gICAgICAvLyB0aGUgdHlwZSBpcyB0aGUgc2FtZSBpbiBib3RoIHNvdXJjZSBhbmQgZGVzdGluYXRpb24sXG4gICAgICAvLyBzbyB3ZSBjYW4gdXNlIGVpdGhlciBvbmVcbiAgICAgIHR5cGU6IHRoaXMuc291cmNlLmdldFR5cGUoKSxcbiAgICAgIHNvdXJjZVBhdGg6IHRoaXMuc291cmNlLnRvUGF0aCgpLFxuICAgICAgZGVzdGluYXRpb25QYXRoOiB0aGlzLmRlc3RpbmF0aW9uLnRvUGF0aCgpLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==