"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefactoringContext = void 0;
const cloudformation_1 = require("./cloudformation");
const digest_1 = require("./digest");
const toolkit_error_1 = require("../../toolkit/toolkit-error");
const sets_1 = require("../../util/sets");
/**
 * Encapsulates the information for refactoring resources in a single environment.
 */
class RefactoringContext {
    _mappings = [];
    ambiguousMoves = [];
    environment;
    constructor(props) {
        this.environment = props.environment;
        const moves = resourceMoves(props.deployedStacks, props.localStacks, 'direct', props.ignoreModifications);
        const additionalOverrides = structuralOverrides(props.deployedStacks, props.localStacks);
        const overrides = (props.overrides ?? []).concat(additionalOverrides);
        const [nonAmbiguousMoves, ambiguousMoves] = partitionByAmbiguity(overrides, moves);
        this.ambiguousMoves = ambiguousMoves;
        this._mappings = resourceMappings(nonAmbiguousMoves);
    }
    get ambiguousPaths() {
        return this.ambiguousMoves.map(([a, b]) => [convert(a), convert(b)]);
        function convert(locations) {
            return locations.map((l) => l.toPath());
        }
    }
    get mappings() {
        return this._mappings;
    }
}
exports.RefactoringContext = RefactoringContext;
/**
 * Generates an automatic list of overrides that can be deduced from the structure of the opposite resource graph.
 * Suppose we have the following resource graph:
 *
 *     A --> B
 *     C --> D
 *
 * such that B and D are identical, but A is different from C. Then digest(B) = digest(D). If both resources are moved,
 * we have an ambiguity. But if we reverse the arrows:
 *
 *     A <-- B
 *     C <-- D
 *
 * then digest(B) â‰  digest(D), because they now have different dependencies. If we compute the mappings from this
 * opposite graph, we can use them as a set of overrides to disambiguate the original moves.
 *
 */
function structuralOverrides(deployedStacks, localStacks) {
    const moves = resourceMoves(deployedStacks, localStacks, 'opposite', true);
    const [nonAmbiguousMoves] = partitionByAmbiguity([], moves);
    return resourceMappings(nonAmbiguousMoves);
}
function resourceMoves(before, after, direction = 'direct', ignoreModifications = false) {
    const digestsBefore = resourceDigests(before, direction);
    const digestsAfter = resourceDigests(after, direction);
    const stackNames = (stacks) => stacks
        .map((s) => s.stackName)
        .sort()
        .join(', ');
    if (!(ignoreModifications || isomorphic(digestsBefore, digestsAfter))) {
        const message = [
            'A refactor operation cannot add, remove or update resources. Only resource moves and renames are allowed. ',
            "Run 'cdk diff' to compare the local templates to the deployed stacks.\n",
            `Deployed stacks: ${stackNames(before)}`,
            `Local stacks: ${stackNames(after)}`,
        ];
        throw new toolkit_error_1.ToolkitError(message.join('\n'));
    }
    return Object.values(removeUnmovedResources(zip(digestsBefore, digestsAfter)));
}
/**
 * Whether two sets of resources have the same elements (uniquely identified by the digest), and
 * each element is in the same number of locations. The locations themselves may be different.
 */
function isomorphic(a, b) {
    const sameKeys = (0, sets_1.equalSets)(new Set(Object.keys(a)), new Set(Object.keys(b)));
    return sameKeys && Object.entries(a).every(([digest, locations]) => locations.length === b[digest].length);
}
function removeUnmovedResources(moves) {
    const result = {};
    for (const [hash, [before, after]] of Object.entries(moves)) {
        const common = before.filter((b) => after.some((a) => a.equalTo(b)));
        result[hash] = [
            before.filter((b) => !common.some((c) => b.equalTo(c))),
            after.filter((a) => !common.some((c) => a.equalTo(c))),
        ];
    }
    return result;
}
/**
 * For each hash, identifying a single resource, zip the two lists of locations,
 * producing a resource move
 */
function zip(m1, m2) {
    const result = {};
    for (const [hash, locations] of Object.entries(m1)) {
        if (hash in m2) {
            result[hash] = [locations, m2[hash]];
        }
        else {
            result[hash] = [locations, []];
        }
    }
    for (const [hash, locations] of Object.entries(m2)) {
        if (!(hash in m1)) {
            result[hash] = [[], locations];
        }
    }
    return result;
}
/**
 * Computes a list of pairs [digest, location] for each resource in the stack.
 */
function resourceDigests(stacks, direction) {
    // index stacks by name
    const stacksByName = new Map();
    for (const stack of stacks) {
        stacksByName.set(stack.stackName, stack);
    }
    const digests = (0, digest_1.computeResourceDigests)(stacks, direction);
    return groupByKey(Object.entries(digests).map(([loc, digest]) => {
        const [stackName, logicalId] = loc.split('.');
        const location = new cloudformation_1.ResourceLocation(stacksByName.get(stackName), logicalId);
        return [digest, location];
    }));
    function groupByKey(entries) {
        const result = {};
        for (const [key, value] of entries) {
            if (key in result) {
                result[key].push(value);
            }
            else {
                result[key] = [value];
            }
        }
        return result;
    }
}
function isAmbiguousMove(move) {
    const [pre, post] = move;
    // A move is considered ambiguous if two conditions are met:
    //  1. Both sides have at least one element (otherwise, it's just addition or deletion)
    //  2. At least one side has more than one element
    return pre.length > 0 && post.length > 0 && (pre.length > 1 || post.length > 1);
}
function resourceMappings(movements) {
    return movements
        .filter(([pre, post]) => pre.length === 1 && post.length === 1 && !pre[0].equalTo(post[0]))
        .map(([pre, post]) => new cloudformation_1.ResourceMapping(pre[0], post[0]));
}
/**
 * Partitions a list of moves into non-ambiguous and ambiguous moves.
 * @param overrides - The list of overrides to disambiguate moves
 * @param moves - a pair of lists of moves. First: non-ambiguous, second: ambiguous
 */
function partitionByAmbiguity(overrides, moves) {
    const ambiguous = [];
    const nonAmbiguous = [];
    for (let move of moves) {
        if (!isAmbiguousMove(move)) {
            nonAmbiguous.push(move);
        }
        else {
            for (const override of overrides) {
                const resolvedMove = resolve(override, move);
                if (resolvedMove != null) {
                    nonAmbiguous.push(resolvedMove);
                    move = remove(override, move);
                }
            }
            // One last chance to be non-ambiguous
            if (!isAmbiguousMove(move)) {
                nonAmbiguous.push(move);
            }
            else {
                ambiguous.push(move);
            }
        }
    }
    function resolve(override, move) {
        const [pre, post] = move;
        const source = pre.find((loc) => loc.equalTo(override.source));
        const destination = post.find((loc) => loc.equalTo(override.destination));
        return (source && destination) ? [[source], [destination]] : undefined;
    }
    function remove(override, move) {
        const [pre, post] = move;
        return [
            pre.filter(loc => !loc.equalTo(override.source)),
            post.filter(loc => !loc.equalTo(override.destination)),
        ];
    }
    return [nonAmbiguous, ambiguous];
}
//# sourceMappingURL=data:application/json;base64,