"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceGraph = void 0;
const toolkit_error_1 = require("../../toolkit/toolkit-error");
/**
 * An immutable directed graph of resources from multiple CloudFormation stacks.
 */
class ResourceGraph {
    static fromStacks(stacks) {
        const exports = Object.fromEntries(stacks.flatMap((s) => Object.values(s.template.Outputs ?? {})
            .filter((o) => o.Export != null && typeof o.Export.Name === 'string')
            .map((o) => [o.Export.Name, { stackName: s.stackName, value: o.Value }])));
        const resources = Object.fromEntries(stacks.flatMap((s) => Object.entries(s.template.Resources ?? {}).map(([id, res]) => [`${s.stackName}.${id}`, res])));
        // 1. Build adjacency lists
        const edges = {};
        const reverseEdges = {};
        for (const id of Object.keys(resources)) {
            edges[id] = new Set();
            reverseEdges[id] = new Set();
        }
        // 2. Detect dependencies by searching for Ref/Fn::GetAtt
        const findDependencies = (stackName, value) => {
            if (!value || typeof value !== 'object')
                return [];
            if (Array.isArray(value)) {
                return value.flatMap((res) => findDependencies(stackName, res));
            }
            if ('Ref' in value) {
                return [`${stackName}.${value.Ref}`];
            }
            if ('Fn::GetAtt' in value) {
                const refTarget = Array.isArray(value['Fn::GetAtt'])
                    ? value['Fn::GetAtt'][0]
                    : value['Fn::GetAtt'].split('.')[0];
                return [`${stackName}.${refTarget}`];
            }
            if ('Fn::ImportValue' in value) {
                const exp = exports[value['Fn::ImportValue']];
                const v = exp.value;
                if ('Fn::GetAtt' in v) {
                    const id = Array.isArray(v['Fn::GetAtt']) ? v['Fn::GetAtt'][0] : v['Fn::GetAtt'].split('.')[0];
                    return [`${exp.stackName}.${id}`];
                }
                if ('Ref' in v) {
                    return [`${exp.stackName}.${v.Ref}`];
                }
                return [`${exp.stackName}.${v}`];
            }
            const result = [];
            if ('DependsOn' in value) {
                if (Array.isArray(value.DependsOn)) {
                    result.push(...value.DependsOn.map((r) => `${stackName}.${r}`));
                }
                else {
                    result.push(`${stackName}.${value.DependsOn}`);
                }
            }
            result.push(...Object.values(value).flatMap((res) => findDependencies(stackName, res)));
            return result;
        };
        for (const [id, res] of Object.entries(resources)) {
            const stackName = id.split('.')[0];
            const deps = findDependencies(stackName, res || {});
            for (const dep of deps) {
                if (dep in resources && dep !== id) {
                    edges[id].add(dep);
                    reverseEdges[dep].add(id);
                }
            }
        }
        return new ResourceGraph(edges, reverseEdges);
    }
    edges = {};
    reverseEdges = {};
    constructor(edges, reverseEdges) {
        this.edges = edges;
        this.reverseEdges = reverseEdges;
    }
    /**
     * Returns the sorted nodes in topological order.
     */
    get sortedNodes() {
        const result = [];
        const outDegree = Object.keys(this.edges).reduce((acc, k) => {
            acc[k] = this.edges[k].size;
            return acc;
        }, {});
        const queue = Object.keys(outDegree).filter((k) => outDegree[k] === 0);
        while (queue.length > 0) {
            const node = queue.shift();
            result.push(node);
            for (const nxt of this.reverseEdges[node]) {
                outDegree[nxt]--;
                if (outDegree[nxt] === 0) {
                    queue.push(nxt);
                }
            }
        }
        return result;
    }
    inNeighbors(node) {
        if (!(node in this.edges)) {
            throw new toolkit_error_1.ToolkitError(`Node ${node} not found in the graph`);
        }
        return Array.from(this.reverseEdges[node] || []);
    }
    outNeighbors(node) {
        if (!(node in this.edges)) {
            throw new toolkit_error_1.ToolkitError(`Node ${node} not found in the graph`);
        }
        return Array.from(this.edges[node] || []);
    }
    /**
     * Returns another graph with the same nodes, but with the edges inverted
     */
    opposite() {
        return new ResourceGraph(this.reverseEdges, this.edges);
    }
}
exports.ResourceGraph = ResourceGraph;
//# sourceMappingURL=data:application/json;base64,