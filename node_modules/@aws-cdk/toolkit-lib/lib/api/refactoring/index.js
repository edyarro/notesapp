"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePrescribedMappings = usePrescribedMappings;
exports.getDeployedStacks = getDeployedStacks;
exports.formatEnvironmentSectionHeader = formatEnvironmentSectionHeader;
exports.formatTypedMappings = formatTypedMappings;
exports.formatAmbiguousMappings = formatAmbiguousMappings;
exports.groupStacks = groupStacks;
const cloudformation_diff_1 = require("@aws-cdk/cloudformation-diff");
const util_1 = require("../../util");
const plugin_1 = require("../plugin");
const streams_1 = require("../streams");
const cloudformation_1 = require("./cloudformation");
const digest_1 = require("./digest");
const toolkit_error_1 = require("../../toolkit/toolkit-error");
__exportStar(require("./exclude"), exports);
__exportStar(require("./context"), exports);
async function usePrescribedMappings(mappingGroups, sdkProvider) {
    const stackGroups = [];
    for (const group of mappingGroups) {
        stackGroups.push({
            ...group,
            stacks: await getDeployedStacks(sdkProvider, environmentOf(group)),
        });
    }
    // Validate that there are no duplicate destinations
    for (let group of stackGroups) {
        const destinations = new Set();
        for (const destination of Object.values(group.resources)) {
            if (destinations.has(destination)) {
                throw new toolkit_error_1.ToolkitError(`Duplicate destination resource '${destination}' in environment ${group.account}/${group.region}`);
            }
            destinations.add(destination);
        }
    }
    const result = [];
    for (const group of stackGroups) {
        for (const [source, destination] of Object.entries(group.resources)) {
            if (!inUse(source, group.stacks)) {
                throw new toolkit_error_1.ToolkitError(`Source resource '${source}' does not exist in environment ${group.account}/${group.region}`);
            }
            if (inUse(destination, group.stacks)) {
                throw new toolkit_error_1.ToolkitError(`Destination resource '${destination}' already in use in environment ${group.account}/${group.region}`);
            }
            const environment = environmentOf(group);
            const src = makeLocation(source, environment, group.stacks);
            const dst = makeLocation(destination, environment);
            result.push(new cloudformation_1.ResourceMapping(src, dst));
        }
    }
    return result;
    function inUse(location, stacks) {
        const [stackName, logicalId] = location.split('.');
        if (stackName == null || logicalId == null) {
            throw new toolkit_error_1.ToolkitError(`Invalid location '${location}'`);
        }
        const stack = stacks.find((s) => s.stackName === stackName);
        return stack != null && stack.template.Resources?.[logicalId] != null;
    }
    function environmentOf(group) {
        return {
            account: group.account,
            region: group.region,
            name: '',
        };
    }
    function makeLocation(loc, environment, stacks = []) {
        const [stackName, logicalId] = loc.split('.');
        const stack = stacks.find((s) => s.stackName === stackName);
        return new cloudformation_1.ResourceLocation({
            stackName,
            environment,
            template: stack?.template ?? {},
        }, logicalId);
    }
}
async function getDeployedStacks(sdkProvider, environment) {
    const cfn = (await sdkProvider.forEnvironment(environment, plugin_1.Mode.ForReading)).sdk.cloudFormation();
    const summaries = await cfn.paginatedListStacks({
        StackStatusFilter: [
            'CREATE_COMPLETE',
            'UPDATE_COMPLETE',
            'UPDATE_ROLLBACK_COMPLETE',
            'IMPORT_COMPLETE',
            'ROLLBACK_COMPLETE',
        ],
    });
    const normalize = async (summary) => {
        const templateCommandOutput = await cfn.getTemplate({ StackName: summary.StackName });
        const template = (0, util_1.deserializeStructure)(templateCommandOutput.TemplateBody ?? '{}');
        return {
            environment,
            stackName: summary.StackName,
            template,
        };
    };
    // eslint-disable-next-line @cdklabs/promiseall-no-unbounded-parallelism
    return Promise.all(summaries.map(normalize));
}
function formatEnvironmentSectionHeader(environment) {
    const env = `aws://${environment.account}/${environment.region}`;
    return formatToStream(stream => (0, cloudformation_diff_1.formatEnvironmentSectionHeader)(stream, env));
}
function formatTypedMappings(mappings) {
    return formatToStream((stream) => (0, cloudformation_diff_1.formatTypedMappings)(stream, mappings));
}
function formatAmbiguousMappings(paths) {
    return formatToStream((stream) => (0, cloudformation_diff_1.formatAmbiguousMappings)(stream, paths));
}
function formatToStream(cb) {
    const stream = new streams_1.StringWriteStream();
    cb(stream);
    return stream.toString();
}
/**
 * Returns a list of stack groups, each containing the local stacks and the deployed stacks that match the given patterns.
 */
async function groupStacks(sdkProvider, localStacks, additionalStackNames) {
    const environments = new Map();
    for (const stack of localStacks) {
        const environment = await sdkProvider.resolveEnvironment(stack.environment);
        const key = (0, digest_1.hashObject)(environment);
        environments.set(key, environment);
    }
    const localByEnvironment = await (0, util_1.indexBy)(localStacks, async (s) => (0, digest_1.hashObject)(await sdkProvider.resolveEnvironment(s.environment)));
    const groups = [];
    for (let key of localByEnvironment.keys()) {
        const environment = environments.get(key);
        const allDeployedStacks = await getDeployedStacks(sdkProvider, environment);
        const local = localByEnvironment.get(key);
        const hasLocalCounterpart = (s) => local.some((l) => l.stackName === s.stackName);
        const wasExplicitlyProvided = (s) => additionalStackNames.includes(s.stackName);
        groups.push({
            environment,
            deployedStacks: allDeployedStacks.filter(s => hasLocalCounterpart(s) || wasExplicitlyProvided(s)),
            localStacks: local,
        });
    }
    return groups;
}
//# sourceMappingURL=data:application/json;base64,